/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,21],$V3=[1,23],$V4=[1,24],$V5=[1,26],$V6=[1,25],$V7=[1,27],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[5,39,48,49],$Ve=[2,5,8,29,39,42,46,48,49,50,51,52,58,59,60,61,62],$Vf=[2,5,8,9,29,39,42,46,48,49,50,51,52,58,59,60,61,62,63,77,78,79,80,81,82],$Vg=[1,41],$Vh=[1,45],$Vi=[1,42],$Vj=[1,43],$Vk=[29,34,37],$Vl=[1,64],$Vm=[1,61],$Vn=[1,53],$Vo=[1,54],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,62],$Vt=[1,63],$Vu=[12,26,40],$Vv=[11,12,32,33,35,39,40,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Vw=[1,97],$Vx=[1,84],$Vy=[1,83],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[11,12,32,33,35,39,40,75,76],$VM=[11,40],$VN=[11,12,26,32,33,35,39,40,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VO=[11,12,32,33,35,39,40,63,64,69,70,71,72,73,74,75,76],$VP=[11,12,32,33,35,39,40,63,64,65,66,68,69,70,71,72,73,74,75,76],$VQ=[11,12,32,33,35,39,40,69,70,71,72,73,74,75,76],$VR=[1,204],$VS=[39,40],$VT=[39,48,49],$VU=[2,5,8,29,39,42,44,45,46,48,49,50,51,52,58,59,60,61,62];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"res_print":8,"(":9,"EXPRESION":10,")":11,";":12,"ASIGNACION":13,"INCREMENTO":14,"IF":15,"SWITCH":16,"FOR":17,"WHILE":18,"DOWHILE":19,"DOUNTIL":20,"METODO":21,"FUNCION":22,"CALL":23,"TIPO":24,"LISTID":25,"=":26,"VECT_T1":27,"VECT_T2":28,"ID":29,"MODIF_VEC":30,"TERNARIO":31,"?":32,":":33,"[":34,"]":35,"nnew":36,"{":37,"LISTAVALORES":38,"}":39,",":40,"ACCESO_VEC":41,"if":42,"ELSEIF":43,"else":44,"elif":45,"switch":46,"SWITCH_":47,"defolt":48,"case":49,"while":50,"for":51,"do":52,"until":53,"LISTP":54,"void":55,"++":56,"--":57,"int":58,"char":59,"string":60,"double":61,"boolean":62,"-":63,"+":64,"*":65,"/":66,"^":67,"%":68,"<":69,"<=":70,">=":71,">":72,"==":73,"!=":74,"&&":75,"||":76,"!":77,"ENTERO":78,"DECIMAL":79,"CADENA":80,"true":81,"false":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"res_print",9:"(",11:")",12:";",26:"=",29:"ID",32:"?",33:":",34:"[",35:"]",36:"nnew",37:"{",39:"}",40:",",42:"if",44:"else",45:"elif",46:"switch",48:"defolt",49:"case",50:"while",51:"for",52:"do",53:"until",55:"void",56:"++",57:"--",58:"int",59:"char",60:"string",61:"double",62:"boolean",63:"-",64:"+",65:"*",66:"/",67:"^",68:"%",69:"<",70:"<=",71:">=",72:">",73:"==",74:"!=",75:"&&",76:"||",77:"!",78:"ENTERO",79:"DECIMAL",80:"CADENA",81:"true",82:"false"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,5],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[7,5],[7,1],[7,1],[13,4],[13,1],[31,5],[27,11],[27,16],[28,9],[28,17],[41,4],[41,7],[30,4],[15,7],[15,8],[15,11],[15,12],[43,8],[43,7],[16,10],[16,7],[16,9],[47,5],[47,4],[18,7],[17,10],[17,10],[17,12],[17,12],[19,9],[20,9],[22,9],[22,8],[21,9],[21,7],[21,8],[21,6],[23,5],[23,4],[14,2],[14,2],[24,1],[24,1],[24,1],[24,1],[24,1],[25,3],[25,1],[38,3],[38,1],[54,4],[54,2],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 18:
console.log('Declarando: '+$$[$0-1]);
break;
case 19:
console.log('Declarando: '+$$[$0-3]+'con valor: '+$$[$0-1]);
break;
case 22:
console.log('asignando '+$$[$0-3]+' con valor: '+$$[$0-1]);
break;
case 23:
console.log('asignando nuevo valor a '+$$[$0]);
break;
case 24:
console.log($$[$0-4])
break;
case 25:
console.log('vector tipo 1.1');
break;
case 26:
console.log('vector tipo 1.2');
break;
case 27:
console.log('vector tipo 2.1');
break;
case 28:
console.log('vector tipo 2.2 ');
break;
case 32:
console.log('IF SIMPLE');
break;
case 33:
console.log('ELIF ');
break;
case 34:
console.log('IF CON ELSE')
break;
case 35:
console.log('ELIF Y ELSE')
break;
case 38:
console.log('switch con defolt')
break;
case 39:
console.log('switch sin defolt')
break;
case 40:
console.log('switch solo defolt')
break;
case 43:
console.log('WHILE');
break;
case 44:
console.log('FOR CON DEC');
break;
case 45:
console.log('FOR CON ASI');
break;
case 46:
console.log('FOR CON DECx2');
break;
case 47:
console.log('FOR CON ASIx2');
break;
case 48:
console.log('do while (: ')
break;
case 49:
console.log('do until (: ')
break;
case 50:
console.log('Funcion: '+$$[$0-8]+' declarada')
break;
case 51:
console.log('Funcion sin parametros: '+$$[$0-7]+' declarada')
break;
case 52:
console.log('Metodo con void: '+$$[$0-8]+' declarado')
break;
case 53:
console.log('Metodo sin void: '+$$[$0-6]+' declarado')
break;
case 54:
console.log('Metodo con void sin parametros: '+$$[$0-7]+' declarado')
break;
case 55:
console.log('Metodo sin void ni apramtros: '+$$[$0-5]+' declarado')
break;
case 56:
console.log('llamando funcion '+$$[$0-4]+' con parametros')
break;
case 57:
console.log('llamando funcion '+$$[$0-3])
break;
case 58:
this.$=$$[$0-1];  console.log('aumentando la variable: '+$$[$0-1]);
break;
case 59:
this.$=$$[$0-1];  console.log('decremento la variable: '+$$[$0-1]);
break;
case 60: case 61: case 62: case 63: case 64: case 87: case 88: case 89:
this.$=$$[$0];
break;
case 65: case 67:
this.$ += ", "+$$[$0]+" ";
break;
case 66: case 68:
this.$ = $$[$0];
break;
case 69:
this.$ += ", "+$$[$0-1]+" ";
break;
case 70:
this.$ = $$[$0-1];
break;
case 71:
 this.$ = $$[$0] *-1; 
break;
case 72:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 73:
 this.$ = $$[$0-2] - $$[$0]; 
break;
case 74:
 this.$ = $$[$0-2] * $$[$0]; 
break;
case 75:
 this.$ = $$[$0-2] / $$[$0]; 
break;
case 76:
	this.$ = $$[$0-2] ** $$[$0]; 
break;
case 77:
	this.$ = $$[$0-2] % $$[$0]; 
break;
case 78:
if($$[$0-2] < $$[$0]){console.log('Es menor')}else{console.log('noes')};
break;
case 81:
this.$=`${$$[$0-2]}${$$[$0]}`;
break;
case 90: case 91:
 this.$ = Number($$[$0]); 
break;
case 92: case 93: case 94: case 95:
 this.$ = ($$[$0]); 
break;
case 96:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{1:[3]},{5:[1,34]},o($Vd,[2,3],{6:3,7:5,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,30:22,41:33,4:35,2:$V0,8:$V1,29:$V2,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc}),o($Vd,[2,4]),o($Ve,[2,5]),{9:[1,36]},o($Ve,[2,7]),{12:[1,37]},o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Ve,[2,17]),{25:38,29:[1,40],34:[1,39]},o($Vf,[2,20]),o($Vf,[2,21]),{9:[1,44],26:$Vg,34:$Vh,56:$Vi,57:$Vj},o($Vf,[2,23]),{9:[1,46]},{9:[1,47]},{9:[1,48]},{9:[1,49]},{37:[1,50]},o($Vk,[2,60]),o($Vk,[2,61]),o($Vk,[2,62]),o($Vk,[2,63]),o($Vk,[2,64]),{26:[1,51]},{1:[2,1]},o($Vd,[2,2]),{9:$Vl,10:52,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Ve,[2,8]),{12:[1,65],26:[1,66],40:[1,67]},{35:[1,68]},o($Vu,[2,66]),{9:$Vl,10:69,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Vv,[2,58]),o($Vv,[2,59]),{11:[1,71],24:72,54:70,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{9:$Vl,10:73,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:74,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:75,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{7:76,13:77,24:18,27:19,28:20,29:[1,78],30:22,41:33,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{9:$Vl,10:79,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{2:$V0,4:80,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{9:$Vl,10:81,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:[1,82],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{9:$Vl,10:98,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:99,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Vv,[2,87]),o($Vv,[2,88]),o($Vv,[2,89]),o($Vv,[2,90]),o($Vv,[2,91]),o($Vv,[2,92]),o($Vv,[2,93],{34:$Vh,56:$Vi,57:$Vj}),o($Vv,[2,94]),o($Vv,[2,95]),{9:$Vl,10:100,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Vf,[2,18]),{9:$Vl,10:101,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{29:[1,102]},{29:[1,103],34:[1,104]},{12:[1,105],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{11:[1,106],40:[1,107]},{12:[1,110],33:[1,108],37:[1,109]},{29:[1,111]},{32:$Vw,35:[1,112],63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{11:[1,113],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{11:[1,114],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{9:$Vl,10:115,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:116,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{26:$Vg,34:$Vh},{11:[1,117],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{39:[1,118]},{12:[1,119],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{12:[1,120]},{9:$Vl,10:121,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:122,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:123,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:124,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:125,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:126,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:127,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:128,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:129,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:130,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:131,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:132,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:133,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:134,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:135,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Vv,[2,71]),o($VL,[2,86],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),{11:[1,136],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{12:[1,137],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},o($Vu,[2,65]),{26:[1,138]},{35:[1,139]},o($Vf,[2,22]),{12:[1,142],33:[1,140],37:[1,141]},{24:143,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{24:145,55:[1,144],58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{2:$V0,4:146,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Ve,[2,57]),o($VM,[2,70]),o($VN,[2,29],{34:[1,147]}),{37:[1,148]},{37:[1,149]},{12:[1,150],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{12:[1,151],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{37:[1,152]},{50:[1,153],53:[1,154]},o($Vf,[2,31]),o($Ve,[2,6]),o($VO,[2,72],{65:$Vz,66:$VA,67:$VB,68:$VC}),o($VO,[2,73],{65:$Vz,66:$VA,67:$VB,68:$VC}),o($VP,[2,74],{67:$VB}),o($VP,[2,75],{67:$VB}),o($Vv,[2,76]),o($VP,[2,77],{67:$VB}),o($VQ,[2,78],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC}),o($VQ,[2,79],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC}),o($VQ,[2,80],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC}),o($VQ,[2,81],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC}),o($VQ,[2,82],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC}),o($VQ,[2,83],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC}),o($VL,[2,84],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o([11,12,32,33,35,39,40,76],[2,85],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ}),{32:$Vw,33:[1,155],63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},o($Vv,[2,96]),o($Vf,[2,19]),{36:[1,156],37:[1,157]},{29:[1,158]},{24:160,55:[1,159],58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{2:$V0,4:161,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Ve,[2,56]),{29:[1,162]},{37:[1,163]},{37:[1,164]},{39:[1,165]},{9:$Vl,10:166,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{2:$V0,4:167,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{47:168,48:[1,169],49:[1,170]},{14:171,29:[1,172]},{14:173,29:[1,174]},{2:$V0,4:175,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{9:[1,176]},{9:[1,177]},{9:$Vl,10:178,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{24:179,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{9:$Vl,10:181,14:56,29:$Vm,31:55,38:180,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{26:[1,182]},{37:[1,183]},{37:[1,184]},{39:[1,185]},o($VM,[2,69]),{2:$V0,4:186,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{2:$V0,4:187,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Ve,[2,55]),{32:$Vw,35:[1,188],63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{39:[1,189]},{39:[1,191],48:[1,190],49:[1,192]},{33:[1,193]},{9:$Vl,10:194,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{11:[1,195]},{26:[1,196],56:$Vi,57:$Vj},{11:[1,197]},{26:[1,198],56:$Vi,57:$Vj},{39:[1,199]},{9:$Vl,10:200,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:201,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o([11,12,32,33,35,39,40],[2,24],{63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),{34:[1,202]},{39:[1,203],40:$VR},o($VS,[2,68],{32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),{36:[1,205],37:[1,206]},{2:$V0,4:207,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{2:$V0,4:208,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Ve,[2,53]),{39:[1,209]},{39:[1,210]},o($VN,[2,30]),o($Ve,[2,32],{43:211,44:[1,212],45:[1,213]}),{33:[1,214]},o($Ve,[2,39]),{9:$Vl,10:215,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{2:$V0,4:216,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{32:$Vw,33:[1,217],63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{37:[1,218]},{9:$Vl,10:219,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{37:[1,220]},{9:$Vl,10:221,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Ve,[2,43]),{11:[1,222],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{11:[1,223],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{9:$Vl,10:224,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{12:[1,225]},{9:$Vl,10:226,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{24:227,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{37:[1,228]},{39:[1,229]},{39:[1,230]},o($Ve,[2,54]),o($Ve,[2,51]),o($Ve,[2,33],{44:[1,231],45:[1,232]}),{37:[1,233]},{9:[1,234]},{2:$V0,4:235,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{32:$Vw,33:[1,236],63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{39:[1,237]},{2:$V0,4:238,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{2:$V0,4:239,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{11:[1,240],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{2:$V0,4:241,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{11:[1,242],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{12:[1,243]},{12:[1,244]},{32:$Vw,35:[1,245],63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},o($Vf,[2,27]),o($VS,[2,67],{32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),{34:[1,246]},{9:$Vl,10:181,14:56,29:$Vm,31:55,38:247,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Ve,[2,52]),o($Ve,[2,50]),{37:[1,248]},{9:[1,249]},{2:$V0,4:250,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{9:$Vl,10:251,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{39:[1,252]},{2:$V0,4:253,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Ve,[2,40]),o($VT,[2,42]),{39:[1,254]},{37:[1,255]},{39:[1,256]},{37:[1,257]},o($Ve,[2,48]),o($Ve,[2,49]),{12:[1,258]},{9:$Vl,10:259,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{39:[1,260],40:$VR},{2:$V0,4:261,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{9:$Vl,10:262,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{39:[1,263]},{11:[1,264],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},o($Ve,[2,38]),o($VT,[2,41]),o($Ve,[2,44]),{2:$V0,4:265,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Ve,[2,45]),{2:$V0,4:266,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Vf,[2,25]),{32:$Vw,35:[1,267],63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{40:[1,268]},{39:[1,269]},{11:[1,270],32:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},o($Ve,[2,34]),{37:[1,271]},{39:[1,272]},{39:[1,273]},{34:[1,274]},{37:[1,275]},o($Ve,[2,35]),{37:[1,276]},{2:$V0,4:277,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Ve,[2,46]),o($Ve,[2,47]),{9:$Vl,10:278,14:56,29:$Vm,31:55,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{9:$Vl,10:181,14:56,29:$Vm,31:55,38:279,41:57,63:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{2:$V0,4:280,6:3,7:5,8:$V1,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,27:19,28:20,29:$V2,30:22,41:33,42:$V3,46:$V4,50:$V5,51:$V6,52:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{39:[1,281]},{32:$Vw,35:[1,282],63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK},{39:[1,283],40:$VR},{39:[1,284]},o($VU,[2,37]),{12:[1,285]},{39:[1,286]},o($VU,[2,36]),o($Vf,[2,26]),{12:[1,287]},o($Vf,[2,28])],
defaultActions: {34:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log('comentario una linea')
break;
case 1:console.log('comentario multiLinea')
break;
case 2:return 'res_evaluar';
break;
case 3:return 8;
break;
case 4:return 58;
break;
case 5:return 61;
break;
case 6:return 62;
break;
case 7:return 59;
break;
case 8:return 60;
break;
case 9:return 82;
break;
case 10:return 81;
break;
case 11:return 36;
break;
case 12:return 42;
break;
case 13:return 44;
break;
case 14:return 45;
break;
case 15:return 46;
break;
case 16:return 48;
break;
case 17:return 49;
break;
case 18:return 50;
break;
case 19:return 51;
break;
case 20:return 52;
break;
case 21:return 53;
break;
case 22:return 'break';
break;
case 23:return 'continue';
break;
case 24:return 'return';
break;
case 25:return 55;
break;
case 26:return 12;
break;
case 27:return 33;
break;
case 28:return 40;
break;
case 29:return 9;
break;
case 30:return 11;
break;
case 31:return 34;
break;
case 32:return 35;
break;
case 33:return 37;
break;
case 34:return 39;
break;
case 35:return 56;
break;
case 36:return 57;
break;
case 37:return 64;
break;
case 38:return 63;
break;
case 39:return 65;
break;
case 40:return 66;
break;
case 41:return 67;
break;
case 42:return 68;
break;
case 43:return 32;
break;
case 44:return 73;
break;
case 45:return 26;
break;
case 46:return 71;
break;
case 47:return 72;
break;
case 48:return 70;
break;
case 49:return 69;
break;
case 50:return 74;
break;
case 51:return 77;
break;
case 52:return 76;
break;
case 53:return 75;
break;
case 54:return 79;
break;
case 55:return 78;
break;
case 56:return 80;
break;
case 57:return 29;
break;
case 58:
break;
case 59:
break;
case 60:return 5;
break;
case 61: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:(\/\/(.)*))/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:Evaluar\b)/i,/^(?:print\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^"]+")/i,/^(?:["_"0-9A-Za-z]*\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}