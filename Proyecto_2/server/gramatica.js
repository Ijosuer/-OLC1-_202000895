/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,26],$V2=[1,27],$V3=[1,29],$V4=[1,30],$V5=[1,32],$V6=[1,31],$V7=[1,33],$V8=[1,35],$V9=[1,36],$Va=[1,34],$Vb=[1,37],$Vc=[1,38],$Vd=[1,39],$Ve=[1,40],$Vf=[1,41],$Vg=[2,5],$Vh=[5,32,35,36,46,52,56,58,59,60,61,62,64,65,79,82,83,84,85,86],$Vi=[1,49],$Vj=[5,32,33,35,36,46,52,56,58,59,60,61,62,64,65,67,68,69,70,71,72,73,74,79,82,83,84,85,86,87,101,102,103,104,105,106],$Vk=[1,53],$Vl=[1,58],$Vm=[1,54],$Vn=[1,55],$Vo=[36,41,44],$Vp=[12,28,47],$Vq=[1,86],$Vr=[1,83],$Vs=[1,87],$Vt=[1,88],$Vu=[1,89],$Vv=[1,90],$Vw=[1,81],$Vx=[1,91],$Vy=[1,92],$Vz=[1,93],$VA=[1,73],$VB=[1,74],$VC=[1,79],$VD=[1,80],$VE=[1,82],$VF=[1,84],$VG=[1,85],$VH=[12,34,39,40,42,46,47,87,88,89,90,91,92,93,94,95,96,97,98,99,100],$VI=[1,111],$VJ=[1,133],$VK=[1,120],$VL=[1,119],$VM=[1,121],$VN=[1,122],$VO=[1,123],$VP=[1,124],$VQ=[1,125],$VR=[1,126],$VS=[1,127],$VT=[1,128],$VU=[1,129],$VV=[1,130],$VW=[1,131],$VX=[1,132],$VY=[2,120],$VZ=[1,149],$V_=[2,80],$V$=[12,34,39,40,42,46,47,99,100],$V01=[2,79],$V11=[34,47],$V21=[12,28,34,39,40,42,46,47,87,88,89,90,91,92,93,94,95,96,97,98,99,100],$V31=[12,34],$V41=[12,34,39,40,42,46,47,87,88,93,94,95,96,97,98,99,100],$V51=[12,34,39,40,42,46,47,87,88,89,90,92,93,94,95,96,97,98,99,100],$V61=[12,34,39,40,42,46,47,93,94,95,96,97,98,99,100],$V71=[1,278],$V81=[46,47],$V91=[5,32,33,34,35,36,46,52,56,58,59,60,61,62,64,65,67,68,69,70,71,72,73,74,79,82,83,84,85,86,87,101,102,103,104,105,106],$Va1=[46,58,59],$Vb1=[5,32,35,36,46,52,54,55,56,58,59,60,61,62,64,65,79,82,83,84,85,86];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"ptyComa":6,"INSTRUCCION":7,"DECLARACION":8,"IMPRIMIR":9,"ASIGNACION":10,"INCREMENTO":11,";":12,"IF":13,"SWITCH":14,"FOR":15,"WHILE":16,"DOWHILE":17,"DOUNTIL":18,"METODO":19,"FUNCION":20,"CALL":21,"BREAK":22,"CONTINUE":23,"POP":24,"PUSH":25,"TIPO":26,"LISTID":27,"=":28,"EXPRESION":29,"VECT_T1":30,"VECT_T2":31,"res_print":32,"(":33,")":34,"res_println":35,"ID":36,"MODIF_VEC":37,"TERNARIO":38,"?":39,":":40,"[":41,"]":42,"nnew":43,"{":44,"LISTAVALORES":45,"}":46,",":47,"ACCESO_VEC":48,".":49,"pop":50,"push":51,"if":52,"ELSEIF":53,"else":54,"elif":55,"switch":56,"SWITCH_":57,"defolt":58,"case":59,"while":60,"for":61,"do":62,"until":63,"break":64,"continue":65,"CASTEO":66,"tolower":67,"toupper":68,"round":69,"length":70,"CADENA":71,"typeof":72,"tostring":73,"tochararray":74,"LISTP":75,"void":76,"RETORNO":77,"return":78,"run":79,"++":80,"--":81,"int":82,"char":83,"string":84,"double":85,"boolean":86,"-":87,"+":88,"*":89,"/":90,"^":91,"%":92,"<":93,"<=":94,">=":95,">":96,"==":97,"!=":98,"&&":99,"||":100,"!":101,"ENTERO":102,"DECIMAL":103,"caracter":104,"true":105,"false":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"ptyComa",12:";",28:"=",32:"res_print",33:"(",34:")",35:"res_println",36:"ID",39:"?",40:":",41:"[",42:"]",43:"nnew",44:"{",46:"}",47:",",49:".",50:"pop",51:"push",52:"if",54:"else",55:"elif",56:"switch",58:"defolt",59:"case",60:"while",61:"for",62:"do",63:"until",64:"break",65:"continue",67:"tolower",68:"toupper",69:"round",70:"length",71:"CADENA",72:"typeof",73:"tostring",74:"tochararray",76:"void",78:"return",79:"run",80:"++",81:"--",82:"int",83:"char",84:"string",85:"double",86:"boolean",87:"-",88:"+",89:"*",90:"/",91:"^",92:"%",93:"<",94:"<=",95:">=",96:">",97:"==",98:"!=",99:"&&",100:"||",101:"!",102:"ENTERO",103:"DECIMAL",104:"caracter",105:"true",106:"false"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[4,1],[7,1],[7,1],[7,1],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,1],[7,1],[7,1],[7,1],[8,3],[8,5],[8,1],[8,1],[9,5],[9,5],[9,5],[10,4],[10,1],[38,5],[30,11],[30,16],[31,9],[31,17],[48,4],[48,7],[24,6],[25,7],[37,4],[13,7],[13,8],[13,11],[13,12],[53,8],[53,7],[14,10],[14,7],[14,9],[57,5],[57,4],[16,7],[15,10],[15,10],[15,12],[15,12],[17,9],[18,9],[22,2],[23,2],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[66,4],[20,9],[20,8],[19,9],[19,7],[19,8],[19,6],[77,3],[77,2],[21,4],[21,3],[21,5],[21,4],[11,2],[11,2],[26,1],[26,1],[26,1],[26,1],[26,1],[27,3],[27,1],[45,3],[45,1],[75,4],[75,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
var a={'errores':lista_Errores,'arbol':$$[$0-1]}; lista_Errores=[]; return a;
break;
case 3:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4:
this.$=[$$[$0]];
break;
case 5:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 6: case 7: case 8: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 19: case 20: case 21: case 22:
this.$=$$[$0]
break;
case 9: case 18:
this.$=$$[$0-1]
break;
case 23:
this.$ = INSTRUCCION.nuevaDECLARACION($$[$0-1], null, $$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 24:
this.$ = INSTRUCCION.nuevaDECLARACION($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line, (this._$.first_column+1));
break;
case 27: case 29:
 this.$ = new INSTRUCCION.nuevoPRINT($$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 28:
console.log('print call: '+$$[$0-2])
break;
case 30:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-3], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 31:
console.log('asignando nuevo valor a vector '+$$[$0]);
break;
case 32:
this.$ = INSTRUCCION.nuevoOperacionTernario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 33:
console.log('vector tipo 1.1');
break;
case 34:
console.log('vector tipo 1.2');
break;
case 35:
console.log('vector tipo 2.1');
break;
case 36:
console.log('vector tipo 2.2 ');
break;
case 42:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 43:
this.$ = new INSTRUCCION.nuevoIf($$[$0-5], $$[$0-2] , $$[$0], this._$.first_line,(this._$.first_column+1));
break;
case 44:
 this.$ = INSTRUCCION.nuevoELSEIF_Def($$[$0-1], this._$.first_line,(this._$.first_column+1)); 
break;
case 45:
console.log('ELIF Y ELSE')
break;
case 46:
$$[$0-7].push($$[$0-6]); this.$ = $$[$0-7];
break;
case 47:
this.$ = INSTRUCCION.nuevoListaELSEIF($$[$0-6]);
break;
case 48:
console.log('switch con defolt')
break;
case 49:
console.log('switch sin defolt')
break;
case 50:
console.log('switch solo defolt')
break;
case 53:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 54: case 55:
this.$ = new INSTRUCCION.nuevoFOR($$[$0-7],$$[$0-6], $$[$0-4],$$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 56:
this.$ = new INSTRUCCION.nuevoFOR($$[$0-9],$$[$0-8], INSTRUCCION.nuevaASIGNACION($$[$0-6], $$[$0-4], this._$.first_line, (this._$.first_column+1)),$$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 57:
console.log('FOR CON ASIx2');
break;
case 58: case 59:
this.$ = new INSTRUCCION.nuevoDOWhile($$[$0-2], $$[$0-6] , this._$.first_line,(this._$.first_column+1));
break;
case 60:
this.$ = new INSTRUCCION.nuevoBREAK(this._$.first_line, (this._$.first_column+1));
break;
case 61:
this.$ = new INSTRUCCION.nuevoCONTINUE(this._$.first_line, (this._$.first_column+1));
break;
case 71:
console.log('Funcion: '+$$[$0-8]+' declarada')
break;
case 72:
console.log('Funcion sin parametros: '+$$[$0-7]+' declarada')
break;
case 73:
console.log('Metodo con void: '+$$[$0-8]+' declarado')
break;
case 74:
console.log('Metodo sin void: '+$$[$0-6]+' declarado')
break;
case 75:
console.log('Metodo con void sin parametros: '+$$[$0-7]+' declarado')
break;
case 76:
console.log('Metodo sin void ni apramtros: '+$$[$0-5]+' declarado')
break;
case 77:
this.$ = new INSTRUCCION.nuevoRETURN($$[$0-1],this._$.first_line, (this._$.first_column+1));
break;
case 78:
this.$ = new INSTRUCCION.nuevoRETURN(null,this._$.first_line, (this._$.first_column+1));
break;
case 79:
console.log('llamando funcion '+$$[$0-3]+' con parametros')
break;
case 80:
console.log('llamando funcion '+$$[$0-2])
break;
case 81:
console.log('llamando funcion '+$$[$0-4])
break;
case 82:
console.log('llamando funcion '+$$[$0-3])
break;
case 83: case 84:
this.$ = INSTRUCCION.nuevaASIGNACION($$[$0-1], INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoVALOR( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoVALOR( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1)), this._$.first_line, (this._$.first_column+1));
break;
case 85: case 86: case 87: case 88: case 89: case 112: case 113: case 114: case 115:
this.$=$$[$0];
break;
case 90: case 92:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 91: case 93:
this.$ = [$$[$0]];
break;
case 94:
$$[$0-3].push($$[$0-1]); this.$ = $$[$0-3];
break;
case 95:
this.$ = [$$[$0-1]];
break;
case 96:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$01],TIPO_OPERACION.NEGACION, this._$.first_line, (this._$.first_column+1));
break;
case 97:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1));
break;
case 98:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1));
break;
case 99:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION, this._$.first_line, (this._$.first_column+1));
break;
case 100:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION, this._$.first_line, (this._$.first_column+1));
break;
case 101:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA, this._$.first_line, (this._$.first_column+1));
break;
case 102:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO, this._$.first_line, (this._$.first_column+1));
break;
case 103:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 104:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 105:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 106:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 107:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 108:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 109:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 110:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 111:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$01], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 116: case 117:
this.$ = INSTRUCCION.nuevoVALOR( Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1));
break;
case 118:
this.$ = INSTRUCCION.nuevoVALOR($$[$0] , TIPO_VALOR.CADENA, this._$.first_line, (this._$.first_column+1));
break;
case 119:
this.$ = INSTRUCCION.nuevoVALOR($$[$0] , TIPO_VALOR.CARACTER, this._$.first_line, (this._$.first_column+1));
break;
case 120:
this.$ = INSTRUCCION.nuevoVALOR($$[$0] , TIPO_VALOR.IDENTIFICADOR, this._$.first_line, (this._$.first_column+1));
break;
case 121:
this.$ = INSTRUCCION.nuevoVALOR(true, TIPO_VALOR.BANDERA, this._$.first_line, (this._$.first_column+1));
break;
case 122:
this.$ = INSTRUCCION.nuevoVALOR(false, TIPO_VALOR.BANDERA, this._$.first_line, (this._$.first_column+1));
break;
case 123:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{2:[1,3],3:1,4:2,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{1:[3]},{5:[1,43],7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o([5,32,35,36,52,56,60,61,62,64,65,79,82,83,84,85,86],$Vg,{6:[1,45]}),o($Vh,[2,4]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),{12:[1,46]},o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),{12:[1,47]},o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),{27:48,36:[1,50],41:$Vi},o($Vj,[2,25]),o($Vj,[2,26]),{33:[1,51]},{33:[1,52]},{28:$Vk,33:[1,56],41:$Vl,49:[1,57],80:$Vm,81:$Vn},o($Vj,[2,31]),{33:[1,59]},{33:[1,60]},{33:[1,61]},{33:[1,62]},{44:[1,63]},{36:[1,64]},{12:[1,65]},{12:[1,66]},o($Vo,[2,85]),o($Vo,[2,86]),o($Vo,[2,87]),o($Vo,[2,88]),o($Vo,[2,89]),{28:[1,67]},{1:[2,1]},o($Vh,[2,3]),{1:[2,2]},o($Vh,[2,9]),o($Vh,[2,18]),{12:[1,68],28:[1,69],47:[1,70]},{42:[1,71]},o($Vp,[2,91]),{11:76,29:72,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,21:94,29:95,33:$Vq,36:[1,96],38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,79:$Va,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:97,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($VH,[2,83]),o($VH,[2,84]),{26:100,34:[1,99],75:98,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{50:[1,101],51:[1,102]},{11:76,29:103,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:104,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:105,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{8:106,10:107,26:22,30:23,31:24,36:[1,108],37:28,48:42,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{11:76,29:109,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{2:$VI,4:110,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{33:[1,112]},o($Vh,[2,60]),o($Vh,[2,61]),{11:76,29:113,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($Vj,[2,23]),{11:76,29:114,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{36:[1,115]},{36:[1,116],41:[1,117]},{34:[1,118],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{11:76,29:134,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:135,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($VH,[2,112]),o($VH,[2,113]),o($VH,[2,114]),o($VH,[2,115]),o($VH,[2,116]),o($VH,[2,117]),o($VH,[2,118]),o($VH,[2,119]),o($VH,$VY,{41:$Vl,80:$Vm,81:$Vn}),o($VH,[2,121]),o($VH,[2,122]),{11:76,29:136,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{33:[1,137]},{33:[1,138]},{33:[1,139]},{33:[1,140]},{33:[1,141]},{33:[1,142]},{33:[1,143]},{34:[1,144]},{34:[1,145],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},o([34,39,87,88,89,90,91,92,93,94,95,96,97,98,99,100],$VY,{33:[1,146],41:$Vl,80:$Vm,81:$Vn}),{12:[1,147],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{34:[1,148],47:$VZ},{12:$V_,40:[1,150],44:[1,151]},{36:[1,152]},{33:[1,153]},{33:[1,154]},{39:$VJ,42:[1,155],87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{34:[1,156],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{34:[1,157],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{11:76,29:158,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:159,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{28:$Vk,41:$Vl},{34:[1,160],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,161],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o([32,35,36,46,52,56,58,59,60,61,62,64,65,79,82,83,84,85,86],$Vg),{26:100,34:[1,163],75:162,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{12:[1,164],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{12:[1,165],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},o($Vp,[2,90]),{28:[1,166]},{42:[1,167]},{12:[1,168]},{11:76,29:169,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:170,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:171,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:172,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:173,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:174,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:175,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:176,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:177,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:178,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:179,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:180,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:181,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:182,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:183,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($VH,[2,96]),o($V$,[2,111],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV}),{34:[1,184],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{11:76,29:185,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:186,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:187,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{26:191,30:188,31:189,71:[1,190],82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{11:76,29:192,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:193,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{71:[1,194]},{12:[1,195]},{12:[1,196]},{26:100,34:[1,198],75:197,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($Vj,[2,30]),{12:$V01,40:[1,199],44:[1,200]},{26:201,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{26:203,76:[1,202],82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{2:$VI,4:204,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($V11,[2,95]),{34:[1,205]},{11:76,29:206,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($V21,[2,37],{41:[1,207]}),{44:[1,208]},{44:[1,209]},{12:[1,210],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{12:[1,211],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{44:[1,212]},{60:[1,213],63:[1,214]},{34:[1,215],47:$VZ},o($V31,[2,82]),o($Vj,[2,41]),o($Vj,[2,24]),{43:[1,216],44:[1,217]},{36:[1,218]},o($Vh,[2,27]),o($V41,[2,97],{89:$VM,90:$VN,91:$VO,92:$VP}),o($V41,[2,98],{89:$VM,90:$VN,91:$VO,92:$VP}),o($V51,[2,99],{91:$VO}),o($V51,[2,100],{91:$VO}),o($VH,[2,101]),o($V51,[2,102],{91:$VO}),o($V61,[2,103],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V61,[2,104],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V61,[2,105],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V61,[2,106],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V61,[2,107],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V61,[2,108],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V$,[2,109],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV}),o([12,34,39,40,42,46,47,100],[2,110],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW}),{39:$VJ,40:[1,219],87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},o($VH,[2,123]),{34:[1,220],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{34:[1,221],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{34:[1,222],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{34:[1,223]},{34:[1,224]},{34:[1,225]},{41:$Vi},{34:[1,226],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{34:[1,227],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{34:[1,228]},o($Vh,[2,28]),o($Vh,[2,29]),{34:[1,229],47:$VZ},{34:$V_},{26:231,76:[1,230],82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{2:$VI,4:232,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{36:[1,233]},{44:[1,234]},{44:[1,235]},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,236],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{12:[1,237]},{34:[1,238],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{11:76,29:239,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{2:$VI,4:240,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{57:241,58:[1,242],59:[1,243]},{11:244,36:[1,245]},{11:246,36:[1,247]},{2:$VI,4:248,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{33:[1,249]},{33:[1,250]},o($V31,[2,81]),{26:251,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{11:76,29:253,33:$Vq,36:$Vr,38:75,45:252,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{28:[1,254]},{11:76,29:255,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($VH,[2,62]),o($VH,[2,63]),o($VH,[2,64]),o($VH,[2,65]),o($VH,[2,66]),o($VH,[2,67]),o($VH,[2,68]),o($VH,[2,69]),o($VH,[2,70]),{34:$V01},{44:[1,256]},{44:[1,257]},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,258],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($V11,[2,94]),{2:$VI,4:259,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{2:$VI,4:260,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($Vh,[2,76]),o($Vh,[2,39]),{12:[1,261]},{39:$VJ,42:[1,262],87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,263],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{46:[1,265],58:[1,264],59:[1,266]},{40:[1,267]},{11:76,29:268,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{34:[1,269]},{28:[1,270],80:$Vm,81:$Vn},{34:[1,271]},{28:[1,272],80:$Vm,81:$Vn},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,273],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{11:76,29:274,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:275,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{41:[1,276]},{46:[1,277],47:$V71},o($V81,[2,93],{39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX}),{43:[1,279],44:[1,280]},o([12,34,39,40,42,46,47],[2,32],{87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX}),{2:$VI,4:281,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{2:$VI,4:282,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($Vh,[2,74]),{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,283],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,284],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($Vh,[2,40]),o($V21,[2,38]),o($Vh,[2,42],{53:285,54:[1,286],55:[1,287]}),{40:[1,288]},o($Vh,[2,49]),{11:76,29:289,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{2:$VI,4:290,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{39:$VJ,40:[1,291],87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{44:[1,292]},{11:76,29:293,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{44:[1,294]},{11:76,29:295,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($Vh,[2,53]),{34:[1,296],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{34:[1,297],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{11:76,29:298,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{12:[1,299]},{11:76,29:300,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{26:301,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{44:[1,302]},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,303],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,304],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($Vh,[2,75]),o($Vh,[2,72]),o($Vh,[2,43],{54:[1,305],55:[1,306]}),{44:[1,307]},{33:[1,308]},{2:$VI,4:309,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{39:$VJ,40:[1,310],87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,311],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{2:$VI,4:312,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{2:$VI,4:313,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{34:[1,314],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{2:$VI,4:315,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{34:[1,316],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{12:[1,317]},{12:[1,318]},{39:$VJ,42:[1,319],87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},o($V91,[2,35]),o($V81,[2,92],{39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX}),{41:[1,320]},{11:76,29:253,33:$Vq,36:$Vr,38:75,45:321,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($Vh,[2,73]),o($Vh,[2,71]),{44:[1,322]},{33:[1,323]},{2:$VI,4:324,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{11:76,29:325,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,326],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{2:$VI,4:327,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($Vh,[2,50]),o($Va1,[2,52],{8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,37:28,48:42,7:44,32:$V0,35:$V1,36:$V2,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf}),{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,328],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{44:[1,329]},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,330],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{44:[1,331]},o($Vh,[2,58]),o($Vh,[2,59]),{12:[1,332]},{11:76,29:333,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{46:[1,334],47:$V71},{2:$VI,4:335,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{11:76,29:336,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,337],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{34:[1,338],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},o($Vh,[2,48]),o($Va1,[2,51],{8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,37:28,48:42,7:44,32:$V0,35:$V1,36:$V2,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf}),o($Vh,[2,54]),{2:$VI,4:339,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($Vh,[2,55]),{2:$VI,4:340,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($V91,[2,33]),{39:$VJ,42:[1,341],87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{47:[1,342]},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,343],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{34:[1,344],39:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},o($Vh,[2,44]),{44:[1,345]},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,346],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,347],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{41:[1,348]},{44:[1,349]},o($Vh,[2,45]),{44:[1,350]},{2:$VI,4:351,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($Vh,[2,56]),o($Vh,[2,57]),{11:76,29:352,33:$Vq,36:$Vr,38:75,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{11:76,29:253,33:$Vq,36:$Vr,38:75,45:353,48:77,66:78,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,87:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{2:$VI,4:354,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,355],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},{39:$VJ,42:[1,356],87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW,100:$VX},{46:[1,357],47:$V71},{7:44,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,30:23,31:24,32:$V0,35:$V1,36:$V2,37:28,46:[1,358],48:42,52:$V3,56:$V4,60:$V5,61:$V6,62:$V7,64:$V8,65:$V9,79:$Va,82:$Vb,83:$Vc,84:$Vd,85:$Ve,86:$Vf},o($Vb1,[2,47]),{12:[1,359]},{46:[1,360]},o($Vb1,[2,46]),o($V91,[2,34]),{12:[1,361]},o($V91,[2,36])],
defaultActions: {43:[2,1],45:[2,2],198:[2,80],229:[2,79]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        var cadena="";
        var lista_Errores=[];
        const TIPO_ERROR        = require('./controller/Enums/Tipo_Error');
        const ERRORES            = require("./controller/Ambito/S_Error")

        
	const TIPO_OPERACION	= require('./controller/Enums/TipoOperacion'); 
	const TIPO_VALOR 	= require('./controller/Enums/TipoValor');
	const TIPO_DATO		= require('./controller/Enums/TipoDato');
	const INSTRUCCION	= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log('comentario una linea')
break;
case 1:console.log('comentario multiLinea')
break;
case 2:return 32;
break;
case 3:return 35;
break;
case 4:return 82;
break;
case 5:return 85;
break;
case 6:return 86;
break;
case 7:return 83;
break;
case 8:return 84;
break;
case 9:return 106;
break;
case 10:return 105;
break;
case 11:return 43;
break;
case 12:return 50;
break;
case 13:return 51;
break;
case 14:return 79;
break;
case 15:return 52;
break;
case 16:return 54;
break;
case 17:return 55;
break;
case 18:return 56;
break;
case 19:return 58;
break;
case 20:return 59;
break;
case 21:return 60;
break;
case 22:return 61;
break;
case 23:return 62;
break;
case 24:return 63;
break;
case 25:return 64;
break;
case 26:return 65;
break;
case 27:return 78;
break;
case 28:return 76;
break;
case 29:return 68;
break;
case 30:return 67;
break;
case 31:return 69;
break;
case 32:return 70;
break;
case 33:return 72;
break;
case 34:return 73;
break;
case 35:return 74;
break;
case 36:return 12;
break;
case 37:return 40;
break;
case 38:return 47;
break;
case 39:return 33;
break;
case 40:return 34;
break;
case 41:return 41;
break;
case 42:return 42;
break;
case 43:return 44;
break;
case 44:return 46;
break;
case 45:return 49;
break;
case 46:return 80;
break;
case 47:return 81;
break;
case 48:return 88;
break;
case 49:return 87;
break;
case 50:return 89;
break;
case 51:return 90;
break;
case 52:return 91;
break;
case 53:return 92;
break;
case 54:return 39;
break;
case 55:return 97;
break;
case 56:return 28;
break;
case 57:return 95;
break;
case 58:return 96;
break;
case 59:return 94;
break;
case 60:return 93;
break;
case 61:return 98;
break;
case 62:return 101;
break;
case 63:return 100;
break;
case 64:return 99;
break;
case 65:return 103;
break;
case 66:return 102;
break;
case 67:return 71;
break;
case 68:return 104
break;
case 69:return 36;
break;
case 70:
break;
case 71:
break;
case 72:return 5;
break;
case 73: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:(\/\/(.)*))/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:new\b)/i,/^(?:pop\b)/i,/^(?:push\b)/i,/^(?:run\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^"]+")/i,/^(?:["\'"]([^"\'"])?["\'"])/i,/^(?:["_"0-9A-Za-z]*\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}