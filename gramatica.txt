>GRAMATICA LIBRE DE CONTEXTO< 
PROYECTO 1 OLC1 - 202000895


INICIO::= res_INICIO RECURSIVE res_FIN
;

RECURSIVE::= BEGIN RECURSIVE
           | BEGIN
;

BEGIN::= DECLARA
       | ASIGNA
       | CONDICION
       | SWITCH
       | FOR
       | WHILE
       | HASTA
       | METODO
       | FUNCION
       | PRINT
       | error
;

DECLARA::= res_INGRESAR LISTID res_COMO TIPO res_CONVALOR EXPRESION_NUM tk_PTCOMA //{: objeto.call(a); :}
;

ASIGNA::= LISTID tk_ASIGNAFLECHA EXPRESION_NUM tk_PTCOMA 
;

//---->CONDICIONES<----//
CONDICION::= res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST res_FINSI
           | res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST res_ELSE RECURSIVE_INST res_FINSI
           | res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST ELSEIF res_FINSI
           | res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST ELSEIF res_ELSE RECURSIVE_INST res_FINSI

;
ELSEIF::= ELSEIF res_ELSEIF  EXPRESION_logica res_ENTONCES RECURSIVE_INST
        | res_ELSEIF  EXPRESION_logica res_ENTONCES RECURSIVE_INST

;

//---->CICLOS<----//

FOR::= res_PARA LISTID tk_ASIGNAFLECHA EXPRESION_NUM res_HASTA EXPRESION_NUM res_HACER RECURSIVE_INST res_FINPARA
     //***PENDIENTE | res_PARA ASIGNA res_HASTA EXPRESION_NUM res_CONVALOR* RECURSIVE_INST res_FINPARA
;
//ESTA PENDIENTE WHUILEEEEEEE******
WHILE::= res_MIENTRAS EXPRESION_logica res_HACER RECURSIVE_INST res_FINMIENTRAS
;
HASTA::= res_REPETIR  RECURSIVE_INST res_HASTAQ EXPRESION_logica
;

//---------Switch queda pendiente xd

//--->METODOS<---//
METODO::= res_METODO IDENTIFICADOR RECURSIVE_INST res_FINMETODO
        | res_METODO IDENTIFICADOR res_METODOCONP tk_PARIZQ LISTP tk_PARDER RECURSIVE_INST res_FINMETODO
;

//--->FUNCION<---//
FUNCION::= res_FUNCION IDENTIFICADOR TIPO RECURSIVE_INST res_FINFUNCION
        | res_METODO IDENTIFICADOR res_METODOCONP tk_PARIZQ LISTP tk_PARDER RECURSIVE_INST res_FINFUNCION
;

//--->EJECUTAR<---//
EJECUTAR::= res_EJECUTAR IDENTIFICADOR tk_PARIZQ tk_PARDER tk_PTCOMA
          | res_EJECUTAR IDENTIFICADOR tk_PARIZQ LISTP tk_PARDER tk_PTCOMA
;

//--->PRINT<---//
PRINT::= res_IMPRIMIR  tk_CADENA tk_PTCOMA
       | res_IMPRIMIRNL  tk_CADENA tk_PTCOMA 
;

//              ---------[Utilidades]--------           //
TIPO::= res_CADENA
      | res_NUMERO
      | res_BOOLEAN
;

LISTID::= LISTID tk_COMA IDENTIFICADOR
        | IDENTIFICADOR
;
LISTP::= LISTP tk_COMA IDENTIFICADOR TIPO
        | IDENTIFICADOR TIPO
;

EXPRESION_NUM ::= EXPRESION_NUM tk_MAS EXPRESION_NUM
            | EXPRESION_NUM tk_MENOS EXPRESION_NUM
            | EXPRESION_NUM tk_POR EXPRESION_NUM
            | EXPRESION_NUM tk_DIVIDIDO EXPRESION_NUM
            | EXPRESION_NUM res_POTENCIA EXPRESION_NUM
            | EXPRESION_NUM res_MOD EXPRESION_NUM
            | tk_PARIZQ EXPRESION_NUM tk_PARDER 
            | ENTERO
            | DECIMAL
            | IDENTIFICADOR
            | tk_CADENA
            | res_VERDADERO
            | res_FALSO
;
RECURSIVE_INST::= INSTRUCCIONES RECURSIVE_INST
              | INSTRUCCIONES
;
INSTRUCCIONES::= DECLARA
               | ASIGNA
               | CONDICION
               | SWITCH
               | FOR
               | WHILE
               | HASTA
               | PRINT
;

EXPRESION_logica::= EXPRESION_NUM res_MAYOR EXPRESION_NUM
                  | EXPRESION_NUM res_MENOR EXPRESION_NUM
                  | EXPRESION_NUM res_MENORIGUAL EXPRESION_NUM
                  | EXPRESION_NUM res_MAYORIGUAL EXPRESION_NUM
                  | EXPRESION_NUM res_ESIGUAL EXPRESION_NUM
                  | EXPRESION_NUM res_ESDIFERENTE EXPRESION_NUM
                  | EXPRESION_NUM res_AND EXPRESION_NUM
                  | EXPRESION_NUM res_OR EXPRESION_NUM
                  | EXPRESION_NUM res_NOT EXPRESION_NUM  

;
