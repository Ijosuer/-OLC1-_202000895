/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  2, 16, 16,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    12,  0,  4,  0,  0,  0, 48,  1, 44, 45, 17, 46, 41, 47, 10, 15, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0, 40, 49, 51, 50,  0, 
     0, 28, 34, 20, 33, 25, 22, 23, 37, 19, 39, 14, 31, 29,  5, 21, 
    35, 38, 24, 27,  6, 32, 30, 14, 14, 36, 14,  0,  3,  0,  0, 13, 
     0, 28, 34, 20, 33, 25, 22, 23, 37, 19, 39, 14, 31, 29,  5, 21, 
    35, 38, 24, 27,  6, 32, 30, 14, 14, 36, 14, 42, 11, 43,  0,  0, 
     0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\16\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\0\1\24"+
    "\3\0\1\25\12\0\1\26\7\0\1\27\14\0\1\30"+
    "\1\31\1\32\1\24\1\25\1\33\1\0\1\34\2\3"+
    "\11\0\1\35\10\0\1\36\23\0\1\37\2\0\1\40"+
    "\23\0\1\41\4\0\1\3\13\0\1\42\7\0\1\43"+
    "\2\0\1\44\1\0\1\45\4\0\1\46\1\47\1\50"+
    "\1\51\5\0\1\52\1\0\1\53\14\0\1\54\1\0"+
    "\1\55\20\0\1\56\1\0\1\57\12\0\1\60\2\0"+
    "\1\61\1\62\2\0\1\63\4\0\1\64\1\65\1\66"+
    "\1\67\1\0\1\70\1\71\5\0\1\72\3\0\1\73"+
    "\1\0\1\74\6\0\1\75\1\0\1\76\4\0\1\77"+
    "\5\0\1\100\1\0\1\101\7\0\1\102\1\103\5\0"+
    "\1\104\1\0\1\105\4\0\1\106\1\0\1\107\5\0"+
    "\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\234\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\64\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\64\0\64\0\64\0\64\0\64\0\64\0\u04ac"+
    "\0\u04e0\0\64\0\64\0\64\0\64\0\u0514\0\64\0\u0548"+
    "\0\234\0\u057c\0\64\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\64\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\64\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u0b60\0\64\0\64\0\64\0\u0514\0\234\0\64"+
    "\0\u0b94\0\u0618\0\64\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\64\0\u0fa4"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\u134c\0\64\0\u1380\0\u13b4\0\64\0\u13e8\0\u141c"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc"+
    "\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c"+
    "\0\u1790\0\64\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1860\0\u1894"+
    "\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u1a9c\0\64\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0"+
    "\0\u1bd4\0\u1c08\0\64\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\64\0\u1e10\0\64\0\64"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\64\0\u1f48\0\64"+
    "\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8"+
    "\0\u211c\0\u2150\0\u2184\0\u21b8\0\64\0\u21ec\0\u2220\0\u2254"+
    "\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4"+
    "\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\64"+
    "\0\u2594\0\64\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc"+
    "\0\u2700\0\u2734\0\u2768\0\u279c\0\64\0\u27d0\0\u2804\0\64"+
    "\0\u2838\0\u286c\0\u28a0\0\64\0\u28d4\0\u2908\0\u293c\0\u2970"+
    "\0\64\0\64\0\64\0\64\0\u29a4\0\64\0\64\0\u29d8"+
    "\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\64\0\u2adc\0\u2b10\0\u2b44"+
    "\0\64\0\u2b78\0\64\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c"+
    "\0\u2cb0\0\64\0\u2ce4\0\64\0\u2d18\0\u2d4c\0\u2d80\0\u2db4"+
    "\0\64\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\64\0\u2eec"+
    "\0\64\0\u2f20\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\u3058"+
    "\0\64\0\64\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c\0\64"+
    "\0\u3190\0\64\0\u31c4\0\u31f8\0\u322c\0\u3260\0\64\0\u3294"+
    "\0\64\0\u32c8\0\u32fc\0\u3330\0\u3364\0\u3398\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\2\2\7"+
    "\1\10\2\2\1\7\1\11\1\2\1\12\1\0\1\13"+
    "\2\14\1\15\1\16\1\17\1\2\1\20\1\21\2\22"+
    "\1\23\1\24\1\25\2\2\1\26\1\27\1\30\1\2"+
    "\1\31\2\2\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\64\0\1\46"+
    "\1\47\1\0\1\50\1\0\3\46\1\0\53\46\3\51"+
    "\1\52\1\53\57\51\25\0\1\54\12\0\1\55\32\0"+
    "\2\7\3\0\1\7\60\0\1\10\1\56\56\0\2\11"+
    "\2\0\1\11\3\0\2\11\4\0\7\11\1\0\15\11"+
    "\33\0\1\57\1\0\1\60\47\0\1\61\27\0\1\62"+
    "\53\0\1\63\6\0\1\64\44\0\1\65\12\0\1\66"+
    "\55\0\2\67\10\0\1\70\3\0\1\71\54\0\1\72"+
    "\37\0\1\73\24\0\2\74\13\0\1\75\36\0\2\76"+
    "\5\0\1\77\37\0\1\100\100\0\2\101\1\0\1\102"+
    "\3\0\1\103\2\0\1\104\60\0\1\105\63\0\1\106"+
    "\57\0\1\107\63\0\1\110\6\0\1\111\63\0\1\112"+
    "\105\0\1\113\64\0\1\114\2\0\1\115\2\0\1\47"+
    "\63\0\1\116\2\0\3\46\55\0\3\51\1\52\1\117"+
    "\57\51\6\0\1\120\112\0\1\121\37\0\1\122\1\0"+
    "\2\122\47\0\2\57\1\123\4\57\1\124\10\57\1\0"+
    "\43\57\21\60\1\125\42\60\22\0\2\126\3\0\1\127"+
    "\77\0\1\130\25\0\1\131\27\0\1\132\56\0\1\133"+
    "\10\0\1\134\54\0\2\135\35\0\1\136\115\0\1\137"+
    "\31\0\1\140\64\0\1\141\34\0\1\142\26\0\1\143"+
    "\72\0\1\144\77\0\1\145\61\0\1\146\75\0\1\147"+
    "\53\0\1\150\73\0\1\151\27\0\1\152\1\153\121\0"+
    "\1\154\47\0\1\155\50\0\1\156\73\0\1\157\44\0"+
    "\1\160\105\0\1\161\57\0\1\162\5\0\2\163\61\0"+
    "\1\164\34\0\1\123\61\0\17\165\1\123\1\165\1\166"+
    "\42\165\24\0\1\167\67\0\1\170\63\0\1\171\50\0"+
    "\1\172\73\0\1\173\72\0\1\174\60\0\1\175\54\0"+
    "\2\176\55\0\1\177\100\0\2\200\54\0\1\201\64\0"+
    "\1\202\67\0\1\203\57\0\1\204\60\0\2\205\15\0"+
    "\1\206\46\0\1\207\77\0\1\210\30\0\1\211\116\0"+
    "\1\212\50\0\1\213\63\0\1\214\63\0\1\215\77\0"+
    "\1\216\61\0\1\217\63\0\1\220\55\0\1\221\66\0"+
    "\1\222\60\0\1\223\40\0\1\224\105\0\1\225\33\0"+
    "\17\60\1\226\1\60\1\125\61\60\1\227\1\60\1\125"+
    "\42\60\22\0\2\230\71\0\1\231\54\0\2\232\62\0"+
    "\2\233\12\0\1\234\51\0\1\235\44\0\1\236\104\0"+
    "\1\237\3\0\2\240\1\0\1\241\5\0\1\242\45\0"+
    "\1\243\60\0\2\244\70\0\1\245\41\0\1\246\62\0"+
    "\1\247\105\0\1\250\56\0\2\251\46\0\1\252\62\0"+
    "\1\253\64\0\1\254\114\0\1\255\54\0\1\256\74\0"+
    "\1\257\52\0\1\260\67\0\1\261\54\0\1\262\67\0"+
    "\1\263\37\0\1\264\106\0\1\265\67\0\1\266\54\0"+
    "\1\267\55\0\1\165\71\0\1\270\70\0\2\271\65\0"+
    "\1\272\33\0\1\273\112\0\1\274\35\0\1\275\111\0"+
    "\1\276\67\0\1\277\45\0\2\300\5\0\1\301\54\0"+
    "\2\302\5\0\1\303\66\0\1\304\54\0\1\305\43\0"+
    "\1\306\100\0\2\307\64\0\1\310\77\0\1\311\51\0"+
    "\1\312\75\0\1\313\53\0\1\314\60\0\1\315\53\0"+
    "\1\316\73\0\1\317\53\0\1\320\107\0\1\321\37\0"+
    "\1\322\102\0\1\323\53\0\1\324\54\0\1\325\102\0"+
    "\1\326\51\0\2\327\64\0\1\330\76\0\1\331\55\0"+
    "\1\332\37\0\1\333\105\0\1\334\65\0\1\335\40\0"+
    "\1\336\105\0\1\337\40\0\1\340\112\0\1\341\57\0"+
    "\1\342\64\0\1\343\66\0\1\344\60\0\1\345\66\0"+
    "\1\346\63\0\1\347\54\0\1\350\53\0\1\351\73\0"+
    "\1\352\67\0\1\353\56\0\1\354\44\0\1\355\100\0"+
    "\2\356\106\0\1\357\45\0\1\360\63\0\1\361\63\0"+
    "\1\362\60\0\1\363\66\0\1\364\57\0\1\365\77\0"+
    "\1\366\30\0\1\367\103\0\1\370\72\0\1\371\57\0"+
    "\1\372\65\0\2\373\67\0\1\374\54\0\1\375\63\0"+
    "\1\376\65\0\2\377\45\0\1\u0100\72\0\1\u0101\54\0"+
    "\1\u0102\76\0\1\u0103\60\0\1\u0104\72\0\1\u0105\67\0"+
    "\1\u0106\40\0\1\u0107\77\0\1\u0108\62\0\1\u0109\55\0"+
    "\2\u010a\45\0\1\u010b\64\0\1\u010c\116\0\1\u010d\53\0"+
    "\1\u010e\54\0\2\u010f\65\0\1\u0110\60\0\2\u0111\65\0"+
    "\1\u0112\43\0\1\u0113\107\0\1\u0114\37\0\1\u0115\113\0"+
    "\1\u0116\53\0\1\u0117\66\0\1\u0118\60\0\1\u0119\43\0"+
    "\1\u011a\105\0\1\u011b\41\0\1\u011c\105\0\1\u011d\42\0"+
    "\1\u011e\114\0\1\u011f\55\0\1\u0120\37\0\1\u0121\112\0"+
    "\1\u0122\35\0\1\u0123\115\0\1\u0124\40\0\1\u0125\106\0"+
    "\1\u0126\53\0\1\u0127\40\0\1\u0128\110\0\2\u0129\61\0"+
    "\1\u012a\66\0\1\u012b\72\0\1\u012c\54\0\1\u012d\63\0"+
    "\1\u012e\35\0\1\u012f\114\0\1\u0130\60\0\1\u0131\66\0"+
    "\1\u0132\54\0\1\u0133\67\0\1\u0134\57\0\1\u0135\55\0"+
    "\2\u0136\77\0\1\u0137\60\0\1\u0138\54\0\1\u0139\73\0"+
    "\1\u013a\57\0\1\u013b\40\0\1\u013c\105\0\1\u013d\60\0"+
    "\1\u013e\70\0\2\u013f\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\1\11\16\1\6\11"+
    "\2\1\4\11\1\0\1\11\3\0\1\11\12\0\1\11"+
    "\7\0\1\11\14\0\3\11\2\1\1\11\1\0\1\1"+
    "\1\11\1\1\11\0\1\1\10\0\1\11\23\0\1\11"+
    "\2\0\1\11\23\0\1\11\4\0\1\1\13\0\1\11"+
    "\7\0\1\11\2\0\1\1\1\0\1\1\4\0\1\11"+
    "\1\1\2\11\5\0\1\11\1\0\1\11\14\0\1\11"+
    "\1\0\1\1\20\0\1\11\1\0\1\11\12\0\1\11"+
    "\2\0\1\11\1\1\2\0\1\11\4\0\4\11\1\0"+
    "\2\11\5\0\1\11\3\0\1\11\1\0\1\11\6\0"+
    "\1\11\1\0\1\11\4\0\1\11\5\0\1\11\1\0"+
    "\1\11\7\0\2\11\5\0\1\11\1\0\1\11\4\0"+
    "\1\11\1\0\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 73: break;
          case 2: 
            { yychar=1;
            } 
            // fall through
          case 74: break;
          case 3: 
            { 
            } 
            // fall through
          case 75: break;
          case 4: 
            { System.out.println("Reconocio token:<tk_ENTERO>lexema:"+yytext());return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 5: 
            { System.out.println("Reconocio token:<tk_ID>lexema:"+yytext());return new Symbol(sym.IDENTIFICADOR,yyline,yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 6: 
            { System.out.println("Reconocio token:<tk_DIVIDIR>lexema:"+yytext());return new Symbol(sym.tk_DIVIDIDO,yyline,yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 7: 
            { System.out.println("Reconocio token:<tk_POR>lexema:"+yytext());return new Symbol(sym.tk_POR,yyline,yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 8: 
            { System.out.println("Reconocio token:<tk_PTCOMA>lexema:"+yytext());return new Symbol(sym.tk_PTCOMA,yyline,yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 9: 
            { System.out.println("Reconocio token:<tk_COMA>");return new Symbol(sym.tk_COMA,yyline,yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 10: 
            { System.out.println("Reconocio token:<tk_LLAVIZQ>"+yytext());return new Symbol(sym.tk_LLAVIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 11: 
            { System.out.println("Reconocio token:<tk_LLAVDER> lexema:"+yytext());return new Symbol(sym.tk_LLAVDER,yyline,yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 12: 
            { System.out.println("Reconocio token:<tk_PARIZQ>lexema:"+yytext());return new Symbol(sym.tk_PARIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 13: 
            { System.out.println("Reconocio token:<tk_PARDER>lexema:"+yytext());return new Symbol(sym.tk_PARDER,yyline,yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 14: 
            { System.out.println("Reconocio token:<tk_MAS>lexema:"+yytext());return new Symbol(sym.tk_MAS,yyline,yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 15: 
            { System.out.println("Reconocio token:<tk_MENOS>lexema:"+yytext());return new Symbol(sym.tk_MENOS,yyline,yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 16: 
            { return new Symbol(sym.tk_CONCAT,yyline,yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 17: 
            { System.out.println("Reconocio token:<tk_MENQ>lexema:"+yytext());return new Symbol(sym.tk_MENQUE,yyline,yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 18: 
            { System.out.println("Reconocio token:<tk_MAYQ>lexema:"+yytext());return new Symbol(sym.tk_MAYQUE,yyline,yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 19: 
            { System.out.println("Reconocio token:<tk_IGUAL>lexema:"+yytext());return new Symbol(sym.tk_IGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 20: 
            { System.out.println("Reconocio token:<tk_CARACTER>lexema:"+yytext());return new Symbol(sym.CARACTER,yyline,yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 21: 
            { System.out.println("Reconocio tk:CADENA lexema:"+yytext());return new Symbol(sym.tk_CADENA,yyline,yychar, (yytext()).substring(1,yytext().length()-1));
            } 
            // fall through
          case 93: break;
          case 22: 
            { System.out.println("Reconocio RES:OR");return new Symbol(sym.res_OR,yyline,yychar,yytext());
            } 
            // fall through
          case 94: break;
          case 23: 
            { System.out.println("Reconocio RES:SI") ;return new Symbol(sym.res_SI,yyline,yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 24: 
            { System.out.println("Reconocio token:<tk_MASMAS>lexema:"+yytext());return new Symbol(sym.tk_INCREMENTO,yyline,yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 25: 
            { System.out.println("Reconocio token:<tk_MENOSMENOS>lexema:"+yytext());return new Symbol(sym.tk_DECREMENTO,yyline,yychar, yytext());
            } 
            // fall through
          case 97: break;
          case 26: 
            { System.out.println("Reconocio token:<tk_ASIGFLECHA>lexema:"+yytext());return new Symbol(sym.tk_ASIGNAFLECHA,yyline,yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 27: 
            { System.out.println("Reconocio RES:NOT");return new Symbol(sym.res_NOT,yyline,yychar,yytext());
            } 
            // fall through
          case 99: break;
          case 28: 
            { System.out.println("Reconocio token:<tk_DECIMAL>lexema:"+yytext());return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 29: 
            { System.out.println("Reconocio RES:FIN lexema:"+yytext());return new Symbol(sym.res_FIN,yyline,yychar,yytext());
            } 
            // fall through
          case 101: break;
          case 30: 
            { System.out.println("Reconocio RES:AND");return new Symbol(sym.res_AND,yyline,yychar,yytext());
            } 
            // fall through
          case 102: break;
          case 31: 
            { System.out.println("Reconocio RES:COMO lexema:"+yytext());return new Symbol(sym.res_COMO,yyline,yychar, yytext());
            } 
            // fall through
          case 103: break;
          case 32: 
            { System.out.println("Reconocio RES:ELSEIF") ;return new Symbol(sym.res_ELSEIF,yyline,yychar, yytext());
            } 
            // fall through
          case 104: break;
          case 33: 
            { System.out.println("Reconocio RES:PARA");return new Symbol(sym.res_PARA,yyline,yychar, yytext());
            } 
            // fall through
          case 105: break;
          case 34: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_FALSO,yyline,yychar,yytext());
            } 
            // fall through
          case 106: break;
          case 35: 
            { System.out.println("Reconocio RES:SEGUN") ;return new Symbol(sym.res_SEGUN,yyline,yychar, yytext());
            } 
            // fall through
          case 107: break;
          case 36: 
            { System.out.println("Reconocio RES:<");return new Symbol(sym.res_MENOR,yyline,yychar,yytext());
            } 
            // fall through
          case 108: break;
          case 37: 
            { System.out.println("Reconocio RES:>");return new Symbol(sym.res_MAYOR,yyline,yychar,yytext());
            } 
            // fall through
          case 109: break;
          case 38: 
            { System.out.println("Reconocio RES:DO") ; return new Symbol(sym.res_HACER,yyline,yychar, yytext());
            } 
            // fall through
          case 110: break;
          case 39: 
            { return new Symbol(sym.res_HASTA,yyline,yychar, yytext());
            } 
            // fall through
          case 111: break;
          case 40: 
            { System.out.println("Reconocio RES:NUMERO lexema:"+yytext());return new Symbol(sym.res_NUMERO,yyline,yychar, yytext());
            } 
            // fall through
          case 112: break;
          case 41: 
            { System.out.println("Reconocio RES:INICIO lexema:"+yytext()); return new Symbol(sym.res_INICIO,yyline,yychar,yytext());
            } 
            // fall through
          case 113: break;
          case 42: 
            { System.out.println("Reconocio RES:CADENA lexema:"+yytext());return new Symbol(sym.res_CADENA,yyline,yychar,yytext());
            } 
            // fall through
          case 114: break;
          case 43: 
            { System.out.println("Reconocio RES:FINSI") ;return new Symbol(sym.res_FINSI,yyline,yychar, yytext());
            } 
            // fall through
          case 115: break;
          case 44: 
            { System.out.println("Reconocio RES:MODULO");return new Symbol(sym.res_MOD,yyline,yychar,yytext());
            } 
            // fall through
          case 116: break;
          case 45: 
            { System.out.println("Reconocio RES:METODO") ;return new Symbol(sym.res_METODO,yyline,yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 46: 
            { System.out.println("Reconocio RES:FUNCION"); return new Symbol(sym.res_FUNCION,yyline,yychar, yytext());
            } 
            // fall through
          case 118: break;
          case 47: 
            { System.out.println("Reconocio RES:REPETIR") ;return new Symbol(sym.res_REPETIR,yyline,yychar, yytext());
            } 
            // fall through
          case 119: break;
          case 48: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_BOOLEAN,yyline,yychar,yytext());
            } 
            // fall through
          case 120: break;
          case 49: 
            { System.out.println("Reconocio RES:INGRESAR lexema:"+yytext());return new Symbol(sym.res_INGRESAR,yyline,yychar, yytext());
            } 
            // fall through
          case 121: break;
          case 50: 
            { System.out.println("Reconocio RES:IMPRIMIR") ;return new Symbol(sym.res_IMPRIMIR,yyline,yychar, yytext());
            } 
            // fall through
          case 122: break;
          case 51: 
            { System.out.println("Reconocio RES:CARACTER lexema:"+yytext());return new Symbol(sym.res_CARACTER,yyline,yychar,yytext());
            } 
            // fall through
          case 123: break;
          case 52: 
            { return new Symbol(sym.res_FINPARA,yyline,yychar, yytext());
            } 
            // fall through
          case 124: break;
          case 53: 
            { return new Symbol(sym.res_RETORNAR,yyline,yychar, yytext());
            } 
            // fall through
          case 125: break;
          case 54: 
            { System.out.println("Reconocio RES:then") ;return new Symbol(sym.res_ENTONCES,yyline,yychar, yytext());
            } 
            // fall through
          case 126: break;
          case 55: 
            { System.out.println("Reconocio RES:=");return new Symbol(sym.res_ESIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 127: break;
          case 56: 
            { return new Symbol(sym.res_EJECUTAR,yyline,yychar, yytext());
            } 
            // fall through
          case 128: break;
          case 57: 
            { System.out.println("Reconocio RES:WHILE"); return new Symbol(sym.res_MIENTRAS,yyline,yychar, yytext());
            } 
            // fall through
          case 129: break;
          case 58: 
            { System.out.println("Reconocio RES:POTENCIA");return new Symbol(sym.res_POTENCIA,yyline,yychar,yytext());
            } 
            // fall through
          case 130: break;
          case 59: 
            { System.out.println("Reconocio RES:CON_VAL lexema:"+yytext());return new Symbol(sym.res_CONVALOR,yyline,yychar, yytext());
            } 
            // fall through
          case 131: break;
          case 60: 
            { return new Symbol(sym.res_FINSEGUN,yyline,yychar, yytext());
            } 
            // fall through
          case 132: break;
          case 61: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_VERDADERO,yyline,yychar,yytext());
            } 
            // fall through
          case 133: break;
          case 62: 
            { return new Symbol(sym.res_HASTAQ,yyline,yychar, yytext());
            } 
            // fall through
          case 134: break;
          case 63: 
            { return new Symbol(sym.res_FINMETODO,yyline,yychar, yytext());
            } 
            // fall through
          case 135: break;
          case 64: 
            { return new Symbol(sym.res_IMPRIMIRNL,yyline,yychar, yytext());
            } 
            // fall through
          case 136: break;
          case 65: 
            { return new Symbol(sym.res_FINFUNCION,yyline,yychar, yytext());
            } 
            // fall through
          case 137: break;
          case 66: 
            { return new Symbol(sym.res_FINMIENTRAS,yyline,yychar, yytext());
            } 
            // fall through
          case 138: break;
          case 67: 
            { System.out.println("Reconocio RES:!=");return new Symbol(sym.res_ESDIFERENTE,yyline,yychar,yytext());
            } 
            // fall through
          case 139: break;
          case 68: 
            { System.out.println("Reconocio RES:<=");return new Symbol(sym.res_MENORIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 140: break;
          case 69: 
            { System.out.println("Reconocio RES:>=");return new Symbol(sym.res_MAYORIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 141: break;
          case 70: 
            { return new Symbol(sym.res_CONINCREM,yyline,yychar, yytext());
            } 
            // fall through
          case 142: break;
          case 71: 
            { System.out.println("Reconocio RES:ELSE") ;return new Symbol(sym.res_ELSE,yyline,yychar, yytext());
            } 
            // fall through
          case 143: break;
          case 72: 
            { return new Symbol(sym.res_METODOCONP,yyline,yychar, yytext());
            } 
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
