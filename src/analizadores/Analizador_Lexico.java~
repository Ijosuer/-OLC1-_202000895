/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 13,  3, 20, 20, 12,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    16,  0,  9,  0,  4,  0,  0,  2, 46, 47, 21, 48, 45, 49, 14, 19, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0, 44,  0, 50, 54, 51, 
     0, 32, 38, 24, 37, 29, 26, 27, 41, 23, 43, 18, 35, 33, 10, 25, 
    39, 42, 28, 31, 11, 36, 34, 18, 18, 40, 18, 52,  8, 53,  0, 17, 
     0, 32, 38, 24, 37, 29, 26, 27, 41, 23, 43, 18, 35, 33, 10, 25, 
    39, 42, 28, 31, 11, 36, 34, 18, 18, 40, 18,  5, 15,  7,  0,  0, 
     0,  0,  0,  0,  0, 20,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\16\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\0\1\25\5\0\1\26\11\0\1\27\7\0\1\30"+
    "\14\0\1\31\1\32\1\33\1\0\1\25\1\34\1\26"+
    "\1\35\1\0\2\7\11\0\1\36\10\0\1\37\24\0"+
    "\1\40\2\0\1\41\23\0\1\42\4\0\1\7\14\0"+
    "\1\43\7\0\1\44\2\0\1\45\1\0\1\46\4\0"+
    "\1\47\1\50\1\51\1\52\6\0\1\53\1\0\1\54"+
    "\14\0\1\55\1\0\1\56\21\0\1\57\1\0\1\60"+
    "\14\0\1\61\1\62\3\0\1\63\4\0\1\64\1\65"+
    "\1\66\1\67\1\0\1\70\1\71\4\0\1\72\1\73"+
    "\3\0\1\74\2\0\1\75\5\0\1\76\1\0\1\77"+
    "\5\0\1\100\4\0\1\101\2\0\1\102\7\0\1\103"+
    "\1\104\5\0\1\105\1\106\2\0\1\107\1\0\1\110"+
    "\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\156\0\67\0\67\0\245\0\67"+
    "\0\334\0\u0113\0\u014a\0\u0181\0\u01b8\0\67\0\u01ef\0\u0226"+
    "\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de"+
    "\0\u0415\0\u044c\0\u0483\0\u04ba\0\67\0\67\0\67\0\67"+
    "\0\u04f1\0\u0528\0\67\0\67\0\67\0\67\0\u055f\0\67"+
    "\0\u0596\0\u05cd\0\u0604\0\334\0\u063b\0\67\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\67"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\67"+
    "\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\67\0\67\0\67\0\u0c76"+
    "\0\u055f\0\u0604\0\334\0\67\0\u0cad\0\67\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\67\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c"+
    "\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\67\0\u1545"+
    "\0\u157c\0\67\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\67\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\67"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\67"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a"+
    "\0\u2071\0\67\0\u20a8\0\67\0\67\0\u20df\0\u2116\0\u214d"+
    "\0\u2184\0\u21bb\0\u21f2\0\67\0\u2229\0\67\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f"+
    "\0\u2486\0\u24bd\0\67\0\u24f4\0\67\0\u252b\0\u2562\0\u2599"+
    "\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751"+
    "\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\67\0\u28d2"+
    "\0\67\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53"+
    "\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\67\0\u2b9d\0\u2bd4"+
    "\0\u2c0b\0\u2c42\0\67\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\67"+
    "\0\67\0\67\0\67\0\u2d55\0\67\0\67\0\u2d8c\0\u2dc3"+
    "\0\u2dfa\0\u2e31\0\67\0\67\0\u2e68\0\u2e9f\0\u2ed6\0\67"+
    "\0\u2f0d\0\u2f44\0\67\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057"+
    "\0\67\0\u308e\0\67\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1"+
    "\0\67\0\u31d8\0\u320f\0\u3246\0\u327d\0\67\0\u32b4\0\u32eb"+
    "\0\67\0\u3322\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c"+
    "\0\67\0\67\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f\0\67"+
    "\0\67\0\u35b6\0\u35ed\0\67\0\u3624\0\67\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\2\2\13\2\2\1\13\1\14"+
    "\1\2\1\15\1\0\1\16\2\17\1\20\1\21\1\22"+
    "\1\2\1\23\1\24\2\25\1\26\1\27\1\30\2\2"+
    "\1\31\1\32\1\33\1\2\1\34\2\2\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\2\67\0\2\47\1\50\1\0\1\51\3\47\1\52"+
    "\1\0\3\47\1\0\51\47\6\0\1\7\7\0\1\53"+
    "\50\0\10\54\1\55\1\56\55\54\31\0\1\57\12\0"+
    "\1\60\36\0\2\13\2\0\1\13\54\0\1\14\3\0"+
    "\2\14\5\0\2\14\4\0\7\14\1\0\15\14\36\0"+
    "\1\61\1\0\1\62\53\0\1\63\26\0\1\64\56\0"+
    "\1\65\6\0\1\66\47\0\1\67\12\0\1\70\60\0"+
    "\2\71\10\0\1\72\3\0\1\73\57\0\1\74\43\0"+
    "\1\75\23\0\2\76\13\0\1\77\41\0\2\100\5\0"+
    "\1\101\43\0\1\102\102\0\2\103\1\0\1\104\3\0"+
    "\1\105\2\0\1\106\63\0\1\107\66\0\1\110\62\0"+
    "\1\111\66\0\1\112\6\0\1\113\66\0\1\114\106\0"+
    "\1\115\67\0\1\116\4\0\1\117\2\0\1\50\66\0"+
    "\1\50\2\0\1\120\63\0\1\121\6\0\3\47\61\0"+
    "\1\122\10\0\2\122\46\0\10\54\1\55\1\123\55\54"+
    "\13\0\1\124\114\0\1\125\25\0\3\61\1\126\10\61"+
    "\1\127\7\61\1\0\42\61\25\62\1\130\41\62\26\0"+
    "\2\131\3\0\1\132\102\0\1\133\31\0\1\134\26\0"+
    "\1\135\61\0\1\136\10\0\1\137\57\0\2\140\41\0"+
    "\1\141\117\0\1\142\35\0\1\143\67\0\1\144\33\0"+
    "\1\145\32\0\1\146\74\0\1\147\102\0\1\150\64\0"+
    "\1\151\100\0\1\152\56\0\1\153\76\0\1\154\33\0"+
    "\1\155\1\156\123\0\1\157\52\0\1\160\53\0\1\161"+
    "\76\0\1\162\50\0\1\163\107\0\1\164\62\0\1\165"+
    "\5\0\2\166\35\0\1\167\115\0\1\170\34\0\1\126"+
    "\63\0\23\171\1\126\1\171\1\172\41\171\30\0\1\173"+
    "\72\0\1\174\66\0\1\175\53\0\1\176\76\0\1\177"+
    "\75\0\1\200\63\0\1\201\57\0\2\202\60\0\1\203"+
    "\103\0\2\204\57\0\1\205\67\0\1\206\72\0\1\207"+
    "\62\0\1\210\63\0\2\211\15\0\1\212\51\0\1\213"+
    "\102\0\1\214\34\0\1\215\120\0\1\216\53\0\1\217"+
    "\66\0\1\220\66\0\1\221\102\0\1\222\64\0\1\223"+
    "\66\0\1\224\60\0\1\225\71\0\1\226\63\0\1\227"+
    "\44\0\1\230\61\0\1\167\1\47\113\0\1\231\32\0"+
    "\23\62\1\232\1\62\1\130\64\62\1\233\1\62\1\130"+
    "\41\62\26\0\2\234\74\0\1\235\57\0\2\236\65\0"+
    "\2\237\12\0\1\240\4\0\1\241\47\0\1\242\50\0"+
    "\1\243\106\0\1\244\3\0\2\245\1\0\1\246\5\0"+
    "\1\247\50\0\1\250\63\0\2\251\73\0\1\252\45\0"+
    "\1\253\65\0\1\254\107\0\1\255\61\0\2\256\103\0"+
    "\1\257\34\0\1\260\67\0\1\261\116\0\1\262\57\0"+
    "\1\263\77\0\1\264\55\0\1\265\72\0\1\266\57\0"+
    "\1\267\72\0\1\270\43\0\1\271\110\0\1\272\72\0"+
    "\1\273\57\0\1\274\60\0\1\171\74\0\1\275\73\0"+
    "\2\276\70\0\1\277\37\0\1\300\114\0\1\301\66\0"+
    "\1\302\41\0\1\303\113\0\1\304\72\0\1\305\50\0"+
    "\2\306\5\0\1\307\57\0\2\310\5\0\1\311\71\0"+
    "\1\312\57\0\1\313\47\0\1\314\102\0\2\315\67\0"+
    "\1\316\102\0\1\317\54\0\1\320\47\0\1\321\107\0"+
    "\1\322\63\0\1\323\56\0\1\324\76\0\1\325\56\0"+
    "\1\326\112\0\1\327\42\0\1\330\105\0\1\331\56\0"+
    "\1\332\57\0\1\333\105\0\1\334\54\0\2\335\67\0"+
    "\1\336\101\0\1\337\57\0\1\340\67\0\1\341\43\0"+
    "\1\342\107\0\1\343\70\0\1\344\44\0\1\345\107\0"+
    "\1\346\44\0\1\347\114\0\1\350\62\0\1\351\67\0"+
    "\1\352\71\0\1\353\63\0\1\354\71\0\1\355\66\0"+
    "\1\356\57\0\1\357\66\0\1\360\72\0\1\361\61\0"+
    "\1\362\50\0\1\363\102\0\2\364\111\0\1\365\50\0"+
    "\1\366\66\0\1\367\66\0\1\370\63\0\1\371\75\0"+
    "\1\372\62\0\1\373\62\0\1\374\102\0\1\375\34\0"+
    "\1\376\105\0\1\377\75\0\1\u0100\62\0\1\u0101\70\0"+
    "\2\u0102\72\0\1\u0103\57\0\1\u0104\66\0\1\u0105\70\0"+
    "\2\u0106\50\0\1\u0107\66\0\1\u0108\101\0\1\u0109\63\0"+
    "\1\u010a\75\0\1\u010b\66\0\1\u010c\72\0\1\u010d\43\0"+
    "\1\u010e\102\0\1\u010f\65\0\1\u0110\73\0\1\u0111\53\0"+
    "\2\u0112\51\0\1\u0113\67\0\1\u0114\120\0\1\u0115\56\0"+
    "\1\u0116\57\0\2\u0117\65\0\2\u0118\70\0\1\u0119\47\0"+
    "\1\u011a\111\0\1\u011b\43\0\1\u011c\115\0\1\u011d\62\0"+
    "\1\u011e\62\0\1\u011f\71\0\1\u0120\63\0\1\u0121\47\0"+
    "\1\u0122\107\0\1\u0123\66\0\1\u0124\46\0\1\u0125\116\0"+
    "\1\u0126\60\0\1\u0127\44\0\1\u0128\65\0\1\u0129\114\0"+
    "\1\u012a\41\0\1\u012b\117\0\1\u012c\66\0\1\u012d\56\0"+
    "\1\u012e\44\0\1\u012f\110\0\1\u0130\70\0\2\u0131\64\0"+
    "\1\u0132\71\0\1\u0133\66\0\1\u0134\66\0\1\u0135\41\0"+
    "\1\u0136\104\0\1\u0137\100\0\1\u0138\66\0\1\u0139\57\0"+
    "\1\u013a\72\0\1\u013b\64\0\2\u013c\55\0\2\u013d\102\0"+
    "\1\u013e\54\0\1\u013f\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13915];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\1\11\5\1\1\11"+
    "\16\1\4\11\2\1\4\11\1\0\1\11\5\0\1\11"+
    "\11\0\1\11\7\0\1\11\14\0\3\11\1\0\3\1"+
    "\1\11\1\0\1\11\1\1\11\0\1\1\10\0\1\11"+
    "\24\0\1\11\2\0\1\11\23\0\1\11\4\0\1\1"+
    "\14\0\1\11\7\0\1\11\2\0\1\1\1\0\1\1"+
    "\4\0\1\11\1\1\2\11\6\0\1\11\1\0\1\11"+
    "\14\0\1\11\1\0\1\11\21\0\1\11\1\0\1\11"+
    "\14\0\1\11\1\1\3\0\1\11\4\0\4\11\1\0"+
    "\2\11\4\0\2\11\3\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\0\1\11\5\0\1\11\4\0\1\11\2\0"+
    "\1\11\7\0\2\11\5\0\2\11\2\0\1\11\1\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 74: break;
          case 2: 
            { System.out.println("Reconocio token:<tk_ASKA>lexema:"+yytext());return new Symbol(sym.tk_ASKA,yyline,yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 3: 
            { yychar=1;
            } 
            // fall through
          case 76: break;
          case 4: 
            { System.out.println("Reconocio token:<tk_LLAVIZQ>"+yytext());return new Symbol(sym.tk_LLAVIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 5: 
            { System.out.println("Reconocio token:<tk_ENTERO>lexema:"+yytext());return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 6: 
            { System.out.println("Reconocio token:<tk_LLAVDER> lexema:"+yytext());return new Symbol(sym.tk_LLAVDER,yyline,yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 7: 
            { 
            } 
            // fall through
          case 80: break;
          case 8: 
            { System.out.println("Reconocio token:<tk_ID>lexema:"+yytext());return new Symbol(sym.IDENTIFICADOR,yyline,yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 9: 
            { System.out.println("Reconocio token:<tk_DIVIDIR>lexema:"+yytext());return new Symbol(sym.tk_DIVIDIDO,yyline,yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 10: 
            { System.out.println("Reconocio token:<tk_POR>lexema:"+yytext());return new Symbol(sym.tk_POR,yyline,yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 11: 
            { System.out.println("Reconocio token:<tk_PTCOMA>lexema:"+yytext());return new Symbol(sym.tk_PTCOMA,yyline,yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 12: 
            { System.out.println("Reconocio token:<tk_COMA>");return new Symbol(sym.tk_COMA,yyline,yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 13: 
            { System.out.println("Reconocio token:<tk_PARIZQ>lexema:"+yytext());return new Symbol(sym.tk_PARIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 14: 
            { System.out.println("Reconocio token:<tk_PARDER>lexema:"+yytext());return new Symbol(sym.tk_PARDER,yyline,yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 15: 
            { System.out.println("Reconocio token:<tk_MAS>lexema:"+yytext());return new Symbol(sym.tk_MAS,yyline,yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 16: 
            { System.out.println("Reconocio token:<tk_MENOS>lexema:"+yytext());return new Symbol(sym.tk_MENOS,yyline,yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 17: 
            { System.out.println("Reconocio token:<tk_IGUAL>lexema:"+yytext());return new Symbol(sym.tk_IGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 18: 
            { System.out.println("Reconocio token:<tk_ASKC>lexema:"+yytext());return new Symbol(sym.tk_ASKC,yyline,yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 19: 
            { System.out.println("Reconocio token:<tk_CORCHIZQ>lexema:"+yytext());return new Symbol(sym.tk_CORCHIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 20: 
            { System.out.println("Reconocio token:<tk_CORCHDER>lexema:"+yytext());return new Symbol(sym.tk_CORCHDER,yyline,yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 21: 
            { System.out.println("Reconocio token:<tk_CARACTER>lexema:"+yytext());return new Symbol(sym.CARACTER,yyline,yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 22: 
            { System.out.println("Reconocio tk:CADENA lexema:"+yytext());return new Symbol(sym.tk_CADENA,yyline,yychar, (yytext()).substring(1,yytext().length()-1));
            } 
            // fall through
          case 95: break;
          case 23: 
            { System.out.println("Reconocio RES:OR");return new Symbol(sym.res_OR,yyline,yychar,yytext());
            } 
            // fall through
          case 96: break;
          case 24: 
            { System.out.println("Reconocio RES:SI") ;return new Symbol(sym.res_SI,yyline,yychar, yytext());
            } 
            // fall through
          case 97: break;
          case 25: 
            { System.out.println("Reconocio token:<tk_MASMAS>lexema:"+yytext());return new Symbol(sym.tk_INCREMENTO,yyline,yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 26: 
            { System.out.println("Reconocio token:<tk_MENOSMENOS>lexema:"+yytext());return new Symbol(sym.tk_DECREMENTO,yyline,yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 27: 
            { System.out.println("Reconocio token:<tk_ASIGFLECHA>lexema:"+yytext());return new Symbol(sym.tk_ASIGNAFLECHA,yyline,yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 28: 
            { System.out.println("Reconocio token:<tk_DECIMAL>lexema:"+yytext());return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 29: 
            { System.out.println("Reconocio RES:NOT");return new Symbol(sym.res_NOT,yyline,yychar,yytext());
            } 
            // fall through
          case 102: break;
          case 30: 
            { System.out.println("Reconocio RES:FIN lexema:"+yytext());return new Symbol(sym.res_FIN,yyline,yychar,yytext());
            } 
            // fall through
          case 103: break;
          case 31: 
            { System.out.println("Reconocio RES:AND");return new Symbol(sym.res_AND,yyline,yychar,yytext());
            } 
            // fall through
          case 104: break;
          case 32: 
            { System.out.println("Reconocio RES:COMO lexema:"+yytext());return new Symbol(sym.res_COMO,yyline,yychar, yytext());
            } 
            // fall through
          case 105: break;
          case 33: 
            { System.out.println("Reconocio RES:ELSEIF") ;return new Symbol(sym.res_ELSEIF,yyline,yychar, yytext());
            } 
            // fall through
          case 106: break;
          case 34: 
            { System.out.println("Reconocio RES:PARA");return new Symbol(sym.res_PARA,yyline,yychar, yytext());
            } 
            // fall through
          case 107: break;
          case 35: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_FALSO,yyline,yychar,yytext());
            } 
            // fall through
          case 108: break;
          case 36: 
            { System.out.println("Reconocio RES:SEGUN") ;return new Symbol(sym.res_SEGUN,yyline,yychar, yytext());
            } 
            // fall through
          case 109: break;
          case 37: 
            { System.out.println("Reconocio RES:<");return new Symbol(sym.res_MENOR,yyline,yychar,yytext());
            } 
            // fall through
          case 110: break;
          case 38: 
            { System.out.println("Reconocio RES:>");return new Symbol(sym.res_MAYOR,yyline,yychar,yytext());
            } 
            // fall through
          case 111: break;
          case 39: 
            { System.out.println("Reconocio RES:DO") ; return new Symbol(sym.res_HACER,yyline,yychar, yytext());
            } 
            // fall through
          case 112: break;
          case 40: 
            { System.out.println("Reconocio RES:hasta");return new Symbol(sym.res_HASTA,yyline,yychar, yytext());
            } 
            // fall through
          case 113: break;
          case 41: 
            { System.out.println("Reconocio RES:NUMERO lexema:"+yytext());return new Symbol(sym.res_NUMERO,yyline,yychar, yytext());
            } 
            // fall through
          case 114: break;
          case 42: 
            { System.out.println("Reconocio RES:INICIO lexema:"+yytext()); return new Symbol(sym.res_INICIO,yyline,yychar,yytext());
            } 
            // fall through
          case 115: break;
          case 43: 
            { System.out.println("Reconocio RES:CADENA lexema:"+yytext());return new Symbol(sym.res_CADENA,yyline,yychar,yytext());
            } 
            // fall through
          case 116: break;
          case 44: 
            { System.out.println("Reconocio RES:FINSI") ;return new Symbol(sym.res_FINSI,yyline,yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 45: 
            { System.out.println("Reconocio RES:MODULO");return new Symbol(sym.res_MOD,yyline,yychar,yytext());
            } 
            // fall through
          case 118: break;
          case 46: 
            { System.out.println("Reconocio RES:METODO") ;return new Symbol(sym.res_METODO,yyline,yychar, yytext());
            } 
            // fall through
          case 119: break;
          case 47: 
            { System.out.println("Reconocio RES:FUNCION"); return new Symbol(sym.res_FUNCION,yyline,yychar, yytext());
            } 
            // fall through
          case 120: break;
          case 48: 
            { System.out.println("Reconocio RES:REPETIR") ;return new Symbol(sym.res_REPETIR,yyline,yychar, yytext());
            } 
            // fall through
          case 121: break;
          case 49: 
            { System.out.println("Reconocio RES:INGRESAR lexema:"+yytext());return new Symbol(sym.res_INGRESAR,yyline,yychar, yytext());
            } 
            // fall through
          case 122: break;
          case 50: 
            { System.out.println("Reconocio RES:IMPRIMIR") ;return new Symbol(sym.res_IMPRIMIR,yyline,yychar, yytext());
            } 
            // fall through
          case 123: break;
          case 51: 
            { System.out.println("Reconocio RES:CARACTER lexema:"+yytext());return new Symbol(sym.res_CARACTER,yyline,yychar,yytext());
            } 
            // fall through
          case 124: break;
          case 52: 
            { System.out.println("Reconocio RES:FINPARA");return new Symbol(sym.res_FINPARA,yyline,yychar, yytext());
            } 
            // fall through
          case 125: break;
          case 53: 
            { return new Symbol(sym.res_RETORNAR,yyline,yychar, yytext());
            } 
            // fall through
          case 126: break;
          case 54: 
            { System.out.println("Reconocio RES:then") ;return new Symbol(sym.res_ENTONCES,yyline,yychar, yytext());
            } 
            // fall through
          case 127: break;
          case 55: 
            { System.out.println("Reconocio RES:=");return new Symbol(sym.res_ESIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 128: break;
          case 56: 
            { return new Symbol(sym.res_EJECUTAR,yyline,yychar, yytext());
            } 
            // fall through
          case 129: break;
          case 57: 
            { System.out.println("Reconocio RES:WHILE"); return new Symbol(sym.res_MIENTRAS,yyline,yychar, yytext());
            } 
            // fall through
          case 130: break;
          case 58: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_BOOLEAN,yyline,yychar,yytext());
            } 
            // fall through
          case 131: break;
          case 59: 
            { System.out.println("Reconocio RES:POTENCIA");return new Symbol(sym.res_POTENCIA,yyline,yychar,yytext());
            } 
            // fall through
          case 132: break;
          case 60: 
            { System.out.println("Reconocio RES:CON_VAL lexema:"+yytext());return new Symbol(sym.res_CONVALOR,yyline,yychar, yytext());
            } 
            // fall through
          case 133: break;
          case 61: 
            { return new Symbol(sym.res_FINSEGUN,yyline,yychar, yytext());
            } 
            // fall through
          case 134: break;
          case 62: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_VERDADERO,yyline,yychar,yytext());
            } 
            // fall through
          case 135: break;
          case 63: 
            { System.out.println("Reconocio RES:HAsta Q") ;return new Symbol(sym.res_HASTAQ,yyline,yychar, yytext());
            } 
            // fall through
          case 136: break;
          case 64: 
            { return new Symbol(sym.res_FINMETODO,yyline,yychar, yytext());
            } 
            // fall through
          case 137: break;
          case 65: 
            { return new Symbol(sym.res_IMPRIMIRNL,yyline,yychar, yytext());
            } 
            // fall through
          case 138: break;
          case 66: 
            { return new Symbol(sym.res_FINFUNCION,yyline,yychar, yytext());
            } 
            // fall through
          case 139: break;
          case 67: 
            { return new Symbol(sym.res_FINMIENTRAS,yyline,yychar, yytext());
            } 
            // fall through
          case 140: break;
          case 68: 
            { System.out.println("Reconocio RES:!=");return new Symbol(sym.res_ESDIFERENTE,yyline,yychar,yytext());
            } 
            // fall through
          case 141: break;
          case 69: 
            { System.out.println("Reconocio RES:<=");return new Symbol(sym.res_MENORIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 142: break;
          case 70: 
            { System.out.println("Reconocio RES:>=");return new Symbol(sym.res_MAYORIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 143: break;
          case 71: 
            { return new Symbol(sym.res_METODOCONP,yyline,yychar, yytext());
            } 
            // fall through
          case 144: break;
          case 72: 
            { System.out.println("Reconocio RES:conINCRE");return new Symbol(sym.res_CONINCREM,yyline,yychar, yytext());
            } 
            // fall through
          case 145: break;
          case 73: 
            { System.out.println("Reconocio RES:ELSE") ;return new Symbol(sym.res_ELSE,yyline,yychar, yytext());
            } 
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
