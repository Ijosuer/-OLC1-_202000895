/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  2, 15, 15,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    12,  0,  4,  0,  0,  0, 47,  1, 43, 44, 16, 45, 40, 46, 10, 14, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0, 39, 48, 50, 49,  0, 
     0, 27, 34, 19, 33, 24, 21, 22, 36, 18, 38, 13, 31, 28,  5, 20, 
    35, 37, 23, 26,  6, 32, 30, 13, 13, 13, 13,  0,  3,  0,  0, 29, 
     0, 27, 34, 19, 33, 24, 21, 22, 36, 18, 38, 13, 31, 28,  5, 20, 
    35, 37, 23, 26,  6, 32, 30, 13, 13, 13, 13, 41, 11, 42,  0,  0, 
     0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\2\3\1\4\1\5\1\6"+
    "\1\7\1\1\6\3\1\1\7\3\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\0\1\24\3\0\1\25\1\3\5\0\5\3"+
    "\1\0\6\3\1\26\1\0\1\26\1\3\1\0\7\3"+
    "\1\27\1\30\1\31\1\24\1\25\1\3\1\32\2\4"+
    "\4\0\7\3\1\0\1\3\2\33\6\3\1\0\1\3"+
    "\1\0\7\3\1\0\2\3\5\0\4\3\1\34\2\3"+
    "\2\35\1\0\1\3\1\0\6\3\1\0\1\3\1\0"+
    "\5\3\1\36\1\3\1\0\2\3\1\0\1\4\3\0"+
    "\3\3\1\0\4\3\4\0\4\3\2\37\1\0\5\3"+
    "\2\40\1\0\5\3\1\41\2\42\1\43\1\44\2\0"+
    "\1\44\2\3\1\0\3\3\1\45\1\0\1\46\4\0"+
    "\1\3\1\46\4\3\1\0\2\3\1\0\3\3\1\0"+
    "\1\3\1\47\3\3\1\0\1\3\2\0\2\3\1\0"+
    "\3\3\5\0\5\3\2\50\1\3\2\51\2\3\1\0"+
    "\4\3\1\52\1\0\1\3\1\53\1\54\1\53\1\54"+
    "\1\0\2\3\1\55\4\0\1\56\4\3\1\56\1\57"+
    "\2\60\1\61\2\62\3\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\63\1\0\1\64\2\0\1\3\1\64"+
    "\3\3\1\65\1\3\2\66\1\0\1\3\1\0\1\3"+
    "\2\0\1\67\2\3\1\67\2\3\2\70\1\0\1\3"+
    "\1\71\1\0\1\71\3\3\1\0\1\3\2\72\2\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\2\73\1\3"+
    "\2\74\5\3\2\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\63\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\u04c8\0\u04fb\0\63\0\63\0\63\0\63\0\u052e\0\63"+
    "\0\u0561\0\231\0\u0594\0\63\0\u05c7\0\u05fa\0\u062d\0\u0660"+
    "\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\63\0\u095d"+
    "\0\377\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\63\0\63\0\63\0\u052e\0\231\0\u0b5b"+
    "\0\u05fa\0\63\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155"+
    "\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\377\0\u1452"+
    "\0\u1485\0\63\0\377\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\377\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\63\0\377"+
    "\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\63\0\377"+
    "\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\377\0\u1f47"+
    "\0\u1f7a\0\377\0\63\0\u1fad\0\u1fe0\0\377\0\u2013\0\u2046"+
    "\0\u2079\0\u20ac\0\u20df\0\u2112\0\377\0\u2145\0\63\0\u2178"+
    "\0\u21ab\0\u21de\0\u2211\0\u2244\0\377\0\u2277\0\u22aa\0\u22dd"+
    "\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475"+
    "\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d"+
    "\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5"+
    "\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d"+
    "\0\u2970\0\u29a3\0\63\0\377\0\u29d6\0\63\0\377\0\u2a09"+
    "\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\377\0\u2b6e"+
    "\0\u2ba1\0\63\0\u2bd4\0\377\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0"+
    "\0\377\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\63\0\u2d9f\0\u2dd2"+
    "\0\u2e05\0\u2e38\0\377\0\377\0\63\0\377\0\377\0\63"+
    "\0\377\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d"+
    "\0\u2fd0\0\u3003\0\377\0\u3036\0\63\0\u3069\0\u309c\0\u30cf"+
    "\0\377\0\u3102\0\u3135\0\u3168\0\377\0\u319b\0\63\0\377"+
    "\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\63\0\u3300"+
    "\0\u3333\0\377\0\u3366\0\u3399\0\63\0\377\0\u33cc\0\u33ff"+
    "\0\63\0\u3432\0\377\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531"+
    "\0\63\0\377\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663"+
    "\0\u3696\0\u36c9\0\u36fc\0\u372f\0\u3762\0\63\0\377\0\u3795"+
    "\0\63\0\377\0\u37c8\0\u37fb\0\u382e\0\u3861\0\u3894\0\63"+
    "\0\377";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\2\10"+
    "\1\11\2\2\1\10\1\7\1\12\1\0\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\7\1\21\1\22\1\23"+
    "\1\24\1\7\1\25\1\7\1\26\2\7\1\27\1\30"+
    "\1\31\1\32\2\7\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\63\0"+
    "\1\47\1\50\1\0\1\51\1\0\3\47\1\0\52\47"+
    "\3\52\1\53\1\54\56\52\5\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\6\7\1\55\6\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\15\7\23\0\2\10\3\0\1\10\57\0\1\11"+
    "\1\56\66\0\1\57\1\0\1\60\47\0\1\61\26\0"+
    "\1\62\33\0\1\63\1\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\2\7\1\64\12\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\2\7\1\65\4\7"+
    "\1\0\1\7\1\66\13\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\3\7\1\67\11\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\3\0\1\70"+
    "\1\71\6\7\1\0\1\7\1\72\4\7\1\73\6\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\6\7"+
    "\1\74\1\0\15\7\21\0\1\75\1\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\14\7\1\76\35\0"+
    "\2\77\5\0\1\100\37\0\2\7\2\0\1\7\3\0"+
    "\1\7\3\0\1\77\1\101\5\7\1\102\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\3\0\1\103"+
    "\1\104\5\7\1\105\1\0\15\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\6\7\1\106\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\6\7"+
    "\1\107\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\2\7\1\110\4\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\0"+
    "\1\7\1\111\13\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\1\7\1\112\13\7\71\0"+
    "\1\113\63\0\1\114\2\0\1\115\2\0\1\50\62\0"+
    "\1\116\2\0\3\47\54\0\3\52\1\53\1\117\56\52"+
    "\5\0\2\7\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\2\7\1\120\12\7\25\0\1\121\1\0\2\121"+
    "\46\0\2\57\1\122\4\57\1\123\7\57\1\0\43\57"+
    "\20\60\1\124\42\60\21\0\2\125\3\0\1\126\77\0"+
    "\1\127\24\0\2\7\2\0\1\7\3\0\1\7\3\0"+
    "\1\125\1\130\3\7\1\131\2\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\0"+
    "\11\7\1\132\3\7\21\0\1\133\1\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\2\7\1\134\12\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\5\7"+
    "\1\135\1\7\1\0\7\7\1\136\5\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\137\1\140"+
    "\14\7\21\0\1\141\62\0\1\142\1\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\15\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\5\7"+
    "\1\143\7\7\21\0\1\144\1\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\15\7\21\0\1\7\1\145"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\11\7"+
    "\1\146\3\7\21\0\1\7\1\147\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\15\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\6\7\1\150\1\0\15\7"+
    "\42\0\1\151\41\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\4\7\1\152\2\7\1\0\15\7\44\0\1\153"+
    "\37\0\2\7\2\0\1\7\3\0\1\7\4\0\6\7"+
    "\1\154\1\0\15\7\21\0\1\7\1\155\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\15\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\5\7\1\156\1\7"+
    "\1\0\15\7\21\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\3\7\1\157\11\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\2\7\1\160\4\7"+
    "\1\0\15\7\21\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\5\7\1\161\1\7\1\0\15\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\1\7\1\162\5\7"+
    "\1\163\1\164\14\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\6\7\1\165\1\0\15\7\16\0\1\122"+
    "\60\0\16\166\1\122\1\166\1\167\42\166\23\0\1\170"+
    "\66\0\1\171\62\0\1\172\40\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\1\7\1\173\5\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\5\7"+
    "\1\174\1\7\1\0\15\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\5\7\1\175\1\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\3\7\1\176\11\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\2\7\1\177\4\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\1\7\1\200\13\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\6\7\1\201\1\0\15\7\35\0"+
    "\2\202\45\0\2\7\2\0\1\7\3\0\1\7\3\0"+
    "\1\202\1\203\6\7\1\0\15\7\51\0\1\204\32\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\0"+
    "\3\7\1\205\11\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\206\1\207\14\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\1\7\1\210\5\7"+
    "\1\0\15\7\21\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\2\7\1\211\4\7\1\0\15\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\6\7\1\212\1\0"+
    "\15\7\21\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\2\7\1\213\4\7\1\0\15\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\1\7\1\214\5\7\1\0"+
    "\15\7\54\0\1\215\27\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\6\7\1\216\6\7\21\0"+
    "\1\217\62\0\1\220\1\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\15\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\2\7\1\221\4\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\7\7\1\222\5\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\5\7\1\223\7\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\5\7\1\224\7\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\1\7\1\225\13\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\6\7"+
    "\1\226\1\0\15\7\22\0\1\227\61\0\1\7\1\230"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\5\7"+
    "\1\231\1\7\1\0\15\7\14\0\16\60\1\232\1\60"+
    "\1\124\60\60\1\233\1\60\1\124\42\60\21\0\2\234"+
    "\70\0\1\235\53\0\2\236\45\0\2\7\2\0\1\7"+
    "\3\0\1\7\3\0\1\234\1\237\6\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\6\7"+
    "\1\240\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\3\0\1\236\1\241\6\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\3\0\1\242\1\243"+
    "\6\7\1\0\4\7\1\244\10\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\1\7\1\245\5\7\1\0"+
    "\15\7\21\0\1\246\1\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\15\7\41\0\1\247\3\0\2\250"+
    "\1\0\1\251\6\0\1\252\24\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\3\7\1\253\3\7\1\250\1\254"+
    "\1\7\1\255\6\7\1\256\3\7\40\0\1\257\43\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\2\7\1\260"+
    "\4\7\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\3\0\1\261\1\262\6\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\5\7\1\263"+
    "\1\7\1\0\15\7\21\0\1\7\1\264\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\15\7\21\0\1\265"+
    "\1\7\2\0\1\7\3\0\1\7\4\0\7\7\1\0"+
    "\15\7\21\0\1\7\1\266\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\15\7\21\0\1\267\62\0\1\270"+
    "\1\7\2\0\1\7\3\0\1\7\4\0\7\7\1\0"+
    "\15\7\22\0\1\271\61\0\1\7\1\272\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\15\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\7\7"+
    "\1\273\5\7\21\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\1\7\1\274\13\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\2\7\1\275\4\7"+
    "\1\0\15\7\21\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\6\7\1\276\1\0\15\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\5\7\1\277\1\7\1\0"+
    "\15\7\47\0\1\300\34\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\1\7\1\301\13\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\2\7\1\302"+
    "\4\7\1\0\15\7\32\0\1\166\70\0\1\303\67\0"+
    "\2\304\64\0\1\305\33\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\2\7\1\306\4\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\304"+
    "\1\307\14\7\21\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\2\7\1\310\12\7\21\0\1\311"+
    "\62\0\1\312\1\7\2\0\1\7\3\0\1\7\4\0"+
    "\7\7\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\1\7\1\313\13\7\21\0"+
    "\1\7\1\314\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\15\7\21\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\1\7\1\315\13\7\54\0\1\316"+
    "\43\0\2\317\5\0\1\320\53\0\2\321\5\0\1\322"+
    "\65\0\1\323\34\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\6\7\1\324\6\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\3\0\1\317\1\325\5\7"+
    "\1\326\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\3\0\1\321\1\327\5\7\1\330\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\1\7\1\331\13\7\40\0\1\332\43\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\2\7\1\333\4\7"+
    "\1\0\15\7\21\0\1\334\1\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\15\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\3\0\1\335\1\336\6\7\1\0"+
    "\15\7\21\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\1\7\1\337\5\7\1\0\15\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\7\7\1\0\6\7\1\340"+
    "\6\7\43\0\1\341\40\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\5\7\1\342\1\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\2\7\1\343"+
    "\4\7\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\7\7\1\344\5\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\0"+
    "\3\7\1\345\11\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\1\7\1\346\13\7\51\0"+
    "\1\347\32\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\7\7\1\0\3\7\1\350\11\7\47\0\1\351\50\0"+
    "\2\352\45\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\7\7\1\0\1\7\1\353\13\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\3\0\1\352\1\354\6\7\1\0"+
    "\15\7\37\0\1\355\44\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\1\7\1\356\5\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\0"+
    "\5\7\1\357\7\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\6\7\1\360\1\0\15\7\21\0\1\361"+
    "\103\0\1\362\64\0\1\363\40\0\1\364\103\0\1\365"+
    "\40\0\1\366\1\7\2\0\1\7\3\0\1\7\4\0"+
    "\7\7\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\4\7\1\367\2\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\6\7\1\370"+
    "\1\0\15\7\21\0\1\7\1\371\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\15\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\5\7\1\372\1\7\1\0"+
    "\15\7\21\0\1\373\62\0\1\374\1\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\15\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\1\7"+
    "\1\375\13\7\43\0\1\376\40\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\5\7\1\377\1\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\6\7"+
    "\1\u0100\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\1\7\1\u0101\13\7\47\0"+
    "\1\u0102\34\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\7\7\1\0\1\7\1\u0103\13\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\7\7\1\0\3\7\1\u0104"+
    "\11\7\21\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\6\7\1\u0105\1\0\15\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\1\7\1\u0106\5\7\1\0\15\7"+
    "\21\0\1\u0107\1\7\2\0\1\7\3\0\1\7\4\0"+
    "\7\7\1\0\15\7\61\0\1\u0108\22\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\7\7\1\0\13\7\1\u0109"+
    "\1\7\43\0\1\u010a\62\0\1\u010b\40\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\5\7\1\u010c\1\7\1\0"+
    "\15\7\21\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\5\7\1\u010d\1\7\1\0\15\7\43\0\1\u010e\40\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\5\7\1\u010f"+
    "\1\7\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\2\7\1\u0110\4\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\5\7\1\u0111"+
    "\1\7\1\0\15\7\37\0\1\u0112\77\0\1\u0113\27\0"+
    "\1\u0114\101\0\1\u0115\71\0\1\u0116\34\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\1\7\1\u0117\5\7\1\0"+
    "\15\7\21\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\7\7\1\0\6\7\1\u0118\6\7\21\0\1\u0119\1\7"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\2\7"+
    "\1\u011a\4\7\1\0\15\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\1\7\1\u011b\13\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\5\7"+
    "\1\u011c\1\7\1\0\15\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\u011d\1\u011e\14\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\5\7\1\u011f"+
    "\1\7\1\0\15\7\45\0\2\u0120\35\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\7\7\1\u0120\1\u0121\14\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\1\7"+
    "\1\u0122\5\7\1\0\15\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\5\7\1\u0123\1\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\2\7"+
    "\1\u0124\4\7\1\0\15\7\54\0\1\u0125\27\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\6\7"+
    "\1\u0126\6\7\51\0\1\u0127\32\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\3\7\1\u0128\11\7"+
    "\44\0\1\u0129\37\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\6\7\1\u012a\1\0\15\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\5\7\1\u012b\1\7\1\0"+
    "\15\7\35\0\2\u012c\45\0\1\u012d\63\0\1\u012e\115\0"+
    "\1\u012f\26\0\2\7\2\0\1\7\3\0\1\7\3\0"+
    "\1\u012c\1\u0130\6\7\1\0\15\7\21\0\1\u0131\1\7"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\15\7"+
    "\21\0\1\7\1\u0132\2\0\1\7\3\0\1\7\4\0"+
    "\7\7\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\7\7\1\u0133\5\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\2\7\1\u0134"+
    "\4\7\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\2\7\1\u0135\4\7\1\0\15\7\21\0"+
    "\1\u0136\1\7\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\15\7\44\0\1\u0137\37\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\6\7\1\u0138\1\0\15\7\21\0"+
    "\1\u0139\62\0\1\u013a\1\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\15\7\50\0\1\u013b\33\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\2\7"+
    "\1\u013c\12\7\40\0\1\u013d\65\0\1\u013e\57\0\1\u013f"+
    "\43\0\2\7\2\0\1\7\3\0\1\7\4\0\2\7"+
    "\1\u0140\4\7\1\0\15\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\5\7\1\u0141\1\7\1\0\15\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\2\7"+
    "\1\u0142\4\7\1\0\15\7\21\0\1\u0143\1\7\2\0"+
    "\1\7\3\0\1\7\4\0\7\7\1\0\15\7\21\0"+
    "\1\7\1\u0144\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\15\7\53\0\1\u0145\30\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\5\7\1\u0146\7\7"+
    "\44\0\1\u0147\37\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\6\7\1\u0148\1\0\15\7\21\0\1\u0149\110\0"+
    "\1\u014a\34\0\1\u014b\1\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\15\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\7\7\1\0\1\7\1\u014c\13\7"+
    "\21\0\2\7\2\0\1\7\3\0\1\7\4\0\7\7"+
    "\1\0\3\7\1\u014d\11\7\21\0\2\7\2\0\1\7"+
    "\3\0\1\7\4\0\5\7\1\u014e\1\7\1\0\15\7"+
    "\21\0\1\u014f\62\0\1\u0150\1\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\15\7\45\0\2\u0151\35\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\u0151"+
    "\1\u0152\14\7\21\0\2\7\2\0\1\7\3\0\1\7"+
    "\4\0\7\7\1\0\11\7\1\u0153\3\7\21\0\2\7"+
    "\2\0\1\7\3\0\1\7\4\0\7\7\1\0\1\7"+
    "\1\u0154\13\7\22\0\1\u0155\61\0\1\7\1\u0156\2\0"+
    "\1\7\3\0\1\7\4\0\7\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\0"+
    "\1\7\1\u0157\13\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\5\7\1\u0158\1\7\1\0\15\7\47\0"+
    "\1\u0159\34\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\7\7\1\0\1\7\1\u015a\13\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\5\7\1\u015b\1\7\1\0"+
    "\15\7\21\0\2\7\2\0\1\7\3\0\1\7\3\0"+
    "\1\u015c\1\u015d\6\7\1\0\15\7\53\0\1\u015e\30\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\0"+
    "\5\7\1\u015f\7\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\7\7\1\0\1\7\1\u0160\13\7\40\0"+
    "\1\u0161\43\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\2\7\1\u0162\4\7\1\0\15\7\21\0\2\7\2\0"+
    "\1\7\3\0\1\7\4\0\7\7\1\0\2\7\1\u0163"+
    "\12\7\21\0\2\7\2\0\1\7\3\0\1\7\4\0"+
    "\6\7\1\u0164\1\0\15\7\21\0\1\7\1\u0165\2\0"+
    "\1\7\3\0\1\7\4\0\7\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\5\7\1\u0166"+
    "\1\7\1\0\15\7\21\0\2\7\2\0\1\7\3\0"+
    "\1\7\4\0\2\7\1\u0167\4\7\1\0\15\7\21\0"+
    "\2\7\2\0\1\7\3\0\1\7\4\0\7\7\1\u0168"+
    "\1\u0169\14\7\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14535];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\1\11\17\1\6\11"+
    "\2\1\4\11\1\0\1\11\3\0\1\11\1\1\5\0"+
    "\5\1\1\0\6\1\1\11\1\0\2\1\1\0\7\1"+
    "\3\11\4\1\1\11\1\1\4\0\7\1\1\0\11\1"+
    "\1\0\1\1\1\0\7\1\1\0\2\1\5\0\7\1"+
    "\1\11\1\1\1\0\1\1\1\0\6\1\1\0\1\1"+
    "\1\0\7\1\1\0\2\1\1\0\1\1\3\0\3\1"+
    "\1\0\4\1\4\0\4\1\1\11\1\1\1\0\5\1"+
    "\1\11\1\1\1\0\11\1\1\11\2\0\3\1\1\0"+
    "\4\1\1\0\1\11\4\0\6\1\1\0\2\1\1\0"+
    "\3\1\1\0\5\1\1\0\1\1\2\0\2\1\1\0"+
    "\3\1\5\0\5\1\1\11\2\1\1\11\3\1\1\0"+
    "\5\1\1\0\1\1\1\11\3\1\1\0\3\1\4\0"+
    "\1\11\6\1\1\11\2\1\1\11\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\11\2\0\7\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\2\0\1\11"+
    "\5\1\1\11\1\1\1\0\1\1\1\11\1\0\4\1"+
    "\1\0\1\1\1\11\3\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\11\2\1\1\11\6\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 62: break;
          case 2: 
            { yychar=1;
            } 
            // fall through
          case 63: break;
          case 3: 
            { System.out.println("Reconocio token:<tk_ID>lexema:"+yytext());return new Symbol(sym.IDENTIFICADOR,yyline,yychar, yytext());
            } 
            // fall through
          case 64: break;
          case 4: 
            { 
            } 
            // fall through
          case 65: break;
          case 5: 
            { System.out.println("Reconocio token:<tk_ENTERO>lexema:"+yytext());return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            } 
            // fall through
          case 66: break;
          case 6: 
            { System.out.println("Reconocio token:<tk_DIVIDIR>lexema:"+yytext());return new Symbol(sym.tk_DIVIDIDO,yyline,yychar, yytext());
            } 
            // fall through
          case 67: break;
          case 7: 
            { System.out.println("Reconocio token:<tk_POR>lexema:"+yytext());return new Symbol(sym.tk_POR,yyline,yychar, yytext());
            } 
            // fall through
          case 68: break;
          case 8: 
            { System.out.println("Reconocio token:<tk_PTCOMA>lexema:"+yytext());return new Symbol(sym.tk_PTCOMA,yyline,yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 9: 
            { System.out.println("Reconocio token:<tk_COMA>");return new Symbol(sym.tk_COMA,yyline,yychar, yytext());
            } 
            // fall through
          case 70: break;
          case 10: 
            { System.out.println("Reconocio token:<tk_LLAVIZQ>"+yytext());return new Symbol(sym.tk_LLAVIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 11: 
            { System.out.println("Reconocio token:<tk_LLAVDER> lexema:"+yytext());return new Symbol(sym.tk_LLAVDER,yyline,yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 12: 
            { System.out.println("Reconocio token:<tk_PARIZQ>lexema:"+yytext());return new Symbol(sym.tk_PARIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 13: 
            { System.out.println("Reconocio token:<tk_PARDER>lexema:"+yytext());return new Symbol(sym.tk_PARDER,yyline,yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 14: 
            { System.out.println("Reconocio token:<tk_MAS>lexema:"+yytext());return new Symbol(sym.tk_MAS,yyline,yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 15: 
            { System.out.println("Reconocio token:<tk_MENOS>lexema:"+yytext());return new Symbol(sym.tk_MENOS,yyline,yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 16: 
            { return new Symbol(sym.tk_CONCAT,yyline,yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 17: 
            { System.out.println("Reconocio token:<tk_MENQ>lexema:"+yytext());return new Symbol(sym.tk_MENQUE,yyline,yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 18: 
            { System.out.println("Reconocio token:<tk_MAYQ>lexema:"+yytext());return new Symbol(sym.tk_MAYQUE,yyline,yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 19: 
            { System.out.println("Reconocio token:<tk_IGUAL>lexema:"+yytext());return new Symbol(sym.tk_IGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 20: 
            { System.out.println("Reconocio token:<tk_CARACTER>lexema:"+yytext());return new Symbol(sym.CARACTER,yyline,yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 21: 
            { System.out.println("Reconocio tk:CADENA lexema:"+yytext());return new Symbol(sym.tk_CADENA,yyline,yychar, (yytext()).substring(1,yytext().length()-1));
            } 
            // fall through
          case 82: break;
          case 22: 
            { System.out.println("Reconocio RES:SI") ;return new Symbol(sym.res_SI,yyline,yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 23: 
            { System.out.println("Reconocio token:<tk_MASMAS>lexema:"+yytext());return new Symbol(sym.tk_INCREMENTO,yyline,yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 24: 
            { System.out.println("Reconocio token:<tk_MENOSMENOS>lexema:"+yytext());return new Symbol(sym.tk_DECREMENTO,yyline,yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 25: 
            { System.out.println("Reconocio token:<tk_ASIGFLECHA>lexema:"+yytext());return new Symbol(sym.tk_ASIGNAFLECHA,yyline,yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 26: 
            { return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 27: 
            { System.out.println("Reconocio RES:FIN lexema:"+yytext());return new Symbol(sym.res_FIN,yyline,yychar,yytext());
            } 
            // fall through
          case 88: break;
          case 28: 
            { System.out.println("Reconocio RES:COMO lexema:"+yytext());return new Symbol(sym.res_COMO,yyline,yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 29: 
            { return new Symbol(sym.res_ELSEIF,yyline,yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 30: 
            { System.out.println("Reconocio RES:PARA");return new Symbol(sym.res_PARA,yyline,yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 31: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_FALSO,yyline,yychar,yytext());
            } 
            // fall through
          case 92: break;
          case 32: 
            { System.out.println("Reconocio RES:SEGUN") ;return new Symbol(sym.res_SEGUN,yyline,yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 33: 
            { System.out.println("Reconocio RES:DO") ; return new Symbol(sym.res_HACER,yyline,yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 34: 
            { return new Symbol(sym.res_HASTA,yyline,yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 35: 
            { System.out.println("Reconocio RES:NUMERO lexema:"+yytext());return new Symbol(sym.res_NUMERO,yyline,yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 36: 
            { System.out.println("Reconocio RES:INICIO lexema:"+yytext()); return new Symbol(sym.res_INICIO,yyline,yychar,yytext());
            } 
            // fall through
          case 97: break;
          case 37: 
            { System.out.println("Reconocio RES:CADENA lexema:"+yytext());return new Symbol(sym.res_CADENA,yyline,yychar,yytext());
            } 
            // fall through
          case 98: break;
          case 38: 
            { return new Symbol(sym.res_FINSI,yyline,yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 39: 
            { System.out.println("Reconocio RES:METODO") ;return new Symbol(sym.res_METODO,yyline,yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 40: 
            { System.out.println("Reconocio RES:FUNCION"); return new Symbol(sym.res_FUNCION,yyline,yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 41: 
            { System.out.println("Reconocio RES:REPETIR") ;return new Symbol(sym.res_REPETIR,yyline,yychar, yytext());
            } 
            // fall through
          case 102: break;
          case 42: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_BOOLEAN,yyline,yychar,yytext());
            } 
            // fall through
          case 103: break;
          case 43: 
            { System.out.println("Reconocio RES:INGRESAR lexema:"+yytext());return new Symbol(sym.res_INGRESAR,yyline,yychar, yytext());
            } 
            // fall through
          case 104: break;
          case 44: 
            { System.out.println("Reconocio RES:IMPRIMIR") ;return new Symbol(sym.res_IMPRIMIR,yyline,yychar, yytext());
            } 
            // fall through
          case 105: break;
          case 45: 
            { System.out.println("Reconocio RES:CARACTER lexema:"+yytext());return new Symbol(sym.res_CARACTER,yyline,yychar,yytext());
            } 
            // fall through
          case 106: break;
          case 46: 
            { return new Symbol(sym.res_FINPARA,yyline,yychar, yytext());
            } 
            // fall through
          case 107: break;
          case 47: 
            { return new Symbol(sym.res_RETORNAR,yyline,yychar, yytext());
            } 
            // fall through
          case 108: break;
          case 48: 
            { return new Symbol(sym.res_ENTONCES,yyline,yychar, yytext());
            } 
            // fall through
          case 109: break;
          case 49: 
            { return new Symbol(sym.res_EJECUTAR,yyline,yychar, yytext());
            } 
            // fall through
          case 110: break;
          case 50: 
            { System.out.println("Reconocio RES:WHILE"); return new Symbol(sym.res_MIENTRAS,yyline,yychar, yytext());
            } 
            // fall through
          case 111: break;
          case 51: 
            { System.out.println("Reconocio RES:CON_VAL lexema:"+yytext());return new Symbol(sym.res_CONVALOR,yyline,yychar, yytext());
            } 
            // fall through
          case 112: break;
          case 52: 
            { return new Symbol(sym.res_FINSEGUN,yyline,yychar, yytext());
            } 
            // fall through
          case 113: break;
          case 53: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_VERDADERO,yyline,yychar,yytext());
            } 
            // fall through
          case 114: break;
          case 54: 
            { return new Symbol(sym.res_HASTAQ,yyline,yychar, yytext());
            } 
            // fall through
          case 115: break;
          case 55: 
            { return new Symbol(sym.res_FINMETODO,yyline,yychar, yytext());
            } 
            // fall through
          case 116: break;
          case 56: 
            { return new Symbol(sym.res_IMPRIMIRNL,yyline,yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 57: 
            { return new Symbol(sym.res_FINFUNCION,yyline,yychar, yytext());
            } 
            // fall through
          case 118: break;
          case 58: 
            { return new Symbol(sym.res_FINMIENTRAS,yyline,yychar, yytext());
            } 
            // fall through
          case 119: break;
          case 59: 
            { return new Symbol(sym.res_CONINCREM,yyline,yychar, yytext());
            } 
            // fall through
          case 120: break;
          case 60: 
            { return new Symbol(sym.res_ELSE,yyline,yychar, yytext());
            } 
            // fall through
          case 121: break;
          case 61: 
            { return new Symbol(sym.res_METODOCONP,yyline,yychar, yytext());
            } 
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
