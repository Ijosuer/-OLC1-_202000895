
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import arbol.Imprimir;
import java.util.LinkedList;
import arbol.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\006\011\000\002\007\006\000\002\010\007" +
    "\000\002\010\011\000\002\010\010\000\002\010\012\000" +
    "\002\030\007\000\002\030\006\000\002\012\013\000\002" +
    "\013\007\000\002\014\006\000\002\015\006\000\002\015" +
    "\012\000\002\016\007\000\002\016\013\000\002\032\007" +
    "\000\002\032\010\000\002\017\005\000\002\017\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\020\005\000\002\020\003\000\002\031\006\000\002\031" +
    "\004\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\027\004\000\002\027\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\013\005\001\002\000\004\002\000\001" +
    "\002\000\030\003\032\004\033\015\027\020\025\026\024" +
    "\027\026\031\015\032\022\037\011\045\030\047\017\001" +
    "\002\000\004\002\007\001\002\000\004\002\001\001\002" +
    "\000\032\003\ufffc\004\ufffc\014\ufffc\015\ufffc\020\ufffc\026" +
    "\ufffc\027\ufffc\031\ufffc\032\ufffc\037\ufffc\045\ufffc\047\ufffc" +
    "\001\002\000\020\004\051\005\044\007\042\010\046\011" +
    "\047\077\052\106\045\001\002\000\032\003\ufff7\004\ufff7" +
    "\014\ufff7\015\ufff7\020\ufff7\026\ufff7\027\ufff7\031\ufff7\032" +
    "\ufff7\037\ufff7\045\ufff7\047\ufff7\001\002\000\032\003\ufff6" +
    "\004\ufff6\014\ufff6\015\ufff6\020\ufff6\026\ufff6\027\ufff6\031" +
    "\ufff6\032\ufff6\037\ufff6\045\ufff6\047\ufff6\001\002\000\032" +
    "\003\ufff9\004\ufff9\014\ufff9\015\ufff9\020\ufff9\026\ufff9\027" +
    "\ufff9\031\ufff9\032\ufff9\037\ufff9\045\ufff9\047\ufff9\001\002" +
    "\000\004\004\033\001\002\000\006\074\154\111\224\001" +
    "\002\000\004\004\212\001\002\000\032\003\ufffd\004\ufffd" +
    "\014\ufffd\015\ufffd\020\ufffd\026\ufffd\027\ufffd\031\ufffd\032" +
    "\ufffd\037\ufffd\045\ufffd\047\ufffd\001\002\000\032\003\ufff5" +
    "\004\ufff5\014\ufff5\015\ufff5\020\ufff5\026\ufff5\027\ufff5\031" +
    "\ufff5\032\ufff5\037\ufff5\045\ufff5\047\ufff5\001\002\000\004" +
    "\106\210\001\002\000\032\003\032\004\033\014\207\015" +
    "\027\020\025\026\024\027\026\031\015\032\022\037\011" +
    "\045\030\047\017\001\002\000\004\004\165\001\002\000" +
    "\004\004\033\001\002\000\022\004\033\015\027\020\025" +
    "\027\026\031\015\032\022\037\011\045\030\001\002\000" +
    "\020\004\051\005\044\007\042\010\046\011\047\077\052" +
    "\106\045\001\002\000\004\106\040\001\002\000\032\003" +
    "\ufff3\004\ufff3\014\ufff3\015\ufff3\020\ufff3\026\ufff3\027\ufff3" +
    "\031\ufff3\032\ufff3\037\ufff3\045\ufff3\047\ufff3\001\002\000" +
    "\032\003\ufff2\004\ufff2\014\ufff2\015\ufff2\020\ufff2\026\ufff2" +
    "\027\ufff2\031\ufff2\032\ufff2\037\ufff2\045\ufff2\047\ufff2\001" +
    "\002\000\010\016\uffda\074\uffda\111\uffda\001\002\000\032" +
    "\003\ufffb\004\ufffb\014\ufffb\015\ufffb\020\ufffb\026\ufffb\027" +
    "\ufffb\031\ufffb\032\ufffb\037\ufffb\045\ufffb\047\ufffb\001\002" +
    "\000\032\003\ufff8\004\ufff8\014\ufff8\015\ufff8\020\ufff8\026" +
    "\ufff8\027\ufff8\031\ufff8\032\ufff8\037\ufff8\045\ufff8\047\ufff8" +
    "\001\002\000\032\003\ufffa\004\ufffa\014\ufffa\015\ufffa\020" +
    "\ufffa\026\ufffa\027\ufffa\031\ufffa\032\ufffa\037\ufffa\045\ufffa" +
    "\047\ufffa\001\002\000\032\003\ufff4\004\ufff4\014\ufff4\015" +
    "\ufff4\020\ufff4\026\ufff4\027\ufff4\031\ufff4\032\ufff4\037\ufff4" +
    "\045\ufff4\047\ufff4\001\002\000\004\073\041\001\002\000" +
    "\052\003\uffdf\004\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\037" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\051\uffdf\001\002\000\122\003\uffcf\004\uffcf\014\uffcf\015" +
    "\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\035\uffcf\037\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\100\uffcf\101\uffcf\001\002\000\040\055" +
    "\055\056\054\057\127\060\133\061\136\062\130\063\135" +
    "\064\131\065\132\066\126\067\134\070\056\071\060\072" +
    "\062\101\057\001\002\000\122\003\uffd0\004\uffd0\014\uffd0" +
    "\015\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\035\uffd0\037\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\051" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071" +
    "\uffd0\072\uffd0\073\uffd0\100\uffd0\101\uffd0\001\002\000\122" +
    "\003\uffcd\004\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\022" +
    "\uffcd\023\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\035\uffcd\037\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\051\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\100\uffcd" +
    "\101\uffcd\001\002\000\122\003\uffcc\004\uffcc\014\uffcc\015" +
    "\uffcc\017\uffcc\020\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\035\uffcc\037\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\100\uffcc\101\uffcc\001\002\000\122\003" +
    "\uffcb\004\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\022\uffcb" +
    "\023\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\035\uffcb\037\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\051\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\100\uffcb\101" +
    "\uffcb\001\002\000\004\035\071\001\002\000\122\003\uffce" +
    "\004\uffce\014\uffce\015\uffce\017\uffce\020\uffce\022\uffce\023" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\035\uffce\037\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\051\uffce\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067" +
    "\uffce\070\uffce\071\uffce\072\uffce\073\uffce\100\uffce\101\uffce" +
    "\001\002\000\020\004\051\005\044\007\042\010\046\011" +
    "\047\077\052\106\045\001\002\000\020\055\055\056\054" +
    "\070\056\071\060\072\062\100\061\101\057\001\002\000" +
    "\020\004\051\005\044\007\042\010\046\011\047\077\052" +
    "\106\045\001\002\000\020\004\051\005\044\007\042\010" +
    "\046\011\047\077\052\106\045\001\002\000\020\004\051" +
    "\005\044\007\042\010\046\011\047\077\052\106\045\001" +
    "\002\000\020\004\051\005\044\007\042\010\046\011\047" +
    "\077\052\106\045\001\002\000\020\004\051\005\044\007" +
    "\042\010\046\011\047\077\052\106\045\001\002\000\122" +
    "\003\uffd1\004\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\022" +
    "\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\035\uffd1\037\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\051\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\100\uffd1" +
    "\101\uffd1\001\002\000\020\004\051\005\044\007\042\010" +
    "\046\011\047\077\052\106\045\001\002\000\122\003\uffd5" +
    "\004\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\022\uffd5\023" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\035\uffd5\037\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\100\uffd5\101\uffd5" +
    "\001\002\000\122\003\uffd4\004\uffd4\014\uffd4\015\uffd4\017" +
    "\uffd4\020\uffd4\022\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\035\uffd4\037\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\100\uffd4\101\uffd4\001\002\000\122\003\uffd6\004" +
    "\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\035" +
    "\uffd6\037\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\051\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\071\uffd6\072\uffd6\073\uffd6\100\uffd6\101\uffd6\001" +
    "\002\000\122\003\uffd7\004\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\020\uffd7\022\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\035\uffd7\037\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073" +
    "\uffd7\100\uffd7\101\uffd7\001\002\000\122\003\uffd3\004\uffd3" +
    "\014\uffd3\015\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\035\uffd3" +
    "\037\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\051\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070" +
    "\uffd3\071\uffd3\072\uffd3\073\uffd3\100\uffd3\101\uffd3\001\002" +
    "\000\122\003\uffd2\004\uffd2\014\uffd2\015\uffd2\017\uffd2\020" +
    "\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\035\uffd2\037\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2" +
    "\100\uffd2\101\uffd2\001\002\000\022\004\033\015\027\020" +
    "\025\027\026\031\015\032\022\037\011\045\030\001\002" +
    "\000\042\004\uffc8\015\uffc8\017\uffc8\020\uffc8\025\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\037\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\051\uffc8\001\002\000\042\004" +
    "\uffc3\015\uffc3\017\uffc3\020\uffc3\025\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\037\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\051\uffc3\001\002\000\042\004\uffc2\015\uffc2" +
    "\017\uffc2\020\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\037\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\051\uffc2\001\002\000\042\004\033\015\027\017\uffc9\020" +
    "\025\025\uffc9\027\026\030\uffc9\031\015\032\022\037\011" +
    "\042\uffc9\043\uffc9\044\uffc9\045\030\046\uffc9\051\uffc9\001" +
    "\002\000\042\004\uffc5\015\uffc5\017\uffc5\020\uffc5\025\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\037\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\051\uffc5\001\002\000\042" +
    "\004\uffc1\015\uffc1\017\uffc1\020\uffc1\025\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\037\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\051\uffc1\001\002\000\042\004\uffc7\015" +
    "\uffc7\017\uffc7\020\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\037\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\051\uffc7\001\002\000\042\004\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\037" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\051\uffc4" +
    "\001\002\000\010\017\104\025\106\051\107\001\002\000" +
    "\042\004\uffc6\015\uffc6\017\uffc6\020\uffc6\025\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\037\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\051\uffc6\001\002\000\020\004\051" +
    "\005\044\007\042\010\046\011\047\077\052\106\045\001" +
    "\002\000\010\017\112\025\113\051\114\001\002\000\052" +
    "\003\uffef\004\uffef\014\uffef\015\uffef\017\uffef\020\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\037\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\051" +
    "\uffef\001\002\000\022\004\033\015\027\020\025\027\026" +
    "\031\015\032\022\037\011\045\030\001\002\000\004\025" +
    "\111\001\002\000\052\003\uffee\004\uffee\014\uffee\015\uffee" +
    "\017\uffee\020\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\037\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\047\uffee\051\uffee\001\002\000\020\004\051\005" +
    "\044\007\042\010\046\011\047\077\052\106\045\001\002" +
    "\000\052\003\uffed\004\uffed\014\uffed\015\uffed\017\uffed\020" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\037\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\051\uffed\001\002\000\022\004\033\015\027\020\025" +
    "\027\026\031\015\032\022\037\011\045\030\001\002\000" +
    "\004\025\116\001\002\000\052\003\uffec\004\uffec\014\uffec" +
    "\015\uffec\017\uffec\020\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\037\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\051\uffec\001\002\000\004\035" +
    "\120\001\002\000\022\004\033\015\027\020\025\027\026" +
    "\031\015\032\022\037\011\045\030\001\002\000\010\017" +
    "\uffeb\025\uffeb\051\uffeb\001\002\000\004\035\123\001\002" +
    "\000\022\004\033\015\027\020\025\027\026\031\015\032" +
    "\022\037\011\045\030\001\002\000\010\017\uffea\025\uffea" +
    "\051\uffea\001\002\000\022\017\uffca\025\uffca\030\uffca\042" +
    "\uffca\043\uffca\044\uffca\046\uffca\051\uffca\001\002\000\020" +
    "\004\051\005\044\007\042\010\046\011\047\077\052\106" +
    "\045\001\002\000\020\004\051\005\044\007\042\010\046" +
    "\011\047\077\052\106\045\001\002\000\020\004\051\005" +
    "\044\007\042\010\046\011\047\077\052\106\045\001\002" +
    "\000\020\004\051\005\044\007\042\010\046\011\047\077" +
    "\052\106\045\001\002\000\020\004\051\005\044\007\042" +
    "\010\046\011\047\077\052\106\045\001\002\000\020\004" +
    "\051\005\044\007\042\010\046\011\047\077\052\106\045" +
    "\001\002\000\020\004\051\005\044\007\042\010\046\011" +
    "\047\077\052\106\045\001\002\000\020\004\051\005\044" +
    "\007\042\010\046\011\047\077\052\106\045\001\002\000" +
    "\020\004\051\005\044\007\042\010\046\011\047\077\052" +
    "\106\045\001\002\000\072\003\uffbe\004\uffbe\014\uffbe\015" +
    "\uffbe\017\uffbe\020\uffbe\022\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\035\uffbe\037\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\055\055" +
    "\056\054\070\056\071\060\072\062\101\057\001\002\000" +
    "\072\003\uffbc\004\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc" +
    "\022\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\035\uffbc\037\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\051\uffbc\055\055\056\054\070\056\071" +
    "\060\072\062\101\057\001\002\000\072\003\uffb8\004\uffb8" +
    "\014\uffb8\015\uffb8\017\uffb8\020\uffb8\022\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\035\uffb8\037\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\051" +
    "\uffb8\055\055\056\054\070\056\071\060\072\062\101\057" +
    "\001\002\000\072\003\uffbf\004\uffbf\014\uffbf\015\uffbf\017" +
    "\uffbf\020\uffbf\022\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\035\uffbf\037\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\055\055\056\054" +
    "\070\056\071\060\072\062\101\057\001\002\000\072\003" +
    "\uffb9\004\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9\022\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\035" +
    "\uffb9\037\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\051\uffb9\055\055\056\054\070\056\071\060\072" +
    "\062\101\057\001\002\000\072\003\uffbb\004\uffbb\014\uffbb" +
    "\015\uffbb\017\uffbb\020\uffbb\022\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\035\uffbb\037\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\055" +
    "\055\056\054\070\056\071\060\072\062\101\057\001\002" +
    "\000\072\003\uffbd\004\uffbd\014\uffbd\015\uffbd\017\uffbd\020" +
    "\uffbd\022\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\035\uffbd\037\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\051\uffbd\055\055\056\054\070\056" +
    "\071\060\072\062\101\057\001\002\000\072\003\uffc0\004" +
    "\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\022\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\035\uffc0\037" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\051\uffc0\055\055\056\054\070\056\071\060\072\062\101" +
    "\057\001\002\000\072\003\uffba\004\uffba\014\uffba\015\uffba" +
    "\017\uffba\020\uffba\022\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\035\uffba\037\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\051\uffba\055\055\056" +
    "\054\070\056\071\060\072\062\101\057\001\002\000\004" +
    "\042\151\001\002\000\020\004\051\005\044\007\042\010" +
    "\046\011\047\077\052\106\045\001\002\000\052\003\uffe7" +
    "\004\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\037\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\001" +
    "\002\000\006\074\154\111\155\001\002\000\004\004\164" +
    "\001\002\000\020\004\051\005\044\007\042\010\046\011" +
    "\047\077\052\106\045\001\002\000\020\023\157\055\055" +
    "\056\054\070\056\071\060\072\062\101\057\001\002\000" +
    "\020\004\051\005\044\007\042\010\046\011\047\077\052" +
    "\106\045\001\002\000\020\022\161\055\055\056\054\070" +
    "\056\071\060\072\062\101\057\001\002\000\022\004\033" +
    "\015\027\020\025\027\026\031\015\032\022\037\011\045" +
    "\030\001\002\000\004\030\163\001\002\000\052\003\uffe9" +
    "\004\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\037\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9\001" +
    "\002\000\010\016\uffdb\074\uffdb\111\uffdb\001\002\000\024" +
    "\004\033\015\027\020\025\027\026\031\015\032\022\037" +
    "\011\045\030\052\166\001\002\000\004\077\171\001\002" +
    "\000\004\043\170\001\002\000\032\003\uffe6\004\uffe6\014" +
    "\uffe6\015\uffe6\020\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6" +
    "\037\uffe6\045\uffe6\047\uffe6\001\002\000\004\004\173\001" +
    "\002\000\006\074\200\100\201\001\002\000\010\024\175" +
    "\053\176\054\174\001\002\000\032\004\uffdc\015\uffdc\020" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\037\uffdc\041\uffdc\045\uffdc" +
    "\052\uffdc\074\uffdc\100\uffdc\001\002\000\032\004\uffdd\015" +
    "\uffdd\020\uffdd\027\uffdd\031\uffdd\032\uffdd\037\uffdd\041\uffdd" +
    "\045\uffdd\052\uffdd\074\uffdd\100\uffdd\001\002\000\032\004" +
    "\uffde\015\uffde\020\uffde\027\uffde\031\uffde\032\uffde\037\uffde" +
    "\041\uffde\045\uffde\052\uffde\074\uffde\100\uffde\001\002\000" +
    "\006\074\uffd8\100\uffd8\001\002\000\004\004\204\001\002" +
    "\000\022\004\033\015\027\020\025\027\026\031\015\032" +
    "\022\037\011\045\030\001\002\000\004\043\203\001\002" +
    "\000\032\003\uffe5\004\uffe5\014\uffe5\015\uffe5\020\uffe5\026" +
    "\uffe5\027\uffe5\031\uffe5\032\uffe5\037\uffe5\045\uffe5\047\uffe5" +
    "\001\002\000\010\024\175\053\176\054\174\001\002\000" +
    "\006\074\uffd9\100\uffd9\001\002\000\032\003\ufffe\004\ufffe" +
    "\014\ufffe\015\ufffe\020\ufffe\026\ufffe\027\ufffe\031\ufffe\032" +
    "\ufffe\037\ufffe\045\ufffe\047\ufffe\001\002\000\004\002\uffff" +
    "\001\002\000\004\073\211\001\002\000\052\003\uffe0\004" +
    "\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\037\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\001\002" +
    "\000\010\024\175\053\176\054\174\001\002\000\024\004" +
    "\033\015\027\020\025\027\026\031\015\032\022\037\011" +
    "\045\030\052\214\001\002\000\004\077\217\001\002\000" +
    "\004\044\216\001\002\000\032\003\uffe4\004\uffe4\014\uffe4" +
    "\015\uffe4\020\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\037" +
    "\uffe4\045\uffe4\047\uffe4\001\002\000\004\004\173\001\002" +
    "\000\006\074\200\100\221\001\002\000\022\004\033\015" +
    "\027\020\025\027\026\031\015\032\022\037\011\045\030" +
    "\001\002\000\004\044\223\001\002\000\032\003\uffe3\004" +
    "\uffe3\014\uffe3\015\uffe3\020\uffe3\026\uffe3\027\uffe3\031\uffe3" +
    "\032\uffe3\037\uffe3\045\uffe3\047\uffe3\001\002\000\020\004" +
    "\051\005\044\007\042\010\046\011\047\077\052\106\045" +
    "\001\002\000\020\055\055\056\054\070\056\071\060\072" +
    "\062\073\226\101\057\001\002\000\052\003\ufff0\004\ufff0" +
    "\014\ufff0\015\ufff0\017\ufff0\020\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\037\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\001\002\000" +
    "\006\016\230\074\154\001\002\000\010\024\175\053\176" +
    "\054\174\001\002\000\004\041\232\001\002\000\020\004" +
    "\051\005\044\007\042\010\046\011\047\077\052\106\045" +
    "\001\002\000\020\055\055\056\054\070\056\071\060\072" +
    "\062\073\234\101\057\001\002\000\052\003\ufff1\004\ufff1" +
    "\014\ufff1\015\ufff1\017\ufff1\020\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\037\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\001\002\000" +
    "\004\022\236\001\002\000\022\004\033\015\027\020\025" +
    "\027\026\031\015\032\022\037\011\045\030\001\002\000" +
    "\004\046\240\001\002\000\052\003\uffe8\004\uffe8\014\uffe8" +
    "\015\uffe8\017\uffe8\020\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\037\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\051\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\034\004\022\005\017\006\007\007\033\010\035" +
    "\011\013\012\034\013\011\014\012\015\020\016\036\017" +
    "\030\020\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\042\024\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\205\006\007\007\033\010\035\011\013\012\034\013" +
    "\011\014\012\015\020\016\036\017\030\020\015\001\001" +
    "\000\002\001\001\000\004\020\152\001\001\000\030\006" +
    "\071\007\077\010\102\011\075\012\100\013\072\014\073" +
    "\017\076\020\015\022\074\027\147\001\001\000\006\023" +
    "\042\024\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\052\001\001\000\002\001\001\000\004\023\067" +
    "\001\001\000\004\023\066\001\001\000\004\023\065\001" +
    "\001\000\004\023\064\001\001\000\004\023\063\001\001" +
    "\000\002\001\001\000\004\023\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\071\007" +
    "\077\010\102\011\075\012\100\013\072\014\073\017\076" +
    "\020\015\022\074\027\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\071\007\077" +
    "\010\102\011\075\012\100\013\072\014\073\017\076\020" +
    "\015\022\074\027\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\104\001\001\000\002\001\001\000\006\023\042\024\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\071\007\077\010\102\011\075\012\100\013\072\014\073" +
    "\017\076\020\015\022\074\027\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\042\024\116\001\001" +
    "\000\002\001\001\000\030\006\071\007\077\010\102\011" +
    "\075\012\100\013\072\014\073\017\076\020\015\022\074" +
    "\027\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\071\007\077\010\102\011\075" +
    "\012\100\013\072\014\073\017\076\020\015\022\074\027" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\071\007\077\010\102\011\075\012\100\013\072\014" +
    "\073\017\076\020\015\022\074\027\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\146\001\001\000" +
    "\004\023\145\001\001\000\004\023\144\001\001\000\004" +
    "\023\143\001\001\000\004\023\142\001\001\000\004\023" +
    "\141\001\001\000\004\023\140\001\001\000\004\023\137" +
    "\001\001\000\004\023\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\042" +
    "\024\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\155\001\001\000\002\001\001" +
    "\000\004\023\157\001\001\000\002\001\001\000\030\006" +
    "\071\007\077\010\102\011\075\012\100\013\072\014\073" +
    "\017\076\020\015\022\074\027\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\071" +
    "\007\077\010\102\011\075\012\100\013\072\014\073\017" +
    "\076\020\015\022\074\027\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\171\001" +
    "\001\000\002\001\001\000\004\021\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\071\007\077\010\102" +
    "\011\075\012\100\013\072\014\073\017\076\020\015\022" +
    "\074\027\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\212\001\001\000\030\006\071\007\077\010" +
    "\102\011\075\012\100\013\072\014\073\017\076\020\015" +
    "\022\074\027\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\217\001\001\000\002" +
    "\001\001\000\030\006\071\007\077\010\102\011\075\012" +
    "\100\013\072\014\073\017\076\020\015\022\074\027\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\230\001\001\000\002\001\001\000" +
    "\004\023\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\071\007\077\010\102\011" +
    "\075\012\100\013\072\014\073\017\076\020\015\022\074" +
    "\027\236\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static Nodo raiz;
        
        public Nodo getRaiz(){
            return raiz;
        }
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= I 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 parser.raiz = a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // I ::= res_INICIO RECURSIVE res_FIN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("INICIO", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                         padre.AddHijo(new Nodo("res_Inicio", "", 0,0)); 
                                         padre.AddHijo(b);
                                         padre.AddHijo(new Nodo("res_FIN", "", 0,0)); 
                                         RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RECURSIVE ::= RECURSIVE BEGIN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                     padre.AddHijo(a); 
                                     padre.AddHijo(b);
                                     RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RECURSIVE ::= BEGIN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                  padre.AddHijo(a); 
                                  RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BEGIN ::= DECLARA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BEGIN ::= ASIGNA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BEGIN ::= CONDICION 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BEGIN ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BEGIN ::= FOR 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BEGIN ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BEGIN ::= HASTA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BEGIN ::= METODO 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BEGIN ::= FUNCION 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BEGIN ::= PRINT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BEGIN ::= error 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARA ::= res_INGRESAR LISTID res_COMO TIPO res_CONVALOR EXPRESION_NUM tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                                                            Nodo padre = new Nodo("DECLARACION", "", 0,0);
                                                                            padre.AddHijo(new Nodo("res_INGRESAR", a, aright, aleft));               //agregamos como hijo la palabra reservada imprimir
                                                                            padre.AddHijo(b);                                                        //agregamos como hijo el identificador de la cadena
                                                                            padre.AddHijo(new Nodo("res_COMO", c, cright, cleft));             //agregamos como hijo el signo ptcoma
                                                                            padre.AddHijo(d);                                                        //agregamos como hijo el identificador de la cadena
                                                                            padre.AddHijo(new Nodo("res_CVALOR", e, cright, cleft));             //agregamos como hijo el signo ptcoma
                                                                            padre.AddHijo(f);                                                        //agregamos como hijo el identificador de la cadena
                                                                            padre.AddHijo(new Nodo("tk_PTCOMA", g, cright, cleft));             //agregamos como hijo el signo ptcoma
                                                                            RESULT = padre;                                                                             
                                                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNA ::= LISTID tk_ASIGNAFLECHA EXPRESION_NUM tk_PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONDICION ::= res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST res_FINSI 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONDICION ::= res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST res_ELSE RECURSIVE_INST res_FINSI 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONDICION ::= res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST ELSEIF res_FINSI 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONDICION ::= res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST ELSEIF res_ELSE RECURSIVE_INST res_FINSI 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELSEIF ::= ELSEIF res_ELSEIF EXPRESION_logica res_ENTONCES RECURSIVE_INST 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELSEIF ::= res_ELSEIF EXPRESION_logica res_ENTONCES RECURSIVE_INST 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FOR ::= res_PARA LISTID tk_ASIGNAFLECHA EXPRESION_NUM res_HASTA EXPRESION_NUM res_HACER RECURSIVE_INST res_FINPARA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WHILE ::= res_MIENTRAS EXPRESION_logica res_HACER RECURSIVE_INST res_FINMIENTRAS 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // HASTA ::= res_REPETIR RECURSIVE_INST res_HASTAQ EXPRESION_logica 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("HASTA",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODO ::= res_METODO IDENTIFICADOR RECURSIVE_INST res_FINMETODO 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODO ::= res_METODO IDENTIFICADOR res_METODOCONP tk_PARIZQ LISTP tk_PARDER RECURSIVE_INST res_FINMETODO 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= res_FUNCION IDENTIFICADOR TIPO RECURSIVE_INST res_FINFUNCION 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= res_FUNCION IDENTIFICADOR TIPO res_METODOCONP tk_PARIZQ LISTP tk_PARDER RECURSIVE_INST res_FINFUNCION 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EJECUTAR ::= res_EJECUTAR IDENTIFICADOR tk_PARIZQ tk_PARDER tk_PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EJECUTAR ::= res_EJECUTAR IDENTIFICADOR tk_PARIZQ LISTP tk_PARDER tk_PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRINT ::= res_IMPRIMIR tk_CADENA tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
                                                        Nodo padre = new Nodo("PRINT", "", 0,0);
                                                        padre.AddHijo(new Nodo("res_PRINT", a, aright, aleft));               //agregamos como hijo la palabra reservada imprimir
                                                        padre.AddHijo(new Nodo("tk_cadena", b, bright, bleft));     //agregamos como hijo el identificador de la cadena
                                                        padre.AddHijo(new Nodo("tk_PTCOMA", c, cright, cleft));             //agregamos como hijo el signo ptcoma
                                                        RESULT = padre;    
                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRINT ::= res_IMPRIMIRNL tk_CADENA tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
                                                        Nodo padre = new Nodo("PRINTLN", "", 0,0);
                                                        padre.AddHijo(new Nodo("res_PRINTNL", a, aright, aleft));               
                                                        padre.AddHijo(new Nodo("tk_cadena", b, bright, bleft));     
                                                        padre.AddHijo(new Nodo("tk_PTCOMA", c, cright, cleft));             
                                                        RESULT = padre;    
                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= res_CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("TIPO", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                       padre.AddHijo(new Nodo("res_CADENA", "", aright, aleft));
                        RESULT=padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= res_NUMERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("TIPO", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                       padre.AddHijo(new Nodo("res_num", "", aright, aleft));
                        RESULT=padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= res_BOOLEAN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("TIPO", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                       padre.AddHijo(new Nodo("res_bool", a, aright, aleft));
                        RESULT=padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTID ::= LISTID tk_COMA IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                     Nodo padre = new Nodo("LISTID", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                     padre.AddHijo(a); 
                                     padre.AddHijo (new Nodo("tk_PTCOMA", b, 0,0));
                                     padre.AddHijo (new Nodo("id", c, 0,0));
                                     RESULT = padre;
                                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTID",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTID ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                     Nodo padre = new Nodo("LISTID", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                     padre.AddHijo (new Nodo("ID", a, 0,0));
                                     RESULT = padre;
                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTID",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTP ::= LISTP tk_COMA IDENTIFICADOR TIPO 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTP",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTP ::= IDENTIFICADOR TIPO 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTP",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION_NUM ::= EXPRESION_NUM tk_MAS EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("mas", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_NUM ::= EXPRESION_NUM tk_MENOS EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("menos", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_NUM ::= EXPRESION_NUM tk_POR EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("por", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_NUM ::= EXPRESION_NUM tk_DIVIDIDO EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("div", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_NUM ::= EXPRESION_NUM res_POTENCIA EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("pow", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION_NUM ::= EXPRESION_NUM res_MOD EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("mod", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION_NUM ::= tk_PARIZQ EXPRESION_NUM tk_PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                                                         padre.AddHijo(new Nodo("tk_PABRE", a, aright, aleft));    
                                                         padre.AddHijo(b);    
                                                         padre.AddHijo(new Nodo("tk_PCIERRA", c, cright, cleft));    
                                                         RESULT = padre;                                         
                                                       
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION_NUM ::= ENTERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("ENTERO", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION_NUM ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("DECIMAL", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION_NUM ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("ID", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION_NUM ::= tk_CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("tk_cadena", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_NUM ::= res_VERDADERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("TRUE", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION_NUM ::= res_FALSO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("FALSE", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RECURSIVE_INST ::= INSTRUCCIONES RECURSIVE_INST 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE_INST",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RECURSIVE_INST ::= INSTRUCCIONES 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE_INST",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCIONES ::= DECLARA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCIONES ::= ASIGNA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCIONES ::= CONDICION 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCCIONES ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTRUCCIONES ::= FOR 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTRUCCIONES ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTRUCCIONES ::= HASTA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INSTRUCCIONES ::= PRINT 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_logica ::= EXPRESION_NUM res_MAYOR EXPRESION_NUM 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_logica ::= EXPRESION_NUM res_MENOR EXPRESION_NUM 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION_logica ::= EXPRESION_NUM res_MENORIGUAL EXPRESION_NUM 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION_logica ::= EXPRESION_NUM res_MAYORIGUAL EXPRESION_NUM 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION_logica ::= EXPRESION_NUM res_ESIGUAL EXPRESION_NUM 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION_logica ::= EXPRESION_NUM res_ESDIFERENTE EXPRESION_NUM 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION_logica ::= EXPRESION_NUM res_AND EXPRESION_NUM 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_logica ::= EXPRESION_NUM res_OR EXPRESION_NUM 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_logica ::= EXPRESION_NUM res_NOT EXPRESION_NUM 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
