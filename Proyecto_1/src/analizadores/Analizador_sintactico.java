
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import arbol.Nodo;
import arbol.Imprimir;
import arbol.Declarar;
import arbol.Asignar;
import arbol.If;
import arbol.Para;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\011" +
    "\000\002\006\011\000\002\007\006\000\002\010\007\000" +
    "\002\010\010\000\002\010\011\000\002\010\012\000\002" +
    "\010\007\000\002\010\010\000\002\010\011\000\002\010" +
    "\012\000\002\030\007\000\002\030\006\000\002\030\006" +
    "\000\002\030\007\000\002\011\013\000\002\011\012\000" +
    "\002\011\015\000\002\012\007\000\002\012\006\000\002" +
    "\013\006\000\002\013\005\000\002\025\007\000\002\025" +
    "\012\000\002\026\010\000\002\026\007\000\002\014\006" +
    "\000\002\014\012\000\002\015\010\000\002\015\014\000" +
    "\002\033\007\000\002\033\010\000\002\034\005\000\002" +
    "\034\005\000\002\016\005\000\002\016\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\005\000\002\017\005" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\020\005\000\002\020\003\000\002" +
    "\031\006\000\002\031\004\000\002\032\005\000\002\032" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\007\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\027\004\000\002\027\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\004\000\002\024\004\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\004\013\005\001\002\000\004\002\000\001" +
    "\002\000\034\003\035\004\036\015\032\020\030\021\022" +
    "\026\024\027\031\031\016\032\026\036\025\037\011\045" +
    "\034\047\020\001\002\000\004\002\007\001\002\000\004" +
    "\002\001\001\002\000\034\004\ufffa\014\ufffa\015\ufffa\020" +
    "\ufffa\021\ufffa\026\ufffa\027\ufffa\031\ufffa\032\ufffa\036\ufffa" +
    "\037\ufffa\045\ufffa\047\ufffa\001\002\000\024\004\073\005" +
    "\060\006\066\007\056\010\062\011\063\067\065\101\070" +
    "\105\061\001\002\000\034\004\ufff5\014\ufff5\015\ufff5\020" +
    "\ufff5\021\ufff5\026\ufff5\027\ufff5\031\ufff5\032\ufff5\036\ufff5" +
    "\037\ufff5\045\ufff5\047\ufff5\001\002\000\034\004\ufff4\014" +
    "\ufff4\015\ufff4\020\ufff4\021\ufff4\026\ufff4\027\ufff4\031\ufff4" +
    "\032\ufff4\036\ufff4\037\ufff4\045\ufff4\047\ufff4\001\002\000" +
    "\034\004\ufff1\014\ufff1\015\ufff1\020\ufff1\021\ufff1\026\ufff1" +
    "\027\ufff1\031\ufff1\032\ufff1\036\ufff1\037\ufff1\045\ufff1\047" +
    "\ufff1\001\002\000\034\004\ufff7\014\ufff7\015\ufff7\020\ufff7" +
    "\021\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\036\ufff7\037" +
    "\ufff7\045\ufff7\047\ufff7\001\002\000\004\004\036\001\002" +
    "\000\006\074\224\110\346\001\002\000\004\004\325\001" +
    "\002\000\034\004\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd" +
    "\026\ufffd\027\ufffd\031\ufffd\032\ufffd\036\ufffd\037\ufffd\045" +
    "\ufffd\047\ufffd\001\002\000\022\004\073\005\060\006\066" +
    "\007\056\010\062\011\063\101\115\105\061\001\002\000" +
    "\034\004\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3\026\ufff3" +
    "\027\ufff3\031\ufff3\032\ufff3\036\ufff3\037\ufff3\045\ufff3\047" +
    "\ufff3\001\002\000\004\004\261\001\002\000\004\004\247" +
    "\001\002\000\010\004\045\101\047\105\046\001\002\000" +
    "\034\004\036\014\244\015\032\020\030\021\022\026\024" +
    "\027\031\031\016\032\026\036\025\037\011\045\034\047" +
    "\020\001\002\000\004\004\036\001\002\000\026\004\036" +
    "\015\032\020\030\021\022\027\031\031\016\032\026\037" +
    "\011\042\217\045\034\001\002\000\024\004\067\005\060" +
    "\006\066\007\056\010\062\011\063\067\065\101\070\105" +
    "\061\001\002\000\034\004\ufff0\014\ufff0\015\ufff0\020\ufff0" +
    "\021\ufff0\026\ufff0\027\ufff0\031\ufff0\032\ufff0\036\ufff0\037" +
    "\ufff0\045\ufff0\047\ufff0\001\002\000\010\004\045\101\047" +
    "\105\046\001\002\000\006\073\043\110\044\001\002\000" +
    "\010\016\uffc2\074\uffc2\110\uffc2\001\002\000\034\004\ufff9" +
    "\014\ufff9\015\ufff9\020\ufff9\021\ufff9\026\ufff9\027\ufff9\031" +
    "\ufff9\032\ufff9\036\ufff9\037\ufff9\045\ufff9\047\ufff9\001\002" +
    "\000\034\004\ufff6\014\ufff6\015\ufff6\020\ufff6\021\ufff6\026" +
    "\ufff6\027\ufff6\031\ufff6\032\ufff6\036\ufff6\037\ufff6\045\ufff6" +
    "\047\ufff6\001\002\000\034\004\ufff8\014\ufff8\015\ufff8\020" +
    "\ufff8\021\ufff8\026\ufff8\027\ufff8\031\ufff8\032\ufff8\036\ufff8" +
    "\037\ufff8\045\ufff8\047\ufff8\001\002\000\034\004\ufff2\014" +
    "\ufff2\015\ufff2\020\ufff2\021\ufff2\026\ufff2\027\ufff2\031\ufff2" +
    "\032\ufff2\036\ufff2\037\ufff2\045\ufff2\047\ufff2\001\002\000" +
    "\034\004\ufffb\014\ufffb\015\ufffb\020\ufffb\021\ufffb\026\ufffb" +
    "\027\ufffb\031\ufffb\032\ufffb\036\ufffb\037\ufffb\045\ufffb\047" +
    "\ufffb\001\002\000\034\004\ufffc\014\ufffc\015\ufffc\020\ufffc" +
    "\021\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc\036\ufffc\037" +
    "\ufffc\045\ufffc\047\ufffc\001\002\000\004\073\uffca\001\002" +
    "\000\004\073\uffcb\001\002\000\006\004\052\105\053\001" +
    "\002\000\004\073\051\001\002\000\060\004\uffcc\014\uffcc" +
    "\015\uffcc\017\uffcc\020\uffcc\021\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\042\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\051" +
    "\uffcc\112\uffcc\001\002\000\004\102\055\001\002\000\004" +
    "\102\054\001\002\000\004\073\uffc8\001\002\000\004\073" +
    "\uffc9\001\002\000\136\004\uffb5\014\uffb5\015\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\042\uffb5\043\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\070" +
    "\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\100\uffb5\102\uffb5" +
    "\103\uffb5\111\uffb5\112\uffb5\001\002\000\036\055\075\056" +
    "\102\057\101\060\110\061\111\062\103\063\112\064\105" +
    "\065\106\066\076\070\113\071\077\072\107\103\104\001" +
    "\002\000\136\004\uffb6\014\uffb6\015\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\042\uffb6\043\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\070\uffb6\071" +
    "\uffb6\072\uffb6\073\uffb6\074\uffb6\100\uffb6\102\uffb6\103\uffb6" +
    "\111\uffb6\112\uffb6\001\002\000\136\004\uffb2\014\uffb2\015" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\042\uffb2\043\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\100" +
    "\uffb2\102\uffb2\103\uffb2\111\uffb2\112\uffb2\001\002\000\136" +
    "\004\uffb1\014\uffb1\015\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\042" +
    "\uffb1\043\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\073\uffb1\074\uffb1\100\uffb1\102\uffb1\103\uffb1\111\uffb1\112" +
    "\uffb1\001\002\000\136\004\uffb0\014\uffb0\015\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\042\uffb0\043\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\100\uffb0\102\uffb0" +
    "\103\uffb0\111\uffb0\112\uffb0\001\002\000\004\035\203\001" +
    "\002\000\024\004\073\005\060\006\066\007\056\010\062" +
    "\011\063\067\065\101\070\105\061\001\002\000\136\004" +
    "\uffb3\014\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\042\uffb3" +
    "\043\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\070\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\074\uffb3\100\uffb3\102\uffb3\103\uffb3\111\uffb3\112\uffb3" +
    "\001\002\000\040\035\136\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\070\uffb4\071\uffb4\072\uffb4\103\uffb4\001\002\000\024\004" +
    "\073\005\060\006\066\007\056\010\062\011\063\067\065" +
    "\101\070\105\061\001\002\000\040\055\075\056\102\057" +
    "\101\060\110\061\111\062\103\063\112\064\105\065\106" +
    "\066\076\070\113\071\077\072\107\102\100\103\104\001" +
    "\002\000\004\102\074\001\002\000\136\004\uffb4\014\uffb4" +
    "\015\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\042\uffb4\043\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4" +
    "\100\uffb4\102\uffb4\103\uffb4\111\uffb4\112\uffb4\001\002\000" +
    "\072\004\uff9b\014\uff9b\015\uff9b\017\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\042\uff9b" +
    "\043\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\073" +
    "\uff9b\102\uff9b\112\uff9b\001\002\000\004\077\133\001\002" +
    "\000\022\004\073\005\060\006\066\007\056\010\062\011" +
    "\063\101\115\105\061\001\002\000\022\004\073\005\060" +
    "\006\066\007\056\010\062\011\063\101\115\105\061\001" +
    "\002\000\136\004\uffb7\014\uffb7\015\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\042\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7\071" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\100\uffb7\102\uffb7\103\uffb7" +
    "\111\uffb7\112\uffb7\001\002\000\022\004\073\005\060\006" +
    "\066\007\056\010\062\011\063\101\115\105\061\001\002" +
    "\000\022\004\073\005\060\006\066\007\056\010\062\011" +
    "\063\101\115\105\061\001\002\000\022\004\073\005\060" +
    "\006\066\007\056\010\062\011\063\101\115\105\061\001" +
    "\002\000\022\004\073\005\060\006\066\007\056\010\062" +
    "\011\063\101\115\105\061\001\002\000\022\004\073\005" +
    "\060\006\066\007\056\010\062\011\063\101\115\105\061" +
    "\001\002\000\022\004\073\005\060\006\066\007\056\010" +
    "\062\011\063\101\115\105\061\001\002\000\022\004\073" +
    "\005\060\006\066\007\056\010\062\011\063\101\115\105" +
    "\061\001\002\000\022\004\073\005\060\006\066\007\056" +
    "\010\062\011\063\101\115\105\061\001\002\000\022\004" +
    "\073\005\060\006\066\007\056\010\062\011\063\101\115" +
    "\105\061\001\002\000\022\004\073\005\060\006\066\007" +
    "\056\010\062\011\063\101\115\105\061\001\002\000\022" +
    "\004\073\005\060\006\066\007\056\010\062\011\063\101" +
    "\115\105\061\001\002\000\136\004\uffbd\014\uffbd\015\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\100\uffbd" +
    "\102\uffbd\103\uffbd\111\uffbd\112\uffbd\001\002\000\022\004" +
    "\073\005\060\006\066\007\056\010\062\011\063\101\115" +
    "\105\061\001\002\000\020\055\075\056\102\070\113\071" +
    "\077\072\107\102\100\103\104\001\002\000\106\004\uffa1" +
    "\014\uffa1\015\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\042\uffa1\043\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\055\075\056\102" +
    "\070\113\071\077\072\107\073\uffa1\102\uffa1\103\104\112" +
    "\uffa1\001\002\000\106\004\uffa3\014\uffa3\015\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\042\uffa3\043\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\055\075\056\102\070\113\071\077\072\107" +
    "\073\uffa3\102\uffa3\103\104\112\uffa3\001\002\000\106\004" +
    "\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\042\uffa4\043\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\055\075\056" +
    "\102\070\113\071\077\072\107\073\uffa4\102\uffa4\103\104" +
    "\112\uffa4\001\002\000\136\004\uffbb\014\uffbb\015\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\100\uffbb\102" +
    "\uffbb\103\uffbb\111\uffbb\112\uffbb\001\002\000\106\004\uff9e" +
    "\014\uff9e\015\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\040\uff9e\042\uff9e\043\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\055\075\056\102" +
    "\070\113\071\077\072\107\073\uff9e\102\uff9e\103\104\112" +
    "\uff9e\001\002\000\106\004\uffa0\014\uffa0\015\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\042\uffa0\043\uffa0\045\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\055\075\056\102\070\113\071\077\072\107" +
    "\073\uffa0\102\uffa0\103\104\112\uffa0\001\002\000\136\004" +
    "\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc" +
    "\043\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\100\uffbc\102\uffbc\103\uffbc\111\uffbc\112\uffbc" +
    "\001\002\000\106\004\uffa2\014\uffa2\015\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\042\uffa2\043\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\055\075\056\102\070\113\071\077\072\107\073" +
    "\uffa2\102\uffa2\103\104\112\uffa2\001\002\000\136\004\uffb8" +
    "\014\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\042\uffb8\043" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8" +
    "\074\uffb8\100\uffb8\102\uffb8\103\uffb8\111\uffb8\112\uffb8\001" +
    "\002\000\106\004\uffa5\014\uffa5\015\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\042\uffa5\043\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\055\075\056\102\070\113\071\077\072\107\073\uffa5" +
    "\102\uffa5\103\104\112\uffa5\001\002\000\136\004\uffba\014" +
    "\uffba\015\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\042\uffba\043\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\066\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\100\uffba\102\uffba\103\uffba\111\uffba\112\uffba\001\002" +
    "\000\106\004\uff9f\014\uff9f\015\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\022\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\042" +
    "\uff9f\043\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\055\075\056\102\070\113\071\077\072\107\073\uff9f\102" +
    "\uff9f\103\104\112\uff9f\001\002\000\022\004\073\005\060" +
    "\006\066\007\056\010\062\011\063\101\115\105\061\001" +
    "\002\000\020\055\075\056\102\070\113\071\077\072\107" +
    "\100\135\103\104\001\002\000\136\004\uffb9\014\uffb9\015" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\043\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\066\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\100" +
    "\uffb9\102\uffb9\103\uffb9\111\uffb9\112\uffb9\001\002\000\024" +
    "\004\036\015\032\020\030\021\022\027\031\031\016\032" +
    "\026\037\011\045\034\001\002\000\050\004\uffad\015\uffad" +
    "\017\uffad\020\uffad\021\uffad\025\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\034\uffad\037\uffad\040\uffad\042\uffad\043\uffad" +
    "\045\uffad\046\uffad\051\uffad\112\uffad\001\002\000\050\004" +
    "\uffa8\015\uffa8\017\uffa8\020\uffa8\021\uffa8\025\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\032\uffa8\034\uffa8\037\uffa8\040\uffa8\042" +
    "\uffa8\043\uffa8\045\uffa8\046\uffa8\051\uffa8\112\uffa8\001\002" +
    "\000\050\004\uffa7\015\uffa7\017\uffa7\020\uffa7\021\uffa7\025" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\037\uffa7" +
    "\040\uffa7\042\uffa7\043\uffa7\045\uffa7\046\uffa7\051\uffa7\112" +
    "\uffa7\001\002\000\050\004\036\015\032\017\uffae\020\030" +
    "\021\022\025\uffae\027\031\030\uffae\031\016\032\026\034" +
    "\uffae\037\011\040\uffae\042\uffae\043\uffae\045\034\046\uffae" +
    "\051\uffae\112\uffae\001\002\000\050\004\uffaa\015\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\034\uffaa\037\uffaa\040\uffaa\042\uffaa\043\uffaa\045" +
    "\uffaa\046\uffaa\051\uffaa\112\uffaa\001\002\000\050\004\uffa6" +
    "\015\uffa6\017\uffa6\020\uffa6\021\uffa6\025\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\034\uffa6\037\uffa6\040\uffa6\042\uffa6" +
    "\043\uffa6\045\uffa6\046\uffa6\051\uffa6\112\uffa6\001\002\000" +
    "\050\004\uffac\015\uffac\017\uffac\020\uffac\021\uffac\025\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\034\uffac\037\uffac\040" +
    "\uffac\042\uffac\043\uffac\045\uffac\046\uffac\051\uffac\112\uffac" +
    "\001\002\000\050\004\uffa9\015\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9" +
    "\037\uffa9\040\uffa9\042\uffa9\043\uffa9\045\uffa9\046\uffa9\051" +
    "\uffa9\112\uffa9\001\002\000\010\017\151\025\153\051\154" +
    "\001\002\000\050\004\uffab\015\uffab\017\uffab\020\uffab\021" +
    "\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab\034\uffab" +
    "\037\uffab\040\uffab\042\uffab\043\uffab\045\uffab\046\uffab\051" +
    "\uffab\112\uffab\001\002\000\024\004\173\005\060\006\066" +
    "\007\056\010\062\011\063\067\065\101\070\105\061\001" +
    "\002\000\010\017\157\025\160\051\161\001\002\000\060" +
    "\004\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\051\uffe8\112\uffe8\001\002\000\024\004\036" +
    "\015\032\020\030\021\022\027\031\031\016\032\026\037" +
    "\011\045\034\001\002\000\004\025\156\001\002\000\060" +
    "\004\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\051\uffe6\112\uffe6\001\002\000\024\004\165" +
    "\005\060\006\066\007\056\010\062\011\063\067\065\101" +
    "\070\105\061\001\002\000\060\004\uffe7\014\uffe7\015\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\034\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\112" +
    "\uffe7\001\002\000\024\004\036\015\032\020\030\021\022" +
    "\027\031\031\016\032\026\037\011\045\034\001\002\000" +
    "\004\025\163\001\002\000\060\004\uffe5\014\uffe5\015\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\034\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\042\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\112" +
    "\uffe5\001\002\000\004\035\170\001\002\000\040\035\166" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\070\uffb4\071\uffb4\072\uffb4" +
    "\103\uffb4\001\002\000\024\004\036\015\032\020\030\021" +
    "\022\027\031\031\016\032\026\037\011\045\034\001\002" +
    "\000\010\017\uffe1\025\uffe1\051\uffe1\001\002\000\024\004" +
    "\036\015\032\020\030\021\022\027\031\031\016\032\026" +
    "\037\011\045\034\001\002\000\010\017\uffe4\025\uffe4\051" +
    "\uffe4\001\002\000\004\035\176\001\002\000\040\035\174" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\070\uffb4\071\uffb4\072\uffb4" +
    "\103\uffb4\001\002\000\024\004\036\015\032\020\030\021" +
    "\022\027\031\031\016\032\026\037\011\045\034\001\002" +
    "\000\010\017\uffe2\025\uffe2\051\uffe2\001\002\000\024\004" +
    "\036\015\032\020\030\021\022\027\031\031\016\032\026" +
    "\037\011\045\034\001\002\000\010\017\uffe3\025\uffe3\051" +
    "\uffe3\001\002\000\026\017\uffaf\025\uffaf\030\uffaf\034\uffaf" +
    "\040\uffaf\042\uffaf\043\uffaf\046\uffaf\051\uffaf\112\uffaf\001" +
    "\002\000\126\004\uff9c\014\uff9c\015\uff9c\017\uff9c\020\uff9c" +
    "\021\uff9c\022\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\042\uff9c\043\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051" +
    "\uff9c\055\075\056\102\057\101\060\110\061\111\062\103" +
    "\063\112\064\105\065\106\066\076\070\113\071\077\072" +
    "\107\073\uff9c\102\uff9c\103\104\112\uff9c\001\002\000\072" +
    "\004\uff9d\014\uff9d\015\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\042\uff9d\043" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\073\uff9d" +
    "\102\uff9d\112\uff9d\001\002\000\024\004\036\015\032\020" +
    "\030\021\022\027\031\031\016\032\026\037\011\045\034" +
    "\001\002\000\010\017\151\025\206\051\207\001\002\000" +
    "\010\017\157\025\212\051\213\001\002\000\060\004\uffec" +
    "\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\034\uffec\036\uffec" +
    "\037\uffec\040\uffec\042\uffec\043\uffec\045\uffec\046\uffec\047" +
    "\uffec\051\uffec\112\uffec\001\002\000\024\004\036\015\032" +
    "\020\030\021\022\027\031\031\016\032\026\037\011\045" +
    "\034\001\002\000\004\025\211\001\002\000\060\004\uffea" +
    "\014\uffea\015\uffea\017\uffea\020\uffea\021\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\034\uffea\036\uffea" +
    "\037\uffea\040\uffea\042\uffea\043\uffea\045\uffea\046\uffea\047" +
    "\uffea\051\uffea\112\uffea\001\002\000\060\004\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\021\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\042\uffeb\043\uffeb\045\uffeb\046\uffeb\047\uffeb\051" +
    "\uffeb\112\uffeb\001\002\000\024\004\036\015\032\020\030" +
    "\021\022\027\031\031\016\032\026\037\011\045\034\001" +
    "\002\000\004\025\215\001\002\000\060\004\uffe9\014\uffe9" +
    "\015\uffe9\017\uffe9\020\uffe9\021\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9\051" +
    "\uffe9\112\uffe9\001\002\000\004\042\221\001\002\000\024" +
    "\004\073\005\060\006\066\007\056\010\062\011\063\067" +
    "\065\101\070\105\061\001\002\000\060\004\uffda\014\uffda" +
    "\015\uffda\017\uffda\020\uffda\021\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\034\uffda\036\uffda\037\uffda" +
    "\040\uffda\042\uffda\043\uffda\045\uffda\046\uffda\047\uffda\051" +
    "\uffda\112\uffda\001\002\000\024\004\073\005\060\006\066" +
    "\007\056\010\062\011\063\067\065\101\070\105\061\001" +
    "\002\000\060\004\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\034\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\051\uffdb\112\uffdb\001\002\000" +
    "\006\074\224\110\225\001\002\000\004\004\242\001\002" +
    "\000\022\004\073\005\060\006\066\007\056\010\062\011" +
    "\063\101\115\105\061\001\002\000\020\023\227\055\075" +
    "\056\102\070\113\071\077\072\107\103\104\001\002\000" +
    "\024\004\073\005\060\006\066\007\056\010\062\011\063" +
    "\067\065\101\070\105\061\001\002\000\006\022\231\050" +
    "\232\001\002\000\026\004\036\015\032\020\030\021\022" +
    "\027\031\030\237\031\016\032\026\037\011\045\034\001" +
    "\002\000\022\004\073\005\060\006\066\007\056\010\062" +
    "\011\063\101\115\105\061\001\002\000\020\022\234\055" +
    "\075\056\102\070\113\071\077\072\107\103\104\001\002" +
    "\000\024\004\036\015\032\020\030\021\022\027\031\031" +
    "\016\032\026\037\011\045\034\001\002\000\004\030\236" +
    "\001\002\000\060\004\uffde\014\uffde\015\uffde\017\uffde\020" +
    "\uffde\021\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\034\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043" +
    "\uffde\045\uffde\046\uffde\047\uffde\051\uffde\112\uffde\001\002" +
    "\000\060\004\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\034\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\051\uffdf\112\uffdf\001\002\000\004" +
    "\030\241\001\002\000\060\004\uffe0\014\uffe0\015\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0\042" +
    "\uffe0\043\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\112\uffe0" +
    "\001\002\000\010\016\uffc3\074\uffc3\110\uffc3\001\002\000" +
    "\034\004\ufffe\014\ufffe\015\ufffe\020\ufffe\021\ufffe\026\ufffe" +
    "\027\ufffe\031\ufffe\032\ufffe\036\ufffe\037\ufffe\045\ufffe\047" +
    "\ufffe\001\002\000\004\002\uffff\001\002\000\004\073\246" +
    "\001\002\000\060\004\uffcd\014\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\034\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd\043" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\112\uffcd\001\002" +
    "\000\004\101\250\001\002\000\024\004\073\005\060\006" +
    "\066\007\056\010\062\011\063\101\115\102\251\105\061" +
    "\001\002\000\004\073\260\001\002\000\022\055\075\056" +
    "\102\070\113\071\077\072\107\074\uffbe\102\uffbe\103\104" +
    "\001\002\000\006\074\254\102\255\001\002\000\022\004" +
    "\073\005\060\006\066\007\056\010\062\011\063\101\115" +
    "\105\061\001\002\000\004\073\256\001\002\000\034\004" +
    "\uffd0\014\uffd0\015\uffd0\020\uffd0\021\uffd0\026\uffd0\027\uffd0" +
    "\031\uffd0\032\uffd0\036\uffd0\037\uffd0\045\uffd0\047\uffd0\001" +
    "\002\000\022\055\075\056\102\070\113\071\077\072\107" +
    "\074\uffbf\102\uffbf\103\104\001\002\000\034\004\uffd1\014" +
    "\uffd1\015\uffd1\020\uffd1\021\uffd1\026\uffd1\027\uffd1\031\uffd1" +
    "\032\uffd1\036\uffd1\037\uffd1\045\uffd1\047\uffd1\001\002\000" +
    "\026\004\036\015\032\020\030\021\022\027\031\031\016" +
    "\032\026\037\011\045\034\052\262\001\002\000\004\101" +
    "\265\001\002\000\004\043\264\001\002\000\034\004\uffd5" +
    "\014\uffd5\015\uffd5\020\uffd5\021\uffd5\026\uffd5\027\uffd5\031" +
    "\uffd5\032\uffd5\036\uffd5\037\uffd5\045\uffd5\047\uffd5\001\002" +
    "\000\004\004\267\001\002\000\006\074\275\102\276\001" +
    "\002\000\012\024\271\033\272\053\273\054\270\001\002" +
    "\000\034\004\uffc4\015\uffc4\020\uffc4\021\uffc4\027\uffc4\031" +
    "\uffc4\032\uffc4\037\uffc4\041\uffc4\045\uffc4\052\uffc4\074\uffc4" +
    "\102\uffc4\001\002\000\034\004\uffc6\015\uffc6\020\uffc6\021" +
    "\uffc6\027\uffc6\031\uffc6\032\uffc6\037\uffc6\041\uffc6\045\uffc6" +
    "\052\uffc6\074\uffc6\102\uffc6\001\002\000\034\004\uffc5\015" +
    "\uffc5\020\uffc5\021\uffc5\027\uffc5\031\uffc5\032\uffc5\037\uffc5" +
    "\041\uffc5\045\uffc5\052\uffc5\074\uffc5\102\uffc5\001\002\000" +
    "\034\004\uffc7\015\uffc7\020\uffc7\021\uffc7\027\uffc7\031\uffc7" +
    "\032\uffc7\037\uffc7\041\uffc7\045\uffc7\052\uffc7\074\uffc7\102" +
    "\uffc7\001\002\000\006\074\uffc0\102\uffc0\001\002\000\004" +
    "\004\301\001\002\000\024\004\036\015\032\020\030\021" +
    "\022\027\031\031\016\032\026\037\011\045\034\001\002" +
    "\000\004\043\300\001\002\000\034\004\uffd4\014\uffd4\015" +
    "\uffd4\020\uffd4\021\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4" +
    "\036\uffd4\037\uffd4\045\uffd4\047\uffd4\001\002\000\012\024" +
    "\271\033\272\053\273\054\270\001\002\000\006\074\uffc1" +
    "\102\uffc1\001\002\000\020\022\304\055\075\056\102\070" +
    "\113\071\077\072\107\103\104\001\002\000\004\112\306" +
    "\001\002\000\010\040\313\051\314\112\315\001\002\000" +
    "\022\004\073\005\060\006\066\007\056\010\062\011\063" +
    "\101\115\105\061\001\002\000\020\055\075\056\102\070" +
    "\113\071\077\072\107\103\104\111\310\001\002\000\004" +
    "\035\311\001\002\000\024\004\036\015\032\020\030\021" +
    "\022\027\031\031\016\032\026\037\011\045\034\001\002" +
    "\000\010\040\uffd6\051\uffd6\112\uffd6\001\002\000\060\004" +
    "\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\051\uffd9\112\uffd9\001\002\000\004\035\322\001" +
    "\002\000\022\004\073\005\060\006\066\007\056\010\062" +
    "\011\063\101\115\105\061\001\002\000\020\055\075\056" +
    "\102\070\113\071\077\072\107\103\104\111\317\001\002" +
    "\000\004\035\320\001\002\000\024\004\036\015\032\020" +
    "\030\021\022\027\031\031\016\032\026\037\011\045\034" +
    "\001\002\000\010\040\uffd7\051\uffd7\112\uffd7\001\002\000" +
    "\024\004\036\015\032\020\030\021\022\027\031\031\016" +
    "\032\026\037\011\045\034\001\002\000\004\040\324\001" +
    "\002\000\060\004\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\051\uffd8\112\uffd8\001\002\000" +
    "\012\024\271\033\272\053\273\054\270\001\002\000\026" +
    "\004\036\015\032\020\030\021\022\027\031\031\016\032" +
    "\026\037\011\045\034\052\327\001\002\000\004\101\340" +
    "\001\002\000\004\034\331\001\002\000\024\004\073\005" +
    "\060\006\066\007\056\010\062\011\063\067\065\101\070" +
    "\105\061\001\002\000\004\044\333\001\002\000\034\004" +
    "\uffd3\014\uffd3\015\uffd3\020\uffd3\021\uffd3\026\uffd3\027\uffd3" +
    "\031\uffd3\032\uffd3\036\uffd3\037\uffd3\045\uffd3\047\uffd3\001" +
    "\002\000\040\055\075\056\102\057\101\060\110\061\111" +
    "\062\103\063\112\064\105\065\106\066\076\070\113\071" +
    "\077\072\107\073\337\103\104\001\002\000\004\073\336" +
    "\001\002\000\004\044\uffce\001\002\000\004\044\uffcf\001" +
    "\002\000\004\004\267\001\002\000\006\074\275\102\342" +
    "\001\002\000\024\004\036\015\032\020\030\021\022\027" +
    "\031\031\016\032\026\037\011\045\034\001\002\000\004" +
    "\034\331\001\002\000\004\044\345\001\002\000\034\004" +
    "\uffd2\014\uffd2\015\uffd2\020\uffd2\021\uffd2\026\uffd2\027\uffd2" +
    "\031\uffd2\032\uffd2\036\uffd2\037\uffd2\045\uffd2\047\uffd2\001" +
    "\002\000\022\004\073\005\060\006\066\007\056\010\062" +
    "\011\063\101\115\105\061\001\002\000\020\055\075\056" +
    "\102\070\113\071\077\072\107\073\350\103\104\001\002" +
    "\000\060\004\uffed\014\uffed\015\uffed\017\uffed\020\uffed\021" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\034\uffed\036\uffed\037\uffed\040\uffed\042\uffed\043\uffed\045" +
    "\uffed\046\uffed\047\uffed\051\uffed\112\uffed\001\002\000\006" +
    "\016\352\074\224\001\002\000\012\024\271\033\272\053" +
    "\273\054\270\001\002\000\004\041\354\001\002\000\024" +
    "\004\073\005\060\006\066\007\056\010\062\011\063\067" +
    "\065\101\070\105\061\001\002\000\040\055\075\056\102" +
    "\057\101\060\110\061\111\062\103\063\112\064\105\065" +
    "\106\066\076\070\113\071\077\072\107\073\360\103\104" +
    "\001\002\000\004\073\357\001\002\000\060\004\uffee\014" +
    "\uffee\015\uffee\017\uffee\020\uffee\021\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\034\uffee\036\uffee\037" +
    "\uffee\040\uffee\042\uffee\043\uffee\045\uffee\046\uffee\047\uffee" +
    "\051\uffee\112\uffee\001\002\000\060\004\uffef\014\uffef\015" +
    "\uffef\017\uffef\020\uffef\021\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\034\uffef\036\uffef\037\uffef\040" +
    "\uffef\042\uffef\043\uffef\045\uffef\046\uffef\047\uffef\051\uffef" +
    "\112\uffef\001\002\000\004\022\362\001\002\000\026\004" +
    "\036\015\032\020\030\021\022\027\031\031\016\032\026" +
    "\037\011\045\034\046\363\001\002\000\060\004\uffdc\014" +
    "\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\051\uffdc\112\uffdc\001\002\000\004\046\365\001\002\000" +
    "\060\004\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\051\uffdd\112\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\036\004\026\005\020\006\007\007\036\010\040" +
    "\011\037\012\011\013\012\014\022\015\041\016\032\020" +
    "\016\025\014\033\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\056\024\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\350\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\244\001\001\000\034\005\242\006\007" +
    "\007\036\010\040\011\037\012\011\013\012\014\022\015" +
    "\041\016\032\020\016\025\014\033\013\001\001\000\004" +
    "\020\222\001\001\000\030\006\136\007\144\010\147\011" +
    "\145\012\137\013\140\016\143\020\016\022\141\025\142" +
    "\027\215\001\001\000\006\023\056\024\063\001\001\000" +
    "\002\001\001\000\004\017\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\200\024\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\070\024\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\131\001\001\000" +
    "\004\023\130\001\001\000\002\001\001\000\004\023\127" +
    "\001\001\000\004\023\126\001\001\000\004\023\125\001" +
    "\001\000\004\023\124\001\001\000\004\023\123\001\001" +
    "\000\004\023\122\001\001\000\004\023\121\001\001\000" +
    "\004\023\120\001\001\000\004\023\117\001\001\000\004" +
    "\023\116\001\001\000\004\023\113\001\001\000\002\001" +
    "\001\000\004\023\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\136\007" +
    "\144\010\147\011\145\012\137\013\140\016\143\020\016" +
    "\022\141\025\142\027\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\136\007\144" +
    "\010\147\011\145\012\137\013\140\016\143\020\016\022" +
    "\141\025\142\027\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\151\001\001\000\002\001\001\000\006\023\056\024\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\136\007\144\010\147\011\145\012\137\013\140\016\143" +
    "\020\016\022\141\025\142\027\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\056\024\163\001\001" +
    "\000\002\001\001\000\030\006\136\007\144\010\147\011" +
    "\145\012\137\013\140\016\143\020\016\022\141\025\142" +
    "\027\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\136\007\144" +
    "\010\147\011\145\012\137\013\140\016\143\020\016\022" +
    "\141\025\142\027\166\001\001\000\002\001\001\000\030" +
    "\006\136\007\144\010\147\011\145\012\137\013\140\016" +
    "\143\020\016\022\141\025\142\027\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\136\007\144\010\147\011\145\012\137\013\140\016\143" +
    "\020\016\022\141\025\142\027\174\001\001\000\002\001" +
    "\001\000\030\006\136\007\144\010\147\011\145\012\137" +
    "\013\140\016\143\020\016\022\141\025\142\027\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\136\007\144\010\147\011" +
    "\145\012\137\013\140\016\143\020\016\022\141\025\142" +
    "\027\203\001\001\000\004\030\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\136\007\144\010\147" +
    "\011\145\012\137\013\140\016\143\020\016\022\141\025" +
    "\142\027\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\136\007\144\010\147\011" +
    "\145\012\137\013\140\016\143\020\016\022\141\025\142" +
    "\027\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\056\024\217\001\001\000\002" +
    "\001\001\000\006\023\056\024\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\225" +
    "\001\001\000\002\001\001\000\006\023\056\024\227\001" +
    "\001\000\002\001\001\000\030\006\136\007\144\010\147" +
    "\011\145\012\137\013\140\016\143\020\016\022\141\025" +
    "\142\027\237\001\001\000\004\023\232\001\001\000\002" +
    "\001\001\000\030\006\136\007\144\010\147\011\145\012" +
    "\137\013\140\016\143\020\016\022\141\025\142\027\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\251\032\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\136\007\144\010\147\011\145\012\137\013\140\016\143" +
    "\020\016\022\141\025\142\027\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\265" +
    "\001\001\000\002\001\001\000\004\021\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\136\007\144\010\147\011\145\012\137\013\140\016\143" +
    "\020\016\022\141\025\142\027\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\304\001\001\000" +
    "\002\001\001\000\004\023\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\136\007\144\010\147\011" +
    "\145\012\137\013\140\016\143\020\016\022\141\025\142" +
    "\027\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\136\007\144\010\147\011" +
    "\145\012\137\013\140\016\143\020\016\022\141\025\142" +
    "\027\320\001\001\000\002\001\001\000\030\006\136\007" +
    "\144\010\147\011\145\012\137\013\140\016\143\020\016" +
    "\022\141\025\142\027\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\325\001\001\000\030\006\136" +
    "\007\144\010\147\011\145\012\137\013\140\016\143\020" +
    "\016\022\141\025\142\027\327\001\001\000\002\001\001" +
    "\000\004\034\331\001\001\000\006\023\333\024\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\340\001\001\000\002\001\001\000\030\006\136" +
    "\007\144\010\147\011\145\012\137\013\140\016\143\020" +
    "\016\022\141\025\142\027\342\001\001\000\004\034\343" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\352\001\001\000\002\001\001\000" +
    "\006\023\354\024\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\136\007\144\010\147\011\145\012\137" +
    "\013\140\016\143\020\016\022\141\025\142\027\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static Nodo raiz;
        public static Imprimir imprimir = new Imprimir();
        public static Declarar declarar = new Declarar();
        public static Asignar asignar = new Asignar();
        public static If condicion = new If();
        public static Para para = new Para();
        
        public Nodo getRaiz(){      
            return raiz;
        }
        
        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= I 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 parser.raiz = a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // I ::= res_INICIO RECURSIVE res_FIN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("INICIO", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                        padre.AddHijo(new Nodo("res_Inicio", "", 0,0)); 
                                         padre.AddHijo(b);
                                         padre.AddHijo(new Nodo("res_FIN", "", 0,0)); 
                                        RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RECURSIVE ::= RECURSIVE BEGIN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                     padre.AddHijo(a); 
                                     padre.AddHijo(b);
                                     RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RECURSIVE ::= BEGIN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                  padre.AddHijo(a); 
                                  RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RECURSIVE ::= error tk_ASIGNAFLECHA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RECURSIVE ::= error tk_PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BEGIN ::= DECLARA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BEGIN ::= ASIGNA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BEGIN ::= CONDICION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BEGIN ::= SWITCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BEGIN ::= FOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BEGIN ::= WHILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BEGIN ::= HASTA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BEGIN ::= METODO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BEGIN ::= FUNCION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BEGIN ::= EJECUTAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BEGIN ::= PRINT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARA ::= res_INGRESAR LISTID res_COMO TIPO res_CONVALOR EXPRESION_NUM tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                                                            Nodo padre = new Nodo("DECLARACION", "", 0,0);
                                                                            padre.AddHijo(new Nodo("res_INGRESAR", a, aright, aleft));               //agregamos como hijo la palabra reservada imprimir
                                                                            padre.AddHijo(b);                                                        //agregamos como hijo el identificador de la cadena
                                                                            padre.AddHijo(new Nodo("res_COMO", c, cright, cleft));             //agregamos como hijo el signo ptcoma
                                                                            padre.AddHijo(d);                                                        //agregamos como hijo el identificador de la cadena
                                                                            padre.AddHijo(new Nodo("res_CVALOR", e, eright, eleft));             //agregamos como hijo el signo ptcoma
                                                                            padre.AddHijo(f);                                                        //agregamos como hijo el identificador de la cadena
                                                                            padre.AddHijo(new Nodo("tk_PTCOMA", ";", 0, 0));             //agregamos como hijo el signo ptcoma
                                                                            RESULT = padre;      
                                                                           
                                                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARA ::= res_INGRESAR LISTID res_COMO TIPO res_CONVALOR EXPRESION_logica tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                                                            Nodo padre = new Nodo("DECLARACION", "", 0,0);
                                                                            padre.AddHijo(new Nodo("res_INGRESAR", a, aright, aleft));             
                                                                            padre.AddHijo(b);                                                       
                                                                            padre.AddHijo(new Nodo("res_COMO", c, cright, cleft));             
                                                                            padre.AddHijo(d);             
                                                                            padre.AddHijo(new Nodo("res_CVALOR", e, eright, eleft));             
                                                                            padre.AddHijo(f);                                                 
                                                                            padre.AddHijo(new Nodo("tk_PTCOMA", ";", 0, 0));
                                                                            
                                                                            RESULT = padre;                                                                             
                                                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNA ::= LISTID tk_ASIGNAFLECHA EXPRESION_NUM tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("ASIGNA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                                    padre.AddHijo(a); 
                                                                    padre.AddHijo(new Nodo("tk_FLECHA", b, bright, bleft)); 
                                                                    padre.AddHijo(c); 
                                                                    padre.AddHijo(new Nodo("tk_PTCOMA", d, dright, dleft)); 
                                                                    RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONDICION ::= res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST res_FINSI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("CONDICION", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                                                    padre.AddHijo(new Nodo("res_SI", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(new Nodo("res_FINSI", e, eright, eleft)); 
                                                                                    RESULT = padre;
                                                                                    //condicion.condicion(b,d);
                                                                                     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONDICION ::= res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST ELSEIF res_FINSI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("CONDICION", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                                                    padre.AddHijo(new Nodo("res_SI", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(e); 
                                                                                    padre.AddHijo(new Nodo("res_FINSI", f, fright, fleft)); 
                                                                                    RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONDICION ::= res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST res_ELSE RECURSIVE_INST res_FINSI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("CONDICION", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                                                    padre.AddHijo(new Nodo("res_SI", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(new Nodo("res_ELSE", e, eright, eleft)); 
                                                                                    padre.AddHijo(f); 
                                                                                    padre.AddHijo(new Nodo("res_FINSI", g, gright, gleft)); 
                                                                                    RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDICION ::= res_SI EXPRESION_logica res_ENTONCES RECURSIVE_INST ELSEIF res_ELSE RECURSIVE_INST res_FINSI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("CONDICION", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                                                    padre.AddHijo(new Nodo("res_SI", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(e); 
                                                                                    padre.AddHijo(new Nodo("res_ELSE", f, fright, fleft)); 
                                                                                    padre.AddHijo(g); 
                                                                                    padre.AddHijo(new Nodo("res_FINSI", h, hright, hleft)); 
                                                                                    RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONDICION ::= res_SI IDENTIFICADOR res_ENTONCES RECURSIVE_INST res_FINSI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("CONDICION", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                                                    padre.AddHijo(new Nodo("res_SI", a, aright, aleft)); 
                                                                                    padre.AddHijo(new Nodo("ID", b, bright, bleft)); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(new Nodo("res_FINSI", e, eright, eleft)); 
                                                                                    RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDICION ::= res_SI IDENTIFICADOR res_ENTONCES RECURSIVE_INST ELSEIF res_FINSI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("CONDICION", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                                                    padre.AddHijo(new Nodo("res_SI", a, aright, aleft)); 
                                                                                    padre.AddHijo(new Nodo("ID", b, bright, bleft));
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(e); 
                                                                                    padre.AddHijo(new Nodo("res_FINSI", f, fright, fleft)); 
                                                                                    RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDICION ::= res_SI IDENTIFICADOR res_ENTONCES RECURSIVE_INST res_ELSE RECURSIVE_INST res_FINSI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("CONDICION", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                                                    padre.AddHijo(new Nodo("res_SI", a, aright, aleft)); 
                                                                                    padre.AddHijo(new Nodo("ID", b, bright, bleft));
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(new Nodo("res_ELSE", e, eright, eleft)); 
                                                                                    padre.AddHijo(f); 
                                                                                    padre.AddHijo(new Nodo("res_FINSI", g, gright, gleft)); 
                                                                                    RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDICION ::= res_SI IDENTIFICADOR res_ENTONCES RECURSIVE_INST ELSEIF res_ELSE RECURSIVE_INST res_FINSI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("CONDICION", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                                                    padre.AddHijo(new Nodo("res_SI", a, aright, aleft)); 
                                                                                    padre.AddHijo(new Nodo("ID", b, bright, bleft)); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(e); 
                                                                                    padre.AddHijo(new Nodo("res_ELSE", f, fright, fleft)); 
                                                                                    padre.AddHijo(g); 
                                                                                    padre.AddHijo(new Nodo("res_FINSI", h, hright, hleft)); 
                                                                                    RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELSEIF ::= ELSEIF res_ELSEIF EXPRESION_logica res_ENTONCES RECURSIVE_INST 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("ELIF", "", 0,0);
                                                                                    padre.AddHijo(a); 
                                                                                    padre.AddHijo(new Nodo("res_ELIF", b, bright, bleft)); 
                                                                                    padre.AddHijo(c); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", d, dright, dleft)); 
                                                                                    padre.AddHijo(e);
                                                                                    RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELSEIF ::= res_ELSEIF EXPRESION_logica res_ENTONCES RECURSIVE_INST 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		   Nodo padre = new Nodo("ELIF", "", 0,0);
                                                                                    padre.AddHijo(new Nodo("res_ELIF", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d);RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELSEIF ::= res_ELSEIF IDENTIFICADOR res_ENTONCES RECURSIVE_INST 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		   Nodo padre = new Nodo("ELIF", "", 0,0);
                                                                                    padre.AddHijo(new Nodo("res_ELIF", a, aright, aleft)); 
                                                                                    padre.AddHijo(new Nodo("ID", b, bright, bleft)); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", c, cright, cleft)); 
                                                                                    padre.AddHijo(d);RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSEIF ::= ELSEIF res_ELSEIF IDENTIFICADOR res_ENTONCES RECURSIVE_INST 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("ELIF", "", 0,0);
                                                                                    padre.AddHijo(a); 
                                                                                    padre.AddHijo(new Nodo("res_ELIF", b, bright, bleft)); 
                                                                                    padre.AddHijo(new Nodo("ID", c, cright, cleft)); 
                                                                                    padre.AddHijo(new Nodo("res_THEN", d, dright, dleft)); 
                                                                                    padre.AddHijo(e);RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= res_PARA LISTID tk_ASIGNAFLECHA EXPRESION_NUM res_HASTA EXPRESION_logica res_HACER RECURSIVE_INST res_FINPARA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("FOR", "", 0,0);
                                                                                    padre.AddHijo(new Nodo("res_PARA", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("tk_FLECHA", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(new Nodo("res_HASTA", e, eright, eleft)); 
                                                                                    padre.AddHijo(f); 
                                                                                    padre.AddHijo(new Nodo("res_HACER", g, gright, gleft)); 
                                                                                    padre.AddHijo(h); 
                                                                                    padre.AddHijo(new Nodo("res_FINPARA", i, iright, ileft)); 
                                                                                    RESULT = padre;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FOR ::= res_PARA LISTID tk_ASIGNAFLECHA EXPRESION_NUM res_HASTA EXPRESION_logica res_HACER res_FINPARA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("FOR", "", 0,0);
                                                                                    padre.AddHijo(new Nodo("res_PARA", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("tk_FLECHA", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(new Nodo("res_HASTA", e, eright, eleft)); 
                                                                                    padre.AddHijo(f); 
                                                                                    padre.AddHijo(new Nodo("res_HACER", g, gright, gleft)); 
                                                                                    padre.AddHijo(new Nodo("RECURSIVE_INST", "", 0, 0)); 
                                                                                    padre.AddHijo(new Nodo("res_FINPARA", i, iright, ileft)); 
                                                                                    RESULT = padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FOR ::= res_PARA LISTID tk_ASIGNAFLECHA EXPRESION_NUM res_HASTA EXPRESION_logica res_CONINCREM EXPRESION_NUM res_HACER RECURSIVE_INST res_FINPARA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("FOR", "", 0,0);
                                                                                    padre.AddHijo(new Nodo("res_PARA", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("tk_FLECHA", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(new Nodo("res_HASTA", e, eright, eleft)); 
                                                                                    padre.AddHijo(f); 
                                                                                    padre.AddHijo(new Nodo("res_CONINCREM", g, gright, gleft)); 
                                                                                    padre.AddHijo(h); 
                                                                                    padre.AddHijo(new Nodo("res_HACER", i, iright, ileft)); 
                                                                                    padre.AddHijo(j); 
                                                                                    padre.AddHijo(new Nodo("res_PARAFION", z, zright, zleft)); 
                                                                                    RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= res_MIENTRAS EXPRESION_logica res_HACER RECURSIVE_INST res_FINMIENTRAS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("WHILE", "", 0,0);
                                                                                    padre.AddHijo(new Nodo("res_WHILE", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("res_HACER", c, cright, cleft)); 
                                                                                    padre.AddHijo(d); 
                                                                                    padre.AddHijo(new Nodo("res_FINWHILE", e, eright, eleft)); 
                                                                                    RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WHILE ::= res_MIENTRAS EXPRESION_logica res_HACER res_FINMIENTRAS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("WHILE", "", 0,0);
                                                                                    padre.AddHijo(new Nodo("res_WHILE", a, aright, aleft)); 
                                                                                    padre.AddHijo(b); 
                                                                                    padre.AddHijo(new Nodo("res_HACER", c, cright, cleft)); 
                                                                                    padre.AddHijo(new Nodo("RECURSIVE_INST", "", 0, 0)); 
                                                                                    padre.AddHijo(new Nodo("res_FINWHILE", d, dright, dleft)); 
                                                                                    RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // HASTA ::= res_REPETIR RECURSIVE_INST res_HASTAQ EXPRESION_logica 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("REPETIR", "", 0,0);
                                                                        padre.AddHijo(new Nodo("res_REPETIR", a, aright, aleft)); 
                                                                        padre.AddHijo(b); 
                                                                        padre.AddHijo(new Nodo("res_HASTA", c, cright, cleft)); 
                                                                        padre.AddHijo(d); 
                                                                        RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("HASTA",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // HASTA ::= res_REPETIR res_HASTAQ EXPRESION_logica 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("REPETIR", "", 0,0);
                                                            padre.AddHijo(new Nodo("res_REPETIR", a, aright, aleft)); 
                                                            padre.AddHijo(new Nodo("res_HASTA", b, bright, bleft)); 
                                                            padre.AddHijo(new Nodo("RECURSIVE_INST", "", 0, 0)); 
                                                            padre.AddHijo(c);
                                                            RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("HASTA",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCH ::= res_SEGUN EXPRESION_NUM res_HACER SWITCH_ res_FINSEGUN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("SWITCH", "", 0,0);
                                                                            padre.AddHijo(new Nodo("res_SEGUN", a, aright, aleft)); 
                                                                            padre.AddHijo(b);
                                                                            padre.AddHijo(new Nodo("res_DO", c, cright, cleft)); 
                                                                            padre.AddHijo(d);
                                                                            padre.AddHijo(new Nodo("res_FINSEGUN", e, eright, eleft)); 
                                                                            RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= res_SEGUN EXPRESION_NUM res_HACER SWITCH_ res_ELSE res_ENTONCES RECURSIVE_INST res_FINSEGUN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("SWITCH", "", 0,0);
                                                                                                    padre.AddHijo(new Nodo("res_SEGUN", a, aright, aleft)); 
                                                                                                    padre.AddHijo(b);
                                                                                                    padre.AddHijo(new Nodo("res_DO", c, cright, cleft)); 
                                                                                                    padre.AddHijo(d);
                                                                                                    padre.AddHijo(new Nodo("res_ELSE", e, eright, eleft)); 
                                                                                                    padre.AddHijo(new Nodo("res_THEN", f, fright, fleft)); 
                                                                                                    padre.AddHijo(g);
                                                                                                    padre.AddHijo(new Nodo("res_FINSEGUN", h, hright, hleft)); 
                                                                                                    RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWITCH_ ::= SWITCH_ tk_ASKA EXPRESION_NUM tk_ASKC res_ENTONCES RECURSIVE_INST 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("SWITCH_", "", 0,0);
                                                                                padre.AddHijo(a);
                                                                                padre.AddHijo(new Nodo("tk_ASKA", b, bright, bleft)); 
                                                                                padre.AddHijo(c);
                                                                                padre.AddHijo(new Nodo("tk_ASKC", d, dright, dleft)); 
                                                                                padre.AddHijo(new Nodo("res_THEN", e, eright, eleft)); 
                                                                                padre.AddHijo(f);
                                                                                RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWITCH_ ::= tk_ASKA EXPRESION_NUM tk_ASKC res_ENTONCES RECURSIVE_INST 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("SWITCH_", "", 0,0);
                                                                                padre.AddHijo(new Nodo("tk_ASKA", a, aright, aleft)); 
                                                                                padre.AddHijo(b);
                                                                                padre.AddHijo(new Nodo("tk_ASKC", c, cright, cleft)); 
                                                                                padre.AddHijo(new Nodo("res_THEN", d, dright, dleft)); 
                                                                                padre.AddHijo(e);
                                                                                RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODO ::= res_METODO IDENTIFICADOR RECURSIVE_INST res_FINMETODO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("METODO", "", 0,0);
                                                                                padre.AddHijo(new Nodo("res_METODO", a, aright, aleft)); 
                                                                                padre.AddHijo(new Nodo("ID", b, bright, bleft)); 
                                                                                padre.AddHijo(c);
                                                                                padre.AddHijo(new Nodo("res_FINMETODO", d, dright, dleft)); 
                                                                                RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODO ::= res_METODO IDENTIFICADOR res_METODOCONP tk_PARIZQ LISTP tk_PARDER RECURSIVE_INST res_FINMETODO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("METODO", "", 0,0);
                                                                                padre.AddHijo(new Nodo("res_METODO", a, aright, aleft)); 
                                                                                padre.AddHijo(new Nodo("ID", b, bright, bleft)); 
                                                                                padre.AddHijo(new Nodo("res_METODOCONP", c,cright, cleft)); 
                                                                                padre.AddHijo(new Nodo("tk_PARIZQ", d, dright, dleft)); 
                                                                                padre.AddHijo(e);
                                                                                padre.AddHijo(new Nodo("tk_PARDER", f, fright, fleft)); 
                                                                                padre.AddHijo(g);
                                                                                padre.AddHijo(new Nodo("res_FINMETODO", h, hright, hleft)); 
                                                                                RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= res_FUNCION IDENTIFICADOR TIPO RECURSIVE_INST RETORNAR res_FINFUNCION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION", "", 0,0);
                                                                                padre.AddHijo(new Nodo("res_FUNCION", a, aright, aleft)); 
                                                                                padre.AddHijo(new Nodo("ID", b, bright, bleft)); 
                                                                                padre.AddHijo(c);
                                                                                padre.AddHijo(d);
                                                                                padre.AddHijo(f);
                                                                                padre.AddHijo(new Nodo("res_FINFUNCION", e, eright, eleft)); 
                                                                                RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= res_FUNCION IDENTIFICADOR TIPO res_METODOCONP tk_PARIZQ LISTP tk_PARDER RECURSIVE_INST RETORNAR res_FINFUNCION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION", "", 0,0);
                                                                                padre.AddHijo(new Nodo("res_METODO", a, aright, aleft)); 
                                                                                padre.AddHijo(new Nodo("ID", b, bright, bleft)); 
                                                                                padre.AddHijo(c);
                                                                                padre.AddHijo(new Nodo("res_METODOCONP", d, dright, dleft)); 
                                                                                padre.AddHijo(new Nodo("tk_PARIZQ", e, eright, eleft)); 
                                                                                padre.AddHijo(f);
                                                                                padre.AddHijo(new Nodo("tk_PARDER", g, gright, gleft)); 
                                                                                padre.AddHijo(h);
                                                                                padre.AddHijo(j);
                                                                                padre.AddHijo(new Nodo("res_FINFUNCION", i, iright, ileft)); 
                                                                                RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EJECUTAR ::= res_EJECUTAR IDENTIFICADOR tk_PARIZQ tk_PARDER tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("EJECUTAR", "", 0,0);
                                                                                padre.AddHijo(new Nodo("res_EJECUTAR", a, aright, aleft)); 
                                                                                padre.AddHijo(new Nodo("ID", b, bright, bleft)); 
                                                                                padre.AddHijo(new Nodo("tk_PARIZQ", c, cright, cleft)); 
                                                                                padre.AddHijo(new Nodo("tk_PARDER", d, dright, dleft)); 
                                                                                padre.AddHijo(new Nodo("tk_PTCOMA", e, eright, eleft)); 
                                                                                RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EJECUTAR ::= res_EJECUTAR IDENTIFICADOR tk_PARIZQ LISTP_ tk_PARDER tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("EJECUTAR", "", 0,0);
                                                                                padre.AddHijo(new Nodo("res_EJECUTAR", a, aright, aleft)); 
                                                                                padre.AddHijo(new Nodo("ID", b, bright, bleft)); 
                                                                                padre.AddHijo(new Nodo("tk_PARIZQ", c, cright, cleft)); 
                                                                                padre.AddHijo(d);
                                                                                padre.AddHijo(new Nodo("tk_PARDER", e, eright, eleft)); 
                                                                                padre.AddHijo(new Nodo("tk_PTCOMA", f, fright, fleft)); 
                                                                                RESULT = padre;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETORNAR ::= res_RETORNAR EXPRESION_NUM tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
                                                Nodo padre = new Nodo("RETURN", "", 0,0);
                                                padre.AddHijo(new Nodo("res_RETORNAR", a, aright, aleft));              
                                                padre.AddHijo(b);     
                                                padre.AddHijo(new Nodo("tk_PTCOMA", c, cright, cleft));           
                                                RESULT = padre;    
                                                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RETORNAR ::= res_RETORNAR EXPRESION_logica tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
                                                Nodo padre = new Nodo("RETURN", "", 0,0);
                                                padre.AddHijo(new Nodo("res_RETORNAR", a, aright, aleft));              
                                                padre.AddHijo(b);     
                                                padre.AddHijo(new Nodo("tk_PTCOMA", c, cright, cleft));           
                                                RESULT = padre;    
                                                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNAR",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRINT ::= res_IMPRIMIR PRINT_ tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
                                                Nodo padre = new Nodo("PRINT", "", 0,0);
                                                padre.AddHijo(new Nodo("res_PRINT", a, aright, aleft));               //agregamos como hijo la palabra reservada imprimir
                                                padre.AddHijo(b);     //agregamos como hijo el identificador de la cadena
                                                padre.AddHijo(new Nodo("tk_PTCOMA", c, cright, cleft));             //agregamos como hijo el signo ptcoma
                                                RESULT = padre;    
                                                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRINT ::= res_IMPRIMIRNL PRINT_ tk_PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
                                                        Nodo padre = new Nodo("PRINTLN", "", 0,0);
                                                        padre.AddHijo(new Nodo("res_PRINTNL", a, aright, aleft));               
                                                        padre.AddHijo(b);     
                                                        padre.AddHijo(new Nodo("tk_PTCOMA", c, cright, cleft));             
                                                        RESULT = padre;    
                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRINT_ ::= tk_CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		Nodo padre = new Nodo("E", "", 0,0);
                        padre.AddHijo(new Nodo("tk_CADENA", a, aright, aleft));
                        RESULT = padre;
                        //imprimir.print(a,true);
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRINT_ ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		Nodo padre = new Nodo("E", "", 0,0);
                            padre.AddHijo(new Nodo("ID", a, aright, aleft));
                            RESULT = padre;
                            //imprimir.print(a,false);
                             
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRINT_ ::= tk_PARIZQ IDENTIFICADOR tk_PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		Nodo padre = new Nodo("E", "", 0,0);
                                                    padre.AddHijo(new Nodo("tk_PARIZQ", a, aright, aleft));               
                                                    padre.AddHijo(new Nodo("ID", b, bright, bleft));               
                                                    padre.AddHijo(new Nodo("tk_PARDER", c, cright, cleft));               
                                                    RESULT = padre;
                                                    imprimir.print(b,false);
                                                     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PRINT_ ::= tk_PARIZQ tk_CADENA tk_PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		Nodo padre = new Nodo("E", "", 0,0);
                                                    padre.AddHijo(new Nodo("tk_PARIZQ", a, aright, aleft));               
                                                    padre.AddHijo(new Nodo("tk_CADENA", b, bright, bleft));               
                                                    padre.AddHijo(new Nodo("tk_PARDER", c, cright, cleft));               
                                                    RESULT = padre;
                                                    imprimir.print(b,true);
                                                     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= res_CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("TIPO", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                       padre.AddHijo(new Nodo("res_CADENA", a, aright, aleft));
                        RESULT=padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= res_NUMERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("TIPO", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                       padre.AddHijo(new Nodo("res_NUM", a, aright, aleft));
                        RESULT=padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= res_CARACTER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("TIPO", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                       padre.AddHijo(new Nodo("res_CHAR", a, aright, aleft));
                        RESULT=padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= res_BOOLEAN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("TIPO", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                       padre.AddHijo(new Nodo("res_BOOLEAN", a, aright, aleft));
                        RESULT=padre; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTID ::= LISTID tk_COMA IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                     Nodo padre = new Nodo("LISTID", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                     padre.AddHijo(a); 
                                     padre.AddHijo (new Nodo("tk_PTCOMA", b, 0,0));
                                     padre.AddHijo (new Nodo("ID", c, 0,0));
                                     RESULT = padre;
                                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTID",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTID ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                     Nodo padre = new Nodo("LISTID", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                     padre.AddHijo (new Nodo("ID", a, 0,0));
                                     RESULT = padre;
                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTID",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTP ::= LISTP tk_COMA IDENTIFICADOR TIPO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                                Nodo padre = new Nodo("LISTP", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                                padre.AddHijo(a);
                                                padre.AddHijo (new Nodo("tk_COMA", b, bright,bleft));
                                                padre.AddHijo (new Nodo("ID", c, cright,cleft));
                                                padre.AddHijo(d);
                                                RESULT = padre;
                                                   
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTP",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTP ::= IDENTIFICADOR TIPO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                     Nodo padre = new Nodo("LISTP", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion
                                     padre.AddHijo (new Nodo("ID", a, 0,0));
                                     padre.AddHijo(b);
                                     RESULT = padre;
                                 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTP",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTP_ ::= LISTP_ tk_COMA EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                                Nodo padre = new Nodo("LISTP", "", 0,0);             
                                                padre.AddHijo(a);
                                                padre.AddHijo (new Nodo("tk_COMA", b, bright,bleft));
                                                padre.AddHijo(c);
                                                RESULT = padre;
                                                   
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTP_",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTP_ ::= EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("LISTP", "", 0,0);
                             padre.AddHijo(a);
                             RESULT = padre;
                                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTP_",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION_NUM ::= EXPRESION_NUM tk_MAS EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("mas", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION_NUM ::= EXPRESION_NUM tk_MENOS EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("menos", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION_NUM ::= EXPRESION_NUM tk_POR EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("por", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION_NUM ::= EXPRESION_NUM tk_DIVIDIDO EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("div", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_NUM ::= EXPRESION_NUM res_POTENCIA tk_CORCHIZQ EXPRESION_NUM tk_CORCHDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("pow", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(new Nodo("tk_CORCHIZQ", c, cright, cleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(e);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("tk_CORCHDER", d, dright, dleft));       //agregamos como hijo el signo mas
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_NUM ::= EXPRESION_NUM res_MOD EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("mod", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION_NUM ::= tk_PARIZQ EXPRESION_NUM tk_PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                                                         padre.AddHijo(new Nodo("tk_PABRE", a, aright, aleft));    
                                                         padre.AddHijo(b);    
                                                         padre.AddHijo(new Nodo("tk_PCIERRA", c, cright, cleft));    
                                                         RESULT = padre;                                         
                                                       
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_NUM ::= ENTERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("ENTERO", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_NUM ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("DECIMAL", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_NUM ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("ID", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_NUM ::= CARACTER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("CARACTER", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_NUM ::= tk_CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("tk_cadena", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_NUM ::= res_VERDADERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("TRUE", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_NUM ::= res_FALSO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("FALSE", a, aright, aleft));    
                        RESULT = padre;                                         
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_NUM",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RECURSIVE_INST ::= INSTRUCCIONES RECURSIVE_INST 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("RECURSIVE_INST", "", 0,0); 
                                                    padre.AddHijo(a);    
                                                    padre.AddHijo(b);    
                                                    RESULT = padre;                                         
                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE_INST",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RECURSIVE_INST ::= INSTRUCCIONES 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("RECURSIVE_INST", "", 0,0); 
                                                    padre.AddHijo(a);    
                                                    RESULT = padre;                                         
                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RECURSIVE_INST",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCCIONES ::= DECLARA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCCIONES ::= ASIGNA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCCIONES ::= CONDICION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCCIONES ::= SWITCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCCIONES ::= FOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCCIONES ::= WHILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCCIONES ::= HASTA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCCIONES ::= PRINT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		imprimir.returnPrint();   RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION_logica ::= EXPRESION_NUM res_MAYOR EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("mayorQ", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION_logica ::= EXPRESION_NUM res_MENOR EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("menorQ", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION_logica ::= EXPRESION_NUM res_MENORIGUAL EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("menorIgual", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION_logica ::= EXPRESION_NUM res_MAYORIGUAL EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("mayorIgual", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION_logica ::= EXPRESION_NUM res_ESIGUAL EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("igual", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION_logica ::= EXPRESION_NUM res_ESDIFERENTE EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("diff", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION_logica ::= EXPRESION_NUM res_AND EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("AND", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION_logica ::= EXPRESION_NUM res_OR EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("OR", b, bright, bleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION_logica ::= res_NOT EXPRESION_logica 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                    padre.AddHijo(new Nodo("NOT", a, aright, aleft));       //agregamos como hijo el signo mas
                                                    padre.AddHijo(b);                                       //agregamos como hijo el nodo que retorno la expresion
                                                    RESULT = padre;                                         //retornamos el nodo padre
                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION_logica ::= res_NOT EXPRESION_NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                    padre.AddHijo(new Nodo("NOT", a, aright, aleft));       //agregamos como hijo el signo mas
                                                    padre.AddHijo(b);                                       //agregamos como hijo el nodo que retorno la expresion
                                                    RESULT = padre;                                         //retornamos el nodo padre
                                                    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION_logica ::= tk_PARIZQ EXPRESION_logica tk_PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                            padre.AddHijo(b);                                       //agregamos como hijo el nodo que retorno la expresion
                                                            padre.AddHijo(new Nodo("tk_PARIZQ", a, aright, aleft));       //agregamos como hijo el signo mas
                                                            padre.AddHijo(new Nodo("tk_PARDER", c, cright, cleft));       //agregamos como hijo el signo mas
                                                            RESULT = padre;                                         //retornamos el nodo padre
                                                            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_logica",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
