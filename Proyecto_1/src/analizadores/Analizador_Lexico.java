/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;
import arbol.Errores;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 13,  3, 20, 20, 12,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    16,  0,  9,  0,  4,  0,  0,  2, 46, 47, 21, 48, 45, 49, 14, 19, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0, 44,  0,  0, 53, 50, 
     0, 32, 38, 24, 37, 29, 26, 27, 41, 23, 43, 18, 35, 33, 10, 25, 
    39, 42, 28, 31, 11, 36, 34, 18, 18, 40, 18, 51,  8, 52,  0, 17, 
     0, 32, 38, 24, 37, 29, 26, 27, 41, 23, 43, 18, 35, 33, 10, 25, 
    39, 42, 28, 31, 11, 36, 34, 18, 18, 40, 18,  5, 15,  7,  0,  0, 
     0,  0,  0,  0,  0, 20,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\16\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\0"+
    "\1\24\5\0\1\25\11\0\1\26\7\0\1\27\14\0"+
    "\1\30\1\0\1\24\1\31\1\25\1\32\1\0\2\7"+
    "\11\0\1\33\10\0\1\34\25\0\1\35\2\0\1\36"+
    "\23\0\1\37\4\0\1\7\14\0\1\40\7\0\1\41"+
    "\2\0\1\42\1\0\1\43\4\0\1\44\1\45\1\46"+
    "\1\47\6\0\1\50\1\0\1\51\14\0\1\52\1\0"+
    "\1\53\21\0\1\54\1\0\1\55\14\0\1\56\1\57"+
    "\3\0\1\60\4\0\1\61\1\62\1\63\1\64\1\0"+
    "\1\65\1\66\4\0\1\67\1\70\3\0\1\71\2\0"+
    "\1\72\5\0\1\73\1\0\1\74\5\0\1\75\4\0"+
    "\1\76\2\0\1\77\7\0\1\100\1\101\5\0\1\102"+
    "\1\103\2\0\1\104\1\0\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\66\0\66\0\242\0\66"+
    "\0\330\0\u010e\0\u0144\0\u017a\0\u01b0\0\66\0\u01e6\0\u021c"+
    "\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\66\0\66\0\66\0\66"+
    "\0\66\0\u04da\0\66\0\66\0\66\0\u0510\0\66\0\u0546"+
    "\0\u057c\0\u05b2\0\330\0\u05e8\0\66\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\66\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\66\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\66\0\u0c06\0\u0510\0\u05b2\0\330"+
    "\0\66\0\u0c3c\0\66\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\66\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\66\0\u14e2\0\u1518\0\66"+
    "\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\66\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\66\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\66\0\u1e2a\0\u1e60"+
    "\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\66"+
    "\0\u2010\0\66\0\66\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e"+
    "\0\u2154\0\66\0\u218a\0\66\0\u21c0\0\u21f6\0\u222c\0\u2262"+
    "\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412"+
    "\0\66\0\u2448\0\66\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706"+
    "\0\u273c\0\u2772\0\u27a8\0\u27de\0\66\0\u2814\0\66\0\u284a"+
    "\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa"+
    "\0\u2a30\0\u2a66\0\u2a9c\0\66\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74"+
    "\0\66\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\66\0\66\0\66"+
    "\0\66\0\u2c82\0\66\0\66\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a"+
    "\0\66\0\66\0\u2d90\0\u2dc6\0\u2dfc\0\66\0\u2e32\0\u2e68"+
    "\0\66\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\66\0\u2fac"+
    "\0\66\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\66\0\u30f0"+
    "\0\u3126\0\u315c\0\u3192\0\66\0\u31c8\0\u31fe\0\66\0\u3234"+
    "\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\66\0\66"+
    "\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\66\0\66\0\u34bc"+
    "\0\u34f2\0\66\0\u3528\0\66\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\2\2\13\2\2\1\13\1\14"+
    "\1\2\1\15\1\0\1\16\2\17\1\20\1\21\1\22"+
    "\1\2\1\23\1\24\2\25\1\26\1\27\1\30\2\2"+
    "\1\31\1\32\1\33\1\2\1\34\2\2\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\2"+
    "\66\0\2\46\1\47\1\0\1\50\3\46\1\51\1\0"+
    "\3\46\1\0\50\46\6\0\1\7\7\0\1\52\47\0"+
    "\10\53\1\54\1\55\54\53\31\0\1\56\12\0\1\57"+
    "\35\0\2\13\2\0\1\13\53\0\1\14\3\0\2\14"+
    "\5\0\2\14\4\0\7\14\1\0\15\14\35\0\1\60"+
    "\1\0\1\61\52\0\1\62\26\0\1\63\55\0\1\64"+
    "\6\0\1\65\46\0\1\66\12\0\1\67\57\0\2\70"+
    "\10\0\1\71\3\0\1\72\56\0\1\73\42\0\1\74"+
    "\23\0\2\75\13\0\1\76\40\0\2\77\5\0\1\100"+
    "\42\0\1\101\101\0\2\102\1\0\1\103\3\0\1\104"+
    "\2\0\1\105\62\0\1\106\65\0\1\107\61\0\1\110"+
    "\65\0\1\111\6\0\1\112\65\0\1\113\112\0\1\114"+
    "\2\0\1\47\65\0\1\47\2\0\1\115\62\0\1\116"+
    "\6\0\3\46\60\0\1\117\10\0\2\117\45\0\10\53"+
    "\1\54\1\120\54\53\13\0\1\121\113\0\1\122\24\0"+
    "\3\60\1\123\10\60\1\124\7\60\1\0\41\60\25\61"+
    "\1\125\40\61\26\0\2\126\3\0\1\127\101\0\1\130"+
    "\30\0\1\131\26\0\1\132\60\0\1\133\10\0\1\134"+
    "\56\0\2\135\40\0\1\136\116\0\1\137\34\0\1\140"+
    "\66\0\1\141\33\0\1\142\31\0\1\143\73\0\1\144"+
    "\101\0\1\145\63\0\1\146\77\0\1\147\55\0\1\150"+
    "\75\0\1\151\32\0\1\152\1\153\122\0\1\154\51\0"+
    "\1\155\52\0\1\156\75\0\1\157\47\0\1\160\106\0"+
    "\1\161\61\0\1\162\5\0\2\163\34\0\1\164\114\0"+
    "\1\165\33\0\1\123\62\0\23\166\1\123\1\166\1\167"+
    "\40\166\30\0\1\170\71\0\1\171\65\0\1\172\51\0"+
    "\1\173\1\174\75\0\1\175\74\0\1\176\62\0\1\177"+
    "\56\0\2\200\57\0\1\201\102\0\2\202\56\0\1\203"+
    "\66\0\1\204\71\0\1\205\61\0\1\206\62\0\2\207"+
    "\15\0\1\210\50\0\1\211\101\0\1\212\33\0\1\213"+
    "\117\0\1\214\52\0\1\215\65\0\1\216\65\0\1\217"+
    "\101\0\1\220\63\0\1\221\65\0\1\222\57\0\1\223"+
    "\70\0\1\224\62\0\1\225\43\0\1\226\60\0\1\164"+
    "\1\46\112\0\1\227\31\0\23\61\1\230\1\61\1\125"+
    "\63\61\1\231\1\61\1\125\40\61\26\0\2\232\73\0"+
    "\1\233\56\0\2\234\64\0\2\235\100\0\1\236\4\0"+
    "\1\237\46\0\1\240\47\0\1\241\105\0\1\242\3\0"+
    "\2\243\1\0\1\244\5\0\1\245\47\0\1\246\62\0"+
    "\2\247\72\0\1\250\44\0\1\251\64\0\1\252\106\0"+
    "\1\253\60\0\2\254\102\0\1\255\33\0\1\256\66\0"+
    "\1\257\115\0\1\260\56\0\1\261\76\0\1\262\54\0"+
    "\1\263\71\0\1\264\56\0\1\265\71\0\1\266\42\0"+
    "\1\267\107\0\1\270\71\0\1\271\56\0\1\272\57\0"+
    "\1\166\73\0\1\273\72\0\2\274\67\0\1\275\36\0"+
    "\1\276\113\0\1\277\65\0\1\300\40\0\1\301\112\0"+
    "\1\302\71\0\1\303\47\0\2\304\5\0\1\305\56\0"+
    "\2\306\5\0\1\307\70\0\1\310\56\0\1\311\46\0"+
    "\1\312\101\0\2\313\66\0\1\314\101\0\1\315\53\0"+
    "\1\316\46\0\1\317\106\0\1\320\62\0\1\321\55\0"+
    "\1\322\75\0\1\323\55\0\1\324\111\0\1\325\41\0"+
    "\1\326\104\0\1\327\55\0\1\330\56\0\1\331\104\0"+
    "\1\332\53\0\2\333\66\0\1\334\100\0\1\335\56\0"+
    "\1\336\66\0\1\337\42\0\1\340\106\0\1\341\67\0"+
    "\1\342\43\0\1\343\106\0\1\344\43\0\1\345\113\0"+
    "\1\346\61\0\1\347\66\0\1\350\70\0\1\351\62\0"+
    "\1\352\70\0\1\353\65\0\1\354\56\0\1\355\65\0"+
    "\1\356\71\0\1\357\60\0\1\360\47\0\1\361\101\0"+
    "\2\362\110\0\1\363\47\0\1\364\65\0\1\365\65\0"+
    "\1\366\62\0\1\367\74\0\1\370\61\0\1\371\61\0"+
    "\1\372\101\0\1\373\33\0\1\374\104\0\1\375\74\0"+
    "\1\376\61\0\1\377\67\0\2\u0100\71\0\1\u0101\56\0"+
    "\1\u0102\65\0\1\u0103\67\0\2\u0104\47\0\1\u0105\65\0"+
    "\1\u0106\100\0\1\u0107\62\0\1\u0108\74\0\1\u0109\65\0"+
    "\1\u010a\71\0\1\u010b\42\0\1\u010c\101\0\1\u010d\64\0"+
    "\1\u010e\72\0\1\u010f\52\0\2\u0110\50\0\1\u0111\66\0"+
    "\1\u0112\117\0\1\u0113\55\0\1\u0114\56\0\2\u0115\64\0"+
    "\2\u0116\67\0\1\u0117\46\0\1\u0118\110\0\1\u0119\42\0"+
    "\1\u011a\114\0\1\u011b\61\0\1\u011c\61\0\1\u011d\70\0"+
    "\1\u011e\62\0\1\u011f\46\0\1\u0120\106\0\1\u0121\65\0"+
    "\1\u0122\45\0\1\u0123\115\0\1\u0124\57\0\1\u0125\43\0"+
    "\1\u0126\64\0\1\u0127\113\0\1\u0128\40\0\1\u0129\116\0"+
    "\1\u012a\65\0\1\u012b\55\0\1\u012c\43\0\1\u012d\107\0"+
    "\1\u012e\67\0\2\u012f\63\0\1\u0130\70\0\1\u0131\65\0"+
    "\1\u0132\65\0\1\u0133\40\0\1\u0134\103\0\1\u0135\77\0"+
    "\1\u0136\65\0\1\u0137\56\0\1\u0138\71\0\1\u0139\63\0"+
    "\2\u013a\54\0\2\u013b\101\0\1\u013c\53\0\1\u013d\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13662];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\1\11\5\1\1\11"+
    "\16\1\5\11\1\1\3\11\1\0\1\11\5\0\1\11"+
    "\11\0\1\11\7\0\1\11\14\0\1\11\1\0\3\1"+
    "\1\11\1\0\1\11\1\1\11\0\1\1\10\0\1\11"+
    "\25\0\1\11\2\0\1\11\23\0\1\11\4\0\1\1"+
    "\14\0\1\11\7\0\1\11\2\0\1\1\1\0\1\1"+
    "\4\0\1\11\1\1\2\11\6\0\1\11\1\0\1\11"+
    "\14\0\1\11\1\0\1\11\21\0\1\11\1\0\1\11"+
    "\14\0\1\11\1\1\3\0\1\11\4\0\4\11\1\0"+
    "\2\11\4\0\2\11\3\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\0\1\11\5\0\1\11\4\0\1\11\2\0"+
    "\1\11\7\0\2\11\5\0\2\11\2\0\1\11\1\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java
Errores error = new Errores("", "", 0, 0);




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
    error.addError("",yytext(),yyline,yychar);
            } 
            // fall through
          case 71: break;
          case 2: 
            { System.out.println("Reconocio token:<tk_ASKA>lexema:"+yytext());return new Symbol(sym.tk_ASKA,yyline,yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 3: 
            { yychar=1;
            } 
            // fall through
          case 73: break;
          case 4: 
            { System.out.println("Reconocio token:<tk_LLAVIZQ>"+yytext());return new Symbol(sym.tk_LLAVIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 5: 
            { System.out.println("Reconocio token:<tk_ENTERO>lexema:"+yytext());return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 6: 
            { System.out.println("Reconocio token:<tk_LLAVDER> lexema:"+yytext());return new Symbol(sym.tk_LLAVDER,yyline,yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 7: 
            { 
            } 
            // fall through
          case 77: break;
          case 8: 
            { System.out.println("Reconocio token:<tk_ID>lexema:"+yytext());return new Symbol(sym.IDENTIFICADOR,yyline,yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 9: 
            { System.out.println("Reconocio token:<tk_DIVIDIR>lexema:"+yytext());return new Symbol(sym.tk_DIVIDIDO,yyline,yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 10: 
            { System.out.println("Reconocio token:<tk_POR>lexema:"+yytext());return new Symbol(sym.tk_POR,yyline,yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 11: 
            { System.out.println("Reconocio token:<tk_PTCOMA>lexema:"+yytext());return new Symbol(sym.tk_PTCOMA,yyline,yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 12: 
            { System.out.println("Reconocio token:<tk_COMA>");return new Symbol(sym.tk_COMA,yyline,yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 13: 
            { System.out.println("Reconocio token:<tk_PARIZQ>lexema:"+yytext());return new Symbol(sym.tk_PARIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 14: 
            { System.out.println("Reconocio token:<tk_PARDER>lexema:"+yytext());return new Symbol(sym.tk_PARDER,yyline,yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 15: 
            { System.out.println("Reconocio token:<tk_MAS>lexema:"+yytext());return new Symbol(sym.tk_MAS,yyline,yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 16: 
            { System.out.println("Reconocio token:<tk_MENOS>lexema:"+yytext());return new Symbol(sym.tk_MENOS,yyline,yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 17: 
            { System.out.println("Reconocio token:<tk_ASKC>lexema:"+yytext());return new Symbol(sym.tk_ASKC,yyline,yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 18: 
            { System.out.println("Reconocio token:<tk_CORCHIZQ>lexema:"+yytext());return new Symbol(sym.tk_CORCHIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 19: 
            { System.out.println("Reconocio token:<tk_CORCHDER>lexema:"+yytext());return new Symbol(sym.tk_CORCHDER,yyline,yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 20: 
            { System.out.println("Reconocio token:<tk_CARACTER>lexema:"+yytext());return new Symbol(sym.CARACTER,yyline,yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 21: 
            { System.out.println("Reconocio tk:CADENA lexema:"+yytext());return new Symbol(sym.tk_CADENA,yyline,yychar, (yytext()).substring(1,yytext().length()-1));
            } 
            // fall through
          case 91: break;
          case 22: 
            { System.out.println("Reconocio RES:OR");return new Symbol(sym.res_OR,yyline,yychar,yytext());
            } 
            // fall through
          case 92: break;
          case 23: 
            { System.out.println("Reconocio RES:SI") ;return new Symbol(sym.res_SI,yyline,yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 24: 
            { System.out.println("Reconocio token:<tk_ASIGFLECHA>lexema:"+yytext());return new Symbol(sym.tk_ASIGNAFLECHA,yyline,yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 25: 
            { System.out.println("Reconocio token:<tk_DECIMAL>lexema:"+yytext());return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 26: 
            { System.out.println("Reconocio RES:NOT");return new Symbol(sym.res_NOT,yyline,yychar,yytext());
            } 
            // fall through
          case 96: break;
          case 27: 
            { System.out.println("Reconocio RES:FIN lexema:"+yytext());return new Symbol(sym.res_FIN,yyline,yychar,yytext());
            } 
            // fall through
          case 97: break;
          case 28: 
            { System.out.println("Reconocio RES:AND");return new Symbol(sym.res_AND,yyline,yychar,yytext());
            } 
            // fall through
          case 98: break;
          case 29: 
            { System.out.println("Reconocio RES:COMO lexema:"+yytext());return new Symbol(sym.res_COMO,yyline,yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 30: 
            { System.out.println("Reconocio RES:ELSEIF") ;return new Symbol(sym.res_ELSEIF,yyline,yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 31: 
            { System.out.println("Reconocio RES:PARA");return new Symbol(sym.res_PARA,yyline,yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 32: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_FALSO,yyline,yychar,yytext());
            } 
            // fall through
          case 102: break;
          case 33: 
            { System.out.println("Reconocio RES:SEGUN") ;return new Symbol(sym.res_SEGUN,yyline,yychar, yytext());
            } 
            // fall through
          case 103: break;
          case 34: 
            { System.out.println("Reconocio RES:<");return new Symbol(sym.res_MENOR,yyline,yychar,yytext());
            } 
            // fall through
          case 104: break;
          case 35: 
            { System.out.println("Reconocio RES:>");return new Symbol(sym.res_MAYOR,yyline,yychar,yytext());
            } 
            // fall through
          case 105: break;
          case 36: 
            { System.out.println("Reconocio RES:DO") ; return new Symbol(sym.res_HACER,yyline,yychar, yytext());
            } 
            // fall through
          case 106: break;
          case 37: 
            { System.out.println("Reconocio RES:hasta");return new Symbol(sym.res_HASTA,yyline,yychar, yytext());
            } 
            // fall through
          case 107: break;
          case 38: 
            { System.out.println("Reconocio RES:NUMERO lexema:"+yytext());return new Symbol(sym.res_NUMERO,yyline,yychar, yytext());
            } 
            // fall through
          case 108: break;
          case 39: 
            { System.out.println("Reconocio RES:INICIO lexema:"+yytext()); return new Symbol(sym.res_INICIO,yyline,yychar,yytext());
            } 
            // fall through
          case 109: break;
          case 40: 
            { System.out.println("Reconocio RES:CADENA lexema:"+yytext());return new Symbol(sym.res_CADENA,yyline,yychar,yytext());
            } 
            // fall through
          case 110: break;
          case 41: 
            { System.out.println("Reconocio RES:FINSI") ;return new Symbol(sym.res_FINSI,yyline,yychar, yytext());
            } 
            // fall through
          case 111: break;
          case 42: 
            { System.out.println("Reconocio RES:MODULO");return new Symbol(sym.res_MOD,yyline,yychar,yytext());
            } 
            // fall through
          case 112: break;
          case 43: 
            { System.out.println("Reconocio RES:METODO") ;return new Symbol(sym.res_METODO,yyline,yychar, yytext());
            } 
            // fall through
          case 113: break;
          case 44: 
            { System.out.println("Reconocio RES:FUNCION"); return new Symbol(sym.res_FUNCION,yyline,yychar, yytext());
            } 
            // fall through
          case 114: break;
          case 45: 
            { System.out.println("Reconocio RES:REPETIR") ;return new Symbol(sym.res_REPETIR,yyline,yychar, yytext());
            } 
            // fall through
          case 115: break;
          case 46: 
            { System.out.println("Reconocio RES:INGRESAR lexema:"+yytext());return new Symbol(sym.res_INGRESAR,yyline,yychar, yytext());
            } 
            // fall through
          case 116: break;
          case 47: 
            { System.out.println("Reconocio RES:IMPRIMIR") ;return new Symbol(sym.res_IMPRIMIR,yyline,yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 48: 
            { System.out.println("Reconocio RES:CARACTER lexema:"+yytext());return new Symbol(sym.res_CARACTER,yyline,yychar,yytext());
            } 
            // fall through
          case 118: break;
          case 49: 
            { System.out.println("Reconocio RES:FINPARA");return new Symbol(sym.res_FINPARA,yyline,yychar, yytext());
            } 
            // fall through
          case 119: break;
          case 50: 
            { return new Symbol(sym.res_RETORNAR,yyline,yychar, yytext());
            } 
            // fall through
          case 120: break;
          case 51: 
            { System.out.println("Reconocio RES:then") ;return new Symbol(sym.res_ENTONCES,yyline,yychar, yytext());
            } 
            // fall through
          case 121: break;
          case 52: 
            { System.out.println("Reconocio RES:=");return new Symbol(sym.res_ESIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 122: break;
          case 53: 
            { System.out.println("Reconocio RES:ejecutar");return new Symbol(sym.res_EJECUTAR,yyline,yychar, yytext());
            } 
            // fall through
          case 123: break;
          case 54: 
            { System.out.println("Reconocio RES:WHILE"); return new Symbol(sym.res_MIENTRAS,yyline,yychar, yytext());
            } 
            // fall through
          case 124: break;
          case 55: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_BOOLEAN,yyline,yychar,yytext());
            } 
            // fall through
          case 125: break;
          case 56: 
            { System.out.println("Reconocio RES:POTENCIA");return new Symbol(sym.res_POTENCIA,yyline,yychar,yytext());
            } 
            // fall through
          case 126: break;
          case 57: 
            { System.out.println("Reconocio RES:CON_VAL lexema:"+yytext());return new Symbol(sym.res_CONVALOR,yyline,yychar, yytext());
            } 
            // fall through
          case 127: break;
          case 58: 
            { return new Symbol(sym.res_FINSEGUN,yyline,yychar, yytext());
            } 
            // fall through
          case 128: break;
          case 59: 
            { System.out.println("Reconocio RES:BOOLEAN lexema:"+yytext());return new Symbol(sym.res_VERDADERO,yyline,yychar,yytext());
            } 
            // fall through
          case 129: break;
          case 60: 
            { System.out.println("Reconocio RES:HAsta Q") ;return new Symbol(sym.res_HASTAQ,yyline,yychar, yytext());
            } 
            // fall through
          case 130: break;
          case 61: 
            { return new Symbol(sym.res_FINMETODO,yyline,yychar, yytext());
            } 
            // fall through
          case 131: break;
          case 62: 
            { return new Symbol(sym.res_IMPRIMIRNL,yyline,yychar, yytext());
            } 
            // fall through
          case 132: break;
          case 63: 
            { return new Symbol(sym.res_FINFUNCION,yyline,yychar, yytext());
            } 
            // fall through
          case 133: break;
          case 64: 
            { return new Symbol(sym.res_FINMIENTRAS,yyline,yychar, yytext());
            } 
            // fall through
          case 134: break;
          case 65: 
            { System.out.println("Reconocio RES:!=");return new Symbol(sym.res_ESDIFERENTE,yyline,yychar,yytext());
            } 
            // fall through
          case 135: break;
          case 66: 
            { System.out.println("Reconocio RES:<=");return new Symbol(sym.res_MENORIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 136: break;
          case 67: 
            { System.out.println("Reconocio RES:>=");return new Symbol(sym.res_MAYORIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 137: break;
          case 68: 
            { return new Symbol(sym.res_METODOCONP,yyline,yychar, yytext());
            } 
            // fall through
          case 138: break;
          case 69: 
            { System.out.println("Reconocio RES:conINCRE");return new Symbol(sym.res_CONINCREM,yyline,yychar, yytext());
            } 
            // fall through
          case 139: break;
          case 70: 
            { System.out.println("Reconocio RES:ELSE") ;return new Symbol(sym.res_ELSE,yyline,yychar, yytext());
            } 
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
